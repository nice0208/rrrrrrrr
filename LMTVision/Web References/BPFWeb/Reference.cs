//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace LMTVision.BPFWeb {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="Eqp_BPFSoap", Namespace="http://tempuri.org/")]
    public partial class Eqp_BPF : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback CheckInputTrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckOutputTrayOperationCompleted;
        
        private System.Threading.SendOrPostCallback DoFinishOperationCompleted;
        
        private System.Threading.SendOrPostCallback TestOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public Eqp_BPF() {
            this.Url = global::LMTVision.Properties.Settings.Default.LMTVision_BPFWeb_Eqp_BPF;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event CheckInputTrayCompletedEventHandler CheckInputTrayCompleted;
        
        /// <remarks/>
        public event CheckOutputTrayCompletedEventHandler CheckOutputTrayCompleted;
        
        /// <remarks/>
        public event DoFinishCompletedEventHandler DoFinishCompleted;
        
        /// <remarks/>
        public event TestCompletedEventHandler TestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckInputTray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckInputTray(string sCoatingTrayNo, string sEqpNo, System.DateTime dtNow, out string sMsg) {
            object[] results = this.Invoke("CheckInputTray", new object[] {
                        sCoatingTrayNo,
                        sEqpNo,
                        dtNow});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckInputTrayAsync(string sCoatingTrayNo, string sEqpNo, System.DateTime dtNow) {
            this.CheckInputTrayAsync(sCoatingTrayNo, sEqpNo, dtNow, null);
        }
        
        /// <remarks/>
        public void CheckInputTrayAsync(string sCoatingTrayNo, string sEqpNo, System.DateTime dtNow, object userState) {
            if ((this.CheckInputTrayOperationCompleted == null)) {
                this.CheckInputTrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckInputTrayOperationCompleted);
            }
            this.InvokeAsync("CheckInputTray", new object[] {
                        sCoatingTrayNo,
                        sEqpNo,
                        dtNow}, this.CheckInputTrayOperationCompleted, userState);
        }
        
        private void OnCheckInputTrayOperationCompleted(object arg) {
            if ((this.CheckInputTrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckInputTrayCompleted(this, new CheckInputTrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckOutputTray", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckOutputTray(string sCoatingTrayNo, string sEqpNo, out string sMsg) {
            object[] results = this.Invoke("CheckOutputTray", new object[] {
                        sCoatingTrayNo,
                        sEqpNo});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckOutputTrayAsync(string sCoatingTrayNo, string sEqpNo) {
            this.CheckOutputTrayAsync(sCoatingTrayNo, sEqpNo, null);
        }
        
        /// <remarks/>
        public void CheckOutputTrayAsync(string sCoatingTrayNo, string sEqpNo, object userState) {
            if ((this.CheckOutputTrayOperationCompleted == null)) {
                this.CheckOutputTrayOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckOutputTrayOperationCompleted);
            }
            this.InvokeAsync("CheckOutputTray", new object[] {
                        sCoatingTrayNo,
                        sEqpNo}, this.CheckOutputTrayOperationCompleted, userState);
        }
        
        private void OnCheckOutputTrayOperationCompleted(object arg) {
            if ((this.CheckOutputTrayCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckOutputTrayCompleted(this, new CheckOutputTrayCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/DoFinish", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool DoFinish(System.Data.DataTable arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot, out string sMsg) {
            object[] results = this.Invoke("DoFinish", new object[] {
                        arrLensBarcode,
                        sOutputLot,
                        sEqpNo,
                        sProduct,
                        dtNow,
                        sBpfLot});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void DoFinishAsync(System.Data.DataTable arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot) {
            this.DoFinishAsync(arrLensBarcode, sOutputLot, sEqpNo, sProduct, dtNow, sBpfLot, null);
        }
        
        /// <remarks/>
        public void DoFinishAsync(System.Data.DataTable arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot, object userState) {
            if ((this.DoFinishOperationCompleted == null)) {
                this.DoFinishOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDoFinishOperationCompleted);
            }
            this.InvokeAsync("DoFinish", new object[] {
                        arrLensBarcode,
                        sOutputLot,
                        sEqpNo,
                        sProduct,
                        dtNow,
                        sBpfLot}, this.DoFinishOperationCompleted, userState);
        }
        
        private void OnDoFinishOperationCompleted(object arg) {
            if ((this.DoFinishCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DoFinishCompleted(this, new DoFinishCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/Test", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool Test([System.Xml.Serialization.XmlArrayItemAttribute("ArrayOfString")] [System.Xml.Serialization.XmlArrayItemAttribute(NestingLevel=1)] string[][] arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot, out string sMsg) {
            object[] results = this.Invoke("Test", new object[] {
                        arrLensBarcode,
                        sOutputLot,
                        sEqpNo,
                        sProduct,
                        dtNow,
                        sBpfLot});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void TestAsync(string[][] arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot) {
            this.TestAsync(arrLensBarcode, sOutputLot, sEqpNo, sProduct, dtNow, sBpfLot, null);
        }
        
        /// <remarks/>
        public void TestAsync(string[][] arrLensBarcode, string sOutputLot, string sEqpNo, string sProduct, System.DateTime dtNow, string sBpfLot, object userState) {
            if ((this.TestOperationCompleted == null)) {
                this.TestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnTestOperationCompleted);
            }
            this.InvokeAsync("Test", new object[] {
                        arrLensBarcode,
                        sOutputLot,
                        sEqpNo,
                        sProduct,
                        dtNow,
                        sBpfLot}, this.TestOperationCompleted, userState);
        }
        
        private void OnTestOperationCompleted(object arg) {
            if ((this.TestCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.TestCompleted(this, new TestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckInputTrayCompletedEventHandler(object sender, CheckInputTrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckInputTrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckInputTrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckOutputTrayCompletedEventHandler(object sender, CheckOutputTrayCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckOutputTrayCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckOutputTrayCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void DoFinishCompletedEventHandler(object sender, DoFinishCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DoFinishCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DoFinishCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void TestCompletedEventHandler(object sender, TestCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class TestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal TestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591