//------------------------------------------------------------------------------
// <auto-generated>
//     此代码由工具生成。
//     运行时版本:4.0.30319.42000
//
//     对此文件的更改可能会导致不正确的行为，并且如果
//     重新生成代码，这些更改将会丢失。
// </auto-generated>
//------------------------------------------------------------------------------

// 
// 此源代码是由 Microsoft.VSDesigner 4.0.30319.42000 版自动生成。
// 
#pragma warning disable 1591

namespace LMTVision.JMBMatchLabel {
    using System;
    using System.Web.Services;
    using System.Diagnostics;
    using System.Web.Services.Protocols;
    using System.Xml.Serialization;
    using System.ComponentModel;
    using System.Data;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="MatchLabelSoap", Namespace="http://tempuri.org/")]
    public partial class MatchLabel : System.Web.Services.Protocols.SoapHttpClientProtocol {
        
        private System.Threading.SendOrPostCallback GetMatchCodeOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchCodeNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchCodeNoStringOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchCodeNoNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchCodeNoNewDateTimeOperationCompleted;
        
        private System.Threading.SendOrPostCallback ConvertToMatchLabelNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStatusBeforeMTFOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckStatusBeforeMTF_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBeforeMTFOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBeforeMTF_NEWOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckDataAfterMTFOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchCodeNoNewDateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlasmaLotionIntervalOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlasmaLotionInterval_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetPlasmaLotionIntervalNewOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBeforeL_HOperationCompleted;
        
        private System.Threading.SendOrPostCallback CheckBeforeL_H_NewOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetMatchAlotOperationCompleted;
        
        private System.Threading.SendOrPostCallback bLoadGlueEqpNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback bDownGlueEqpNoOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetLensBarcoderMatchOperationCompleted;
        
        private System.Threading.SendOrPostCallback FluidDispensingAutoOutOperationCompleted;
        
        private System.Threading.SendOrPostCallback AssemblyBPFOutOperationCompleted;
        
        private bool useDefaultCredentialsSetExplicitly;
        
        /// <remarks/>
        public MatchLabel() {
            this.Url = global::LMTVision.Properties.Settings.Default.LMTVision_JMBMatchLabel_MatchLabel;
            if ((this.IsLocalFileSystemWebService(this.Url) == true)) {
                this.UseDefaultCredentials = true;
                this.useDefaultCredentialsSetExplicitly = false;
            }
            else {
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        public new string Url {
            get {
                return base.Url;
            }
            set {
                if ((((this.IsLocalFileSystemWebService(base.Url) == true) 
                            && (this.useDefaultCredentialsSetExplicitly == false)) 
                            && (this.IsLocalFileSystemWebService(value) == false))) {
                    base.UseDefaultCredentials = false;
                }
                base.Url = value;
            }
        }
        
        public new bool UseDefaultCredentials {
            get {
                return base.UseDefaultCredentials;
            }
            set {
                base.UseDefaultCredentials = value;
                this.useDefaultCredentialsSetExplicitly = true;
            }
        }
        
        /// <remarks/>
        public event GetMatchCodeCompletedEventHandler GetMatchCodeCompleted;
        
        /// <remarks/>
        public event GetMatchCodeNoCompletedEventHandler GetMatchCodeNoCompleted;
        
        /// <remarks/>
        public event GetMatchCodeNoStringCompletedEventHandler GetMatchCodeNoStringCompleted;
        
        /// <remarks/>
        public event GetMatchCodeNoNewCompletedEventHandler GetMatchCodeNoNewCompleted;
        
        /// <remarks/>
        public event GetMatchCodeNoNewDateTimeCompletedEventHandler GetMatchCodeNoNewDateTimeCompleted;
        
        /// <remarks/>
        public event ConvertToMatchLabelNoCompletedEventHandler ConvertToMatchLabelNoCompleted;
        
        /// <remarks/>
        public event CheckStatusBeforeMTFCompletedEventHandler CheckStatusBeforeMTFCompleted;
        
        /// <remarks/>
        public event CheckStatusBeforeMTF_NewCompletedEventHandler CheckStatusBeforeMTF_NewCompleted;
        
        /// <remarks/>
        public event CheckBeforeMTFCompletedEventHandler CheckBeforeMTFCompleted;
        
        /// <remarks/>
        public event CheckBeforeMTF_NEWCompletedEventHandler CheckBeforeMTF_NEWCompleted;
        
        /// <remarks/>
        public event CheckDataAfterMTFCompletedEventHandler CheckDataAfterMTFCompleted;
        
        /// <remarks/>
        public event GetMatchCodeNoNewDateCompletedEventHandler GetMatchCodeNoNewDateCompleted;
        
        /// <remarks/>
        public event GetPlasmaLotionIntervalCompletedEventHandler GetPlasmaLotionIntervalCompleted;
        
        /// <remarks/>
        public event GetPlasmaLotionInterval_NewCompletedEventHandler GetPlasmaLotionInterval_NewCompleted;
        
        /// <remarks/>
        public event GetPlasmaLotionIntervalNewCompletedEventHandler GetPlasmaLotionIntervalNewCompleted;
        
        /// <remarks/>
        public event CheckBeforeL_HCompletedEventHandler CheckBeforeL_HCompleted;
        
        /// <remarks/>
        public event CheckBeforeL_H_NewCompletedEventHandler CheckBeforeL_H_NewCompleted;
        
        /// <remarks/>
        public event GetMatchAlotCompletedEventHandler GetMatchAlotCompleted;
        
        /// <remarks/>
        public event bLoadGlueEqpNoCompletedEventHandler bLoadGlueEqpNoCompleted;
        
        /// <remarks/>
        public event bDownGlueEqpNoCompletedEventHandler bDownGlueEqpNoCompleted;
        
        /// <remarks/>
        public event GetLensBarcoderMatchCompletedEventHandler GetLensBarcoderMatchCompleted;
        
        /// <remarks/>
        public event FluidDispensingAutoOutCompletedEventHandler FluidDispensingAutoOutCompleted;
        
        /// <remarks/>
        public event AssemblyBPFOutCompletedEventHandler AssemblyBPFOutCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCode", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetMatchCode(string sMatchLabel, out string sMsg) {
            object[] results = this.Invoke("GetMatchCode", new object[] {
                        sMatchLabel});
            sMsg = ((string)(results[1]));
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeAsync(string sMatchLabel) {
            this.GetMatchCodeAsync(sMatchLabel, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeAsync(string sMatchLabel, object userState) {
            if ((this.GetMatchCodeOperationCompleted == null)) {
                this.GetMatchCodeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeOperationCompleted);
            }
            this.InvokeAsync("GetMatchCode", new object[] {
                        sMatchLabel}, this.GetMatchCodeOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeOperationCompleted(object arg) {
            if ((this.GetMatchCodeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeCompleted(this, new GetMatchCodeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCodeNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchCodeNo(System.Data.DataTable dtMatch, out string sMsg) {
            object[] results = this.Invoke("GetMatchCodeNo", new object[] {
                        dtMatch});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeNoAsync(System.Data.DataTable dtMatch) {
            this.GetMatchCodeNoAsync(dtMatch, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeNoAsync(System.Data.DataTable dtMatch, object userState) {
            if ((this.GetMatchCodeNoOperationCompleted == null)) {
                this.GetMatchCodeNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeNoOperationCompleted);
            }
            this.InvokeAsync("GetMatchCodeNo", new object[] {
                        dtMatch}, this.GetMatchCodeNoOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeNoOperationCompleted(object arg) {
            if ((this.GetMatchCodeNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeNoCompleted(this, new GetMatchCodeNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCodeNoString", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchCodeNoString(string str, out string sMsg) {
            object[] results = this.Invoke("GetMatchCodeNoString", new object[] {
                        str});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeNoStringAsync(string str) {
            this.GetMatchCodeNoStringAsync(str, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeNoStringAsync(string str, object userState) {
            if ((this.GetMatchCodeNoStringOperationCompleted == null)) {
                this.GetMatchCodeNoStringOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeNoStringOperationCompleted);
            }
            this.InvokeAsync("GetMatchCodeNoString", new object[] {
                        str}, this.GetMatchCodeNoStringOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeNoStringOperationCompleted(object arg) {
            if ((this.GetMatchCodeNoStringCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeNoStringCompleted(this, new GetMatchCodeNoStringCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCodeNoNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchCodeNoNew(System.Data.DataTable dtMatch, out string sMsg) {
            object[] results = this.Invoke("GetMatchCodeNoNew", new object[] {
                        dtMatch});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewAsync(System.Data.DataTable dtMatch) {
            this.GetMatchCodeNoNewAsync(dtMatch, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewAsync(System.Data.DataTable dtMatch, object userState) {
            if ((this.GetMatchCodeNoNewOperationCompleted == null)) {
                this.GetMatchCodeNoNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeNoNewOperationCompleted);
            }
            this.InvokeAsync("GetMatchCodeNoNew", new object[] {
                        dtMatch}, this.GetMatchCodeNoNewOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeNoNewOperationCompleted(object arg) {
            if ((this.GetMatchCodeNoNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeNoNewCompleted(this, new GetMatchCodeNoNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCodeNoNewDateTime", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchCodeNoNewDateTime(System.Data.DataTable dtMatch, string sDateTime, out string sMsg) {
            object[] results = this.Invoke("GetMatchCodeNoNewDateTime", new object[] {
                        dtMatch,
                        sDateTime});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewDateTimeAsync(System.Data.DataTable dtMatch, string sDateTime) {
            this.GetMatchCodeNoNewDateTimeAsync(dtMatch, sDateTime, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewDateTimeAsync(System.Data.DataTable dtMatch, string sDateTime, object userState) {
            if ((this.GetMatchCodeNoNewDateTimeOperationCompleted == null)) {
                this.GetMatchCodeNoNewDateTimeOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeNoNewDateTimeOperationCompleted);
            }
            this.InvokeAsync("GetMatchCodeNoNewDateTime", new object[] {
                        dtMatch,
                        sDateTime}, this.GetMatchCodeNoNewDateTimeOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeNoNewDateTimeOperationCompleted(object arg) {
            if ((this.GetMatchCodeNoNewDateTimeCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeNoNewDateTimeCompleted(this, new GetMatchCodeNoNewDateTimeCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/ConvertToMatchLabelNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string ConvertToMatchLabelNo(string sBarrelCoatingTrayNo, System.DateTime dtMTFTime, out string sMsg) {
            object[] results = this.Invoke("ConvertToMatchLabelNo", new object[] {
                        sBarrelCoatingTrayNo,
                        dtMTFTime});
            sMsg = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void ConvertToMatchLabelNoAsync(string sBarrelCoatingTrayNo, System.DateTime dtMTFTime) {
            this.ConvertToMatchLabelNoAsync(sBarrelCoatingTrayNo, dtMTFTime, null);
        }
        
        /// <remarks/>
        public void ConvertToMatchLabelNoAsync(string sBarrelCoatingTrayNo, System.DateTime dtMTFTime, object userState) {
            if ((this.ConvertToMatchLabelNoOperationCompleted == null)) {
                this.ConvertToMatchLabelNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnConvertToMatchLabelNoOperationCompleted);
            }
            this.InvokeAsync("ConvertToMatchLabelNo", new object[] {
                        sBarrelCoatingTrayNo,
                        dtMTFTime}, this.ConvertToMatchLabelNoOperationCompleted, userState);
        }
        
        private void OnConvertToMatchLabelNoOperationCompleted(object arg) {
            if ((this.ConvertToMatchLabelNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ConvertToMatchLabelNoCompleted(this, new ConvertToMatchLabelNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckStatusBeforeMTF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckStatusBeforeMTF(string sCoatingTrayNo, out string sMatchNo, out string sMsg) {
            object[] results = this.Invoke("CheckStatusBeforeMTF", new object[] {
                        sCoatingTrayNo});
            sMatchNo = ((string)(results[1]));
            sMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStatusBeforeMTFAsync(string sCoatingTrayNo) {
            this.CheckStatusBeforeMTFAsync(sCoatingTrayNo, null);
        }
        
        /// <remarks/>
        public void CheckStatusBeforeMTFAsync(string sCoatingTrayNo, object userState) {
            if ((this.CheckStatusBeforeMTFOperationCompleted == null)) {
                this.CheckStatusBeforeMTFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStatusBeforeMTFOperationCompleted);
            }
            this.InvokeAsync("CheckStatusBeforeMTF", new object[] {
                        sCoatingTrayNo}, this.CheckStatusBeforeMTFOperationCompleted, userState);
        }
        
        private void OnCheckStatusBeforeMTFOperationCompleted(object arg) {
            if ((this.CheckStatusBeforeMTFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStatusBeforeMTFCompleted(this, new CheckStatusBeforeMTFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckStatusBeforeMTF_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckStatusBeforeMTF_New(string sCoatingTrayNo, out string sMatchNo, out bool bMapShippingTray, out bool bIsMP, out string sMatchCode, out string sMsg) {
            object[] results = this.Invoke("CheckStatusBeforeMTF_New", new object[] {
                        sCoatingTrayNo});
            sMatchNo = ((string)(results[1]));
            bMapShippingTray = ((bool)(results[2]));
            bIsMP = ((bool)(results[3]));
            sMatchCode = ((string)(results[4]));
            sMsg = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckStatusBeforeMTF_NewAsync(string sCoatingTrayNo) {
            this.CheckStatusBeforeMTF_NewAsync(sCoatingTrayNo, null);
        }
        
        /// <remarks/>
        public void CheckStatusBeforeMTF_NewAsync(string sCoatingTrayNo, object userState) {
            if ((this.CheckStatusBeforeMTF_NewOperationCompleted == null)) {
                this.CheckStatusBeforeMTF_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckStatusBeforeMTF_NewOperationCompleted);
            }
            this.InvokeAsync("CheckStatusBeforeMTF_New", new object[] {
                        sCoatingTrayNo}, this.CheckStatusBeforeMTF_NewOperationCompleted, userState);
        }
        
        private void OnCheckStatusBeforeMTF_NewOperationCompleted(object arg) {
            if ((this.CheckStatusBeforeMTF_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckStatusBeforeMTF_NewCompleted(this, new CheckStatusBeforeMTF_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBeforeMTF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBeforeMTF(string sMTFType, string sCoatingTrayNo, out string sMatchNo, out bool bMapShippingTray, out bool bIsMP, out string sMatchCode, out string sMsg) {
            object[] results = this.Invoke("CheckBeforeMTF", new object[] {
                        sMTFType,
                        sCoatingTrayNo});
            sMatchNo = ((string)(results[1]));
            bMapShippingTray = ((bool)(results[2]));
            bIsMP = ((bool)(results[3]));
            sMatchCode = ((string)(results[4]));
            sMsg = ((string)(results[5]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBeforeMTFAsync(string sMTFType, string sCoatingTrayNo) {
            this.CheckBeforeMTFAsync(sMTFType, sCoatingTrayNo, null);
        }
        
        /// <remarks/>
        public void CheckBeforeMTFAsync(string sMTFType, string sCoatingTrayNo, object userState) {
            if ((this.CheckBeforeMTFOperationCompleted == null)) {
                this.CheckBeforeMTFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBeforeMTFOperationCompleted);
            }
            this.InvokeAsync("CheckBeforeMTF", new object[] {
                        sMTFType,
                        sCoatingTrayNo}, this.CheckBeforeMTFOperationCompleted, userState);
        }
        
        private void OnCheckBeforeMTFOperationCompleted(object arg) {
            if ((this.CheckBeforeMTFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBeforeMTFCompleted(this, new CheckBeforeMTFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBeforeMTF_NEW", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckBeforeMTF_NEW(string sMTFType, string sCoatingTrayNo, out string sMatchNo, out bool bMapShippingTray, out bool bIsMP, out string sMatchCode, out string sMsg, out string sProduct) {
            object[] results = this.Invoke("CheckBeforeMTF_NEW", new object[] {
                        sMTFType,
                        sCoatingTrayNo});
            sMatchNo = ((string)(results[1]));
            bMapShippingTray = ((bool)(results[2]));
            bIsMP = ((bool)(results[3]));
            sMatchCode = ((string)(results[4]));
            sMsg = ((string)(results[5]));
            sProduct = ((string)(results[6]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBeforeMTF_NEWAsync(string sMTFType, string sCoatingTrayNo) {
            this.CheckBeforeMTF_NEWAsync(sMTFType, sCoatingTrayNo, null);
        }
        
        /// <remarks/>
        public void CheckBeforeMTF_NEWAsync(string sMTFType, string sCoatingTrayNo, object userState) {
            if ((this.CheckBeforeMTF_NEWOperationCompleted == null)) {
                this.CheckBeforeMTF_NEWOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBeforeMTF_NEWOperationCompleted);
            }
            this.InvokeAsync("CheckBeforeMTF_NEW", new object[] {
                        sMTFType,
                        sCoatingTrayNo}, this.CheckBeforeMTF_NEWOperationCompleted, userState);
        }
        
        private void OnCheckBeforeMTF_NEWOperationCompleted(object arg) {
            if ((this.CheckBeforeMTF_NEWCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBeforeMTF_NEWCompleted(this, new CheckBeforeMTF_NEWCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckDataAfterMTF", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool CheckDataAfterMTF(System.Data.DataTable dt, out System.Data.DataTable dt1, out string sMsg) {
            object[] results = this.Invoke("CheckDataAfterMTF", new object[] {
                        dt});
            dt1 = ((System.Data.DataTable)(results[1]));
            sMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void CheckDataAfterMTFAsync(System.Data.DataTable dt) {
            this.CheckDataAfterMTFAsync(dt, null);
        }
        
        /// <remarks/>
        public void CheckDataAfterMTFAsync(System.Data.DataTable dt, object userState) {
            if ((this.CheckDataAfterMTFOperationCompleted == null)) {
                this.CheckDataAfterMTFOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckDataAfterMTFOperationCompleted);
            }
            this.InvokeAsync("CheckDataAfterMTF", new object[] {
                        dt}, this.CheckDataAfterMTFOperationCompleted, userState);
        }
        
        private void OnCheckDataAfterMTFOperationCompleted(object arg) {
            if ((this.CheckDataAfterMTFCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckDataAfterMTFCompleted(this, new CheckDataAfterMTFCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchCodeNoNewDate", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchCodeNoNewDate(System.Data.DataTable dtMatch, string sDateTime, out string sMsg) {
            object[] results = this.Invoke("GetMatchCodeNoNewDate", new object[] {
                        dtMatch,
                        sDateTime});
            sMsg = ((string)(results[1]));
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewDateAsync(System.Data.DataTable dtMatch, string sDateTime) {
            this.GetMatchCodeNoNewDateAsync(dtMatch, sDateTime, null);
        }
        
        /// <remarks/>
        public void GetMatchCodeNoNewDateAsync(System.Data.DataTable dtMatch, string sDateTime, object userState) {
            if ((this.GetMatchCodeNoNewDateOperationCompleted == null)) {
                this.GetMatchCodeNoNewDateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchCodeNoNewDateOperationCompleted);
            }
            this.InvokeAsync("GetMatchCodeNoNewDate", new object[] {
                        dtMatch,
                        sDateTime}, this.GetMatchCodeNoNewDateOperationCompleted, userState);
        }
        
        private void OnGetMatchCodeNoNewDateOperationCompleted(object arg) {
            if ((this.GetMatchCodeNoNewDateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchCodeNoNewDateCompleted(this, new GetMatchCodeNoNewDateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPlasmaLotionInterval", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPlasmaLotionInterval(string sAlot, out string sErrory) {
            object[] results = this.Invoke("GetPlasmaLotionInterval", new object[] {
                        sAlot});
            sErrory = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlasmaLotionIntervalAsync(string sAlot) {
            this.GetPlasmaLotionIntervalAsync(sAlot, null);
        }
        
        /// <remarks/>
        public void GetPlasmaLotionIntervalAsync(string sAlot, object userState) {
            if ((this.GetPlasmaLotionIntervalOperationCompleted == null)) {
                this.GetPlasmaLotionIntervalOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlasmaLotionIntervalOperationCompleted);
            }
            this.InvokeAsync("GetPlasmaLotionInterval", new object[] {
                        sAlot}, this.GetPlasmaLotionIntervalOperationCompleted, userState);
        }
        
        private void OnGetPlasmaLotionIntervalOperationCompleted(object arg) {
            if ((this.GetPlasmaLotionIntervalCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlasmaLotionIntervalCompleted(this, new GetPlasmaLotionIntervalCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPlasmaLotionInterval_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPlasmaLotionInterval_New(string sAlot, string sProduct, string sEqpNo, out string sErrory) {
            object[] results = this.Invoke("GetPlasmaLotionInterval_New", new object[] {
                        sAlot,
                        sProduct,
                        sEqpNo});
            sErrory = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlasmaLotionInterval_NewAsync(string sAlot, string sProduct, string sEqpNo) {
            this.GetPlasmaLotionInterval_NewAsync(sAlot, sProduct, sEqpNo, null);
        }
        
        /// <remarks/>
        public void GetPlasmaLotionInterval_NewAsync(string sAlot, string sProduct, string sEqpNo, object userState) {
            if ((this.GetPlasmaLotionInterval_NewOperationCompleted == null)) {
                this.GetPlasmaLotionInterval_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlasmaLotionInterval_NewOperationCompleted);
            }
            this.InvokeAsync("GetPlasmaLotionInterval_New", new object[] {
                        sAlot,
                        sProduct,
                        sEqpNo}, this.GetPlasmaLotionInterval_NewOperationCompleted, userState);
        }
        
        private void OnGetPlasmaLotionInterval_NewOperationCompleted(object arg) {
            if ((this.GetPlasmaLotionInterval_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlasmaLotionInterval_NewCompleted(this, new GetPlasmaLotionInterval_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetPlasmaLotionIntervalNew", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetPlasmaLotionIntervalNew(string sEQP, string sAlot1, string sAlot2, out string sErrory) {
            object[] results = this.Invoke("GetPlasmaLotionIntervalNew", new object[] {
                        sEQP,
                        sAlot1,
                        sAlot2});
            sErrory = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetPlasmaLotionIntervalNewAsync(string sEQP, string sAlot1, string sAlot2) {
            this.GetPlasmaLotionIntervalNewAsync(sEQP, sAlot1, sAlot2, null);
        }
        
        /// <remarks/>
        public void GetPlasmaLotionIntervalNewAsync(string sEQP, string sAlot1, string sAlot2, object userState) {
            if ((this.GetPlasmaLotionIntervalNewOperationCompleted == null)) {
                this.GetPlasmaLotionIntervalNewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPlasmaLotionIntervalNewOperationCompleted);
            }
            this.InvokeAsync("GetPlasmaLotionIntervalNew", new object[] {
                        sEQP,
                        sAlot1,
                        sAlot2}, this.GetPlasmaLotionIntervalNewOperationCompleted, userState);
        }
        
        private void OnGetPlasmaLotionIntervalNewOperationCompleted(object arg) {
            if ((this.GetPlasmaLotionIntervalNewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPlasmaLotionIntervalNewCompleted(this, new GetPlasmaLotionIntervalNewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBeforeL_H", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckBeforeL_H(string sHolderTray, string sCoatingTray, out string sErrory) {
            object[] results = this.Invoke("CheckBeforeL_H", new object[] {
                        sHolderTray,
                        sCoatingTray});
            sErrory = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBeforeL_HAsync(string sHolderTray, string sCoatingTray) {
            this.CheckBeforeL_HAsync(sHolderTray, sCoatingTray, null);
        }
        
        /// <remarks/>
        public void CheckBeforeL_HAsync(string sHolderTray, string sCoatingTray, object userState) {
            if ((this.CheckBeforeL_HOperationCompleted == null)) {
                this.CheckBeforeL_HOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBeforeL_HOperationCompleted);
            }
            this.InvokeAsync("CheckBeforeL_H", new object[] {
                        sHolderTray,
                        sCoatingTray}, this.CheckBeforeL_HOperationCompleted, userState);
        }
        
        private void OnCheckBeforeL_HOperationCompleted(object arg) {
            if ((this.CheckBeforeL_HCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBeforeL_HCompleted(this, new CheckBeforeL_HCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/CheckBeforeL_H_New", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string CheckBeforeL_H_New(string sHolderTray, string sCoatingTray, string sProduct, string sEqpNo, out string sErrory) {
            object[] results = this.Invoke("CheckBeforeL_H_New", new object[] {
                        sHolderTray,
                        sCoatingTray,
                        sProduct,
                        sEqpNo});
            sErrory = ((string)(results[1]));
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void CheckBeforeL_H_NewAsync(string sHolderTray, string sCoatingTray, string sProduct, string sEqpNo) {
            this.CheckBeforeL_H_NewAsync(sHolderTray, sCoatingTray, sProduct, sEqpNo, null);
        }
        
        /// <remarks/>
        public void CheckBeforeL_H_NewAsync(string sHolderTray, string sCoatingTray, string sProduct, string sEqpNo, object userState) {
            if ((this.CheckBeforeL_H_NewOperationCompleted == null)) {
                this.CheckBeforeL_H_NewOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckBeforeL_H_NewOperationCompleted);
            }
            this.InvokeAsync("CheckBeforeL_H_New", new object[] {
                        sHolderTray,
                        sCoatingTray,
                        sProduct,
                        sEqpNo}, this.CheckBeforeL_H_NewOperationCompleted, userState);
        }
        
        private void OnCheckBeforeL_H_NewOperationCompleted(object arg) {
            if ((this.CheckBeforeL_H_NewCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckBeforeL_H_NewCompleted(this, new CheckBeforeL_H_NewCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetMatchAlot", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataTable GetMatchAlot(System.Data.DataTable dtMatch, string sDateTime) {
            object[] results = this.Invoke("GetMatchAlot", new object[] {
                        dtMatch,
                        sDateTime});
            return ((System.Data.DataTable)(results[0]));
        }
        
        /// <remarks/>
        public void GetMatchAlotAsync(System.Data.DataTable dtMatch, string sDateTime) {
            this.GetMatchAlotAsync(dtMatch, sDateTime, null);
        }
        
        /// <remarks/>
        public void GetMatchAlotAsync(System.Data.DataTable dtMatch, string sDateTime, object userState) {
            if ((this.GetMatchAlotOperationCompleted == null)) {
                this.GetMatchAlotOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetMatchAlotOperationCompleted);
            }
            this.InvokeAsync("GetMatchAlot", new object[] {
                        dtMatch,
                        sDateTime}, this.GetMatchAlotOperationCompleted, userState);
        }
        
        private void OnGetMatchAlotOperationCompleted(object arg) {
            if ((this.GetMatchAlotCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetMatchAlotCompleted(this, new GetMatchAlotCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/bLoadGlueEqpNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool bLoadGlueEqpNo(string sEqpNo, string sGlueBarcode, out int iCanUseMins, out string sMsg) {
            object[] results = this.Invoke("bLoadGlueEqpNo", new object[] {
                        sEqpNo,
                        sGlueBarcode});
            iCanUseMins = ((int)(results[1]));
            sMsg = ((string)(results[2]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void bLoadGlueEqpNoAsync(string sEqpNo, string sGlueBarcode) {
            this.bLoadGlueEqpNoAsync(sEqpNo, sGlueBarcode, null);
        }
        
        /// <remarks/>
        public void bLoadGlueEqpNoAsync(string sEqpNo, string sGlueBarcode, object userState) {
            if ((this.bLoadGlueEqpNoOperationCompleted == null)) {
                this.bLoadGlueEqpNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbLoadGlueEqpNoOperationCompleted);
            }
            this.InvokeAsync("bLoadGlueEqpNo", new object[] {
                        sEqpNo,
                        sGlueBarcode}, this.bLoadGlueEqpNoOperationCompleted, userState);
        }
        
        private void OnbLoadGlueEqpNoOperationCompleted(object arg) {
            if ((this.bLoadGlueEqpNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bLoadGlueEqpNoCompleted(this, new bLoadGlueEqpNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/bDownGlueEqpNo", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool bDownGlueEqpNo(string sEqpNo, string sGlueBarcode, out string sMsg) {
            object[] results = this.Invoke("bDownGlueEqpNo", new object[] {
                        sEqpNo,
                        sGlueBarcode});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void bDownGlueEqpNoAsync(string sEqpNo, string sGlueBarcode) {
            this.bDownGlueEqpNoAsync(sEqpNo, sGlueBarcode, null);
        }
        
        /// <remarks/>
        public void bDownGlueEqpNoAsync(string sEqpNo, string sGlueBarcode, object userState) {
            if ((this.bDownGlueEqpNoOperationCompleted == null)) {
                this.bDownGlueEqpNoOperationCompleted = new System.Threading.SendOrPostCallback(this.OnbDownGlueEqpNoOperationCompleted);
            }
            this.InvokeAsync("bDownGlueEqpNo", new object[] {
                        sEqpNo,
                        sGlueBarcode}, this.bDownGlueEqpNoOperationCompleted, userState);
        }
        
        private void OnbDownGlueEqpNoOperationCompleted(object arg) {
            if ((this.bDownGlueEqpNoCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.bDownGlueEqpNoCompleted(this, new bDownGlueEqpNoCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/GetLensBarcoderMatch", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetLensBarcoderMatch(string sLensBarcoder) {
            object[] results = this.Invoke("GetLensBarcoderMatch", new object[] {
                        sLensBarcoder});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetLensBarcoderMatchAsync(string sLensBarcoder) {
            this.GetLensBarcoderMatchAsync(sLensBarcoder, null);
        }
        
        /// <remarks/>
        public void GetLensBarcoderMatchAsync(string sLensBarcoder, object userState) {
            if ((this.GetLensBarcoderMatchOperationCompleted == null)) {
                this.GetLensBarcoderMatchOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetLensBarcoderMatchOperationCompleted);
            }
            this.InvokeAsync("GetLensBarcoderMatch", new object[] {
                        sLensBarcoder}, this.GetLensBarcoderMatchOperationCompleted, userState);
        }
        
        private void OnGetLensBarcoderMatchOperationCompleted(object arg) {
            if ((this.GetLensBarcoderMatchCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetLensBarcoderMatchCompleted(this, new GetLensBarcoderMatchCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/FluidDispensingAutoOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool FluidDispensingAutoOut(string sType, string sEqp, string sLot, out string sMsg) {
            object[] results = this.Invoke("FluidDispensingAutoOut", new object[] {
                        sType,
                        sEqp,
                        sLot});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void FluidDispensingAutoOutAsync(string sType, string sEqp, string sLot) {
            this.FluidDispensingAutoOutAsync(sType, sEqp, sLot, null);
        }
        
        /// <remarks/>
        public void FluidDispensingAutoOutAsync(string sType, string sEqp, string sLot, object userState) {
            if ((this.FluidDispensingAutoOutOperationCompleted == null)) {
                this.FluidDispensingAutoOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnFluidDispensingAutoOutOperationCompleted);
            }
            this.InvokeAsync("FluidDispensingAutoOut", new object[] {
                        sType,
                        sEqp,
                        sLot}, this.FluidDispensingAutoOutOperationCompleted, userState);
        }
        
        private void OnFluidDispensingAutoOutOperationCompleted(object arg) {
            if ((this.FluidDispensingAutoOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.FluidDispensingAutoOutCompleted(this, new FluidDispensingAutoOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://tempuri.org/AssemblyBPFOut", RequestNamespace="http://tempuri.org/", ResponseNamespace="http://tempuri.org/", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public bool AssemblyBPFOut(string sInputLot, string sOutputLot, string sEqpNo, out string sMsg) {
            object[] results = this.Invoke("AssemblyBPFOut", new object[] {
                        sInputLot,
                        sOutputLot,
                        sEqpNo});
            sMsg = ((string)(results[1]));
            return ((bool)(results[0]));
        }
        
        /// <remarks/>
        public void AssemblyBPFOutAsync(string sInputLot, string sOutputLot, string sEqpNo) {
            this.AssemblyBPFOutAsync(sInputLot, sOutputLot, sEqpNo, null);
        }
        
        /// <remarks/>
        public void AssemblyBPFOutAsync(string sInputLot, string sOutputLot, string sEqpNo, object userState) {
            if ((this.AssemblyBPFOutOperationCompleted == null)) {
                this.AssemblyBPFOutOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAssemblyBPFOutOperationCompleted);
            }
            this.InvokeAsync("AssemblyBPFOut", new object[] {
                        sInputLot,
                        sOutputLot,
                        sEqpNo}, this.AssemblyBPFOutOperationCompleted, userState);
        }
        
        private void OnAssemblyBPFOutOperationCompleted(object arg) {
            if ((this.AssemblyBPFOutCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AssemblyBPFOutCompleted(this, new AssemblyBPFOutCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
        
        private bool IsLocalFileSystemWebService(string url) {
            if (((url == null) 
                        || (url == string.Empty))) {
                return false;
            }
            System.Uri wsUri = new System.Uri(url);
            if (((wsUri.Port >= 1024) 
                        && (string.Compare(wsUri.Host, "localHost", System.StringComparison.OrdinalIgnoreCase) == 0))) {
                return true;
            }
            return false;
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeCompletedEventHandler(object sender, GetMatchCodeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeNoCompletedEventHandler(object sender, GetMatchCodeNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeNoStringCompletedEventHandler(object sender, GetMatchCodeNoStringCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeNoStringCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeNoStringCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeNoNewCompletedEventHandler(object sender, GetMatchCodeNoNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeNoNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeNoNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeNoNewDateTimeCompletedEventHandler(object sender, GetMatchCodeNoNewDateTimeCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeNoNewDateTimeCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeNoNewDateTimeCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void ConvertToMatchLabelNoCompletedEventHandler(object sender, ConvertToMatchLabelNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ConvertToMatchLabelNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ConvertToMatchLabelNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckStatusBeforeMTFCompletedEventHandler(object sender, CheckStatusBeforeMTFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStatusBeforeMTFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStatusBeforeMTFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMatchNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckStatusBeforeMTF_NewCompletedEventHandler(object sender, CheckStatusBeforeMTF_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckStatusBeforeMTF_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckStatusBeforeMTF_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMatchNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool bMapShippingTray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool bIsMP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sMatchCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckBeforeMTFCompletedEventHandler(object sender, CheckBeforeMTFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBeforeMTFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBeforeMTFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMatchNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool bMapShippingTray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool bIsMP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sMatchCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckBeforeMTF_NEWCompletedEventHandler(object sender, CheckBeforeMTF_NEWCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBeforeMTF_NEWCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBeforeMTF_NEWCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMatchNo {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public bool bMapShippingTray {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[2]));
            }
        }
        
        /// <remarks/>
        public bool bIsMP {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[3]));
            }
        }
        
        /// <remarks/>
        public string sMatchCode {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[4]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[5]));
            }
        }
        
        /// <remarks/>
        public string sProduct {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[6]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckDataAfterMTFCompletedEventHandler(object sender, CheckDataAfterMTFCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckDataAfterMTFCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckDataAfterMTFCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public System.Data.DataTable dt1 {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchCodeNoNewDateCompletedEventHandler(object sender, GetMatchCodeNoNewDateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchCodeNoNewDateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchCodeNoNewDateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPlasmaLotionIntervalCompletedEventHandler(object sender, GetPlasmaLotionIntervalCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlasmaLotionIntervalCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlasmaLotionIntervalCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrory {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPlasmaLotionInterval_NewCompletedEventHandler(object sender, GetPlasmaLotionInterval_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlasmaLotionInterval_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlasmaLotionInterval_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrory {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetPlasmaLotionIntervalNewCompletedEventHandler(object sender, GetPlasmaLotionIntervalNewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPlasmaLotionIntervalNewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetPlasmaLotionIntervalNewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrory {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckBeforeL_HCompletedEventHandler(object sender, CheckBeforeL_HCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBeforeL_HCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBeforeL_HCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrory {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void CheckBeforeL_H_NewCompletedEventHandler(object sender, CheckBeforeL_H_NewCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckBeforeL_H_NewCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CheckBeforeL_H_NewCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sErrory {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetMatchAlotCompletedEventHandler(object sender, GetMatchAlotCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetMatchAlotCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetMatchAlotCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataTable Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataTable)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void bLoadGlueEqpNoCompletedEventHandler(object sender, bLoadGlueEqpNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bLoadGlueEqpNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bLoadGlueEqpNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public int iCanUseMins {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[1]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[2]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void bDownGlueEqpNoCompletedEventHandler(object sender, bDownGlueEqpNoCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class bDownGlueEqpNoCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal bDownGlueEqpNoCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void GetLensBarcoderMatchCompletedEventHandler(object sender, GetLensBarcoderMatchCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetLensBarcoderMatchCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetLensBarcoderMatchCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void FluidDispensingAutoOutCompletedEventHandler(object sender, FluidDispensingAutoOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class FluidDispensingAutoOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal FluidDispensingAutoOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    public delegate void AssemblyBPFOutCompletedEventHandler(object sender, AssemblyBPFOutCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("System.Web.Services", "4.8.3752.0")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AssemblyBPFOutCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AssemblyBPFOutCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public bool Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((bool)(this.results[0]));
            }
        }
        
        /// <remarks/>
        public string sMsg {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[1]));
            }
        }
    }
}

#pragma warning restore 1591