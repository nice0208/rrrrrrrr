using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

using System.IO;
using HalconDotNet;
using System.Windows.Forms;
using System.Drawing;
using System.Threading;
using UC_FirCircle;

namespace LMTVision
{

    public partial class HDevelopExport
    {
        HObject[] ho_Image = new HObject[9];
        HTuple[] hv_Width = new HTuple[9], hv_Height = new HTuple[9];
        string ImagePath = ""; bool DegreeErrSta = false;
        bool CutIsChecked = false; bool GQCutIsChecked = false; bool GHCutIsChecked = false;
        bool saveOPic = false, saveRPic = false;
        bool isa11deg = false, isa21deg = false;
        string FShape = ""; public int GlueOrder = 0;
        double AssDisXmaxSet = 10, AssDisYmaxSet = 10, AssDismaxSet = 10;
        UC_FitCircleTool ucFitCircleTool_NeedleTipTest = new UC_FitCircleTool();
        UC_FitCircle ucFitCircle_NeedleTipTest = new UC_FitCircle();
        #region Halcon算子
        #region 格式设置
        public void set_display_font(HTuple hv_WindowHandle, HTuple hv_Size, HTuple hv_Font,
           HTuple hv_Bold, HTuple hv_Slant)
        {



            // Local iconic variables 

            // Local control variables 

            HTuple hv_OS = null, hv_Fonts = new HTuple();
            HTuple hv_Style = null, hv_Exception = new HTuple(), hv_AvailableFonts = null;
            HTuple hv_Fdx = null, hv_Indices = new HTuple();
            HTuple hv_Font_COPY_INP_TMP = hv_Font.Clone();
            HTuple hv_Size_COPY_INP_TMP = hv_Size.Clone();

            // Initialize local and output iconic variables 
            //This procedure sets the text font of the current window with
            //the specified attributes.
            //
            //Input parameters:
            //WindowHandle: The graphics window for which the font will be set
            //Size: The font size. If Size=-1, the default of 16 is used.
            //Bold: If set to 'true', a bold font is used
            //Slant: If set to 'true', a slanted font is used
            //
            HOperatorSet.GetSystem("operating_system", out hv_OS);
            // dev_get_preferences(...); only in hdevelop
            // dev_set_preferences(...); only in hdevelop
            if ((int)((new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(new HTuple()))).TupleOr(
                new HTuple(hv_Size_COPY_INP_TMP.TupleEqual(-1)))) != 0)
            {
                hv_Size_COPY_INP_TMP = 16;
            }
            if ((int)(new HTuple(((hv_OS.TupleSubstr(0, 2))).TupleEqual("Win"))) != 0)
            {
                //Restore previous behaviour
                hv_Size_COPY_INP_TMP = ((1.13677 * hv_Size_COPY_INP_TMP)).TupleInt();
            }
            else
            {
                hv_Size_COPY_INP_TMP = hv_Size_COPY_INP_TMP.TupleInt();
            }
            if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("Courier"))) != 0)
            {
                hv_Fonts = new HTuple();
                hv_Fonts[0] = "Courier";
                hv_Fonts[1] = "Courier 10 Pitch";
                hv_Fonts[2] = "Courier New";
                hv_Fonts[3] = "CourierNew";
                hv_Fonts[4] = "Liberation Mono";
            }
            else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("mono"))) != 0)
            {
                hv_Fonts = new HTuple();
                hv_Fonts[0] = "Consolas";
                hv_Fonts[1] = "Menlo";
                hv_Fonts[2] = "Courier";
                hv_Fonts[3] = "Courier 10 Pitch";
                hv_Fonts[4] = "FreeMono";
                hv_Fonts[5] = "Liberation Mono";
            }
            else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("sans"))) != 0)
            {
                hv_Fonts = new HTuple();
                hv_Fonts[0] = "Luxi Sans";
                hv_Fonts[1] = "DejaVu Sans";
                hv_Fonts[2] = "FreeSans";
                hv_Fonts[3] = "Arial";
                hv_Fonts[4] = "Liberation Sans";
            }
            else if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual("serif"))) != 0)
            {
                hv_Fonts = new HTuple();
                hv_Fonts[0] = "Times New Roman";
                hv_Fonts[1] = "Luxi Serif";
                hv_Fonts[2] = "DejaVu Serif";
                hv_Fonts[3] = "FreeSerif";
                hv_Fonts[4] = "Utopia";
                hv_Fonts[5] = "Liberation Serif";
            }
            else
            {
                hv_Fonts = hv_Font_COPY_INP_TMP.Clone();
            }
            hv_Style = "";
            if ((int)(new HTuple(hv_Bold.TupleEqual("true"))) != 0)
            {
                hv_Style = hv_Style + "Bold";
            }
            else if ((int)(new HTuple(hv_Bold.TupleNotEqual("false"))) != 0)
            {
                hv_Exception = "Wrong value of control parameter Bold";
                throw new HalconException(hv_Exception);
            }
            if ((int)(new HTuple(hv_Slant.TupleEqual("true"))) != 0)
            {
                hv_Style = hv_Style + "Italic";
            }
            else if ((int)(new HTuple(hv_Slant.TupleNotEqual("false"))) != 0)
            {
                hv_Exception = "Wrong value of control parameter Slant";
                throw new HalconException(hv_Exception);
            }
            if ((int)(new HTuple(hv_Style.TupleEqual(""))) != 0)
            {
                hv_Style = "Normal";
            }
            HOperatorSet.QueryFont(hv_WindowHandle, out hv_AvailableFonts);
            hv_Font_COPY_INP_TMP = "";
            for (hv_Fdx = 0; (int)hv_Fdx <= (int)((new HTuple(hv_Fonts.TupleLength())) - 1); hv_Fdx = (int)hv_Fdx + 1)
            {
                hv_Indices = hv_AvailableFonts.TupleFind(hv_Fonts.TupleSelect(hv_Fdx));
                if ((int)(new HTuple((new HTuple(hv_Indices.TupleLength())).TupleGreater(0))) != 0)
                {
                    if ((int)(new HTuple(((hv_Indices.TupleSelect(0))).TupleGreaterEqual(0))) != 0)
                    {
                        hv_Font_COPY_INP_TMP = hv_Fonts.TupleSelect(hv_Fdx);
                        break;
                    }
                }
            }
            if ((int)(new HTuple(hv_Font_COPY_INP_TMP.TupleEqual(""))) != 0)
            {
                throw new HalconException("Wrong value of control parameter Font");
            }
            hv_Font_COPY_INP_TMP = (((hv_Font_COPY_INP_TMP + "-") + hv_Style) + "-") + hv_Size_COPY_INP_TMP;
            HOperatorSet.SetFont(hv_WindowHandle, hv_Font_COPY_INP_TMP);
            // dev_set_preferences(...); only in hdevelop

            return;
        }
        public void disp_message(HTuple hv_WindowHandle, HTuple hv_String, HTuple hv_CoordSystem,
           HTuple hv_Row, HTuple hv_Column, HTuple hv_Color, HTuple hv_Box)
        {
            // Local control variables 
            HTuple hv_Red, hv_Green, hv_Blue, hv_Row1Part;
            HTuple hv_Column1Part, hv_Row2Part, hv_Column2Part, hv_RowWin;
            HTuple hv_ColumnWin, hv_WidthWin, hv_HeightWin, hv_MaxAscent;
            HTuple hv_MaxDescent, hv_MaxWidth, hv_MaxHeight, hv_R1 = new HTuple();
            HTuple hv_C1 = new HTuple(), hv_FactorRow = new HTuple(), hv_FactorColumn = new HTuple();
            HTuple hv_Width = new HTuple(), hv_Index = new HTuple(), hv_Ascent = new HTuple();
            HTuple hv_Descent = new HTuple(), hv_W = new HTuple(), hv_H = new HTuple();
            HTuple hv_FrameHeight = new HTuple(), hv_FrameWidth = new HTuple();
            HTuple hv_R2 = new HTuple(), hv_C2 = new HTuple(), hv_DrawMode = new HTuple();
            HTuple hv_Exception = new HTuple(), hv_CurrentColor = new HTuple();

            HTuple hv_Color_COPY_INP_TMP = hv_Color.Clone();
            HTuple hv_Column_COPY_INP_TMP = hv_Column.Clone();
            HTuple hv_Row_COPY_INP_TMP = hv_Row.Clone();
            HTuple hv_String_COPY_INP_TMP = hv_String.Clone();

            // Initialize local and output iconic variables 

            //This procedure displays text in a graphics window.        
            //prepare window
            HOperatorSet.GetRgb(hv_WindowHandle, out hv_Red, out hv_Green, out hv_Blue);
            HOperatorSet.GetPart(hv_WindowHandle, out hv_Row1Part, out hv_Column1Part, out hv_Row2Part,
                out hv_Column2Part);
            HOperatorSet.GetWindowExtents(hv_WindowHandle, out hv_RowWin, out hv_ColumnWin,
                out hv_WidthWin, out hv_HeightWin);
            HOperatorSet.SetPart(hv_WindowHandle, 0, 0, hv_HeightWin - 1, hv_WidthWin - 1);
            //
            //default settings
            if ((int)(new HTuple(hv_Row_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Row_COPY_INP_TMP = 12;
            }
            if ((int)(new HTuple(hv_Column_COPY_INP_TMP.TupleEqual(-1))) != 0)
            {
                hv_Column_COPY_INP_TMP = 12;
            }
            if ((int)(new HTuple(hv_Color_COPY_INP_TMP.TupleEqual(new HTuple()))) != 0)
            {
                hv_Color_COPY_INP_TMP = "";
            }
            //
            hv_String_COPY_INP_TMP = ((("" + hv_String_COPY_INP_TMP) + "")).TupleSplit("\n");
            //
            //Estimate extentions of text depending on font size.
            HOperatorSet.GetFontExtents(hv_WindowHandle, out hv_MaxAscent, out hv_MaxDescent,
                out hv_MaxWidth, out hv_MaxHeight);
            if ((int)(new HTuple(hv_CoordSystem.TupleEqual("window"))) != 0)
            {
                hv_R1 = hv_Row_COPY_INP_TMP.Clone();
                hv_C1 = hv_Column_COPY_INP_TMP.Clone();
            }
            else
            {
                //transform image to window coordinates
                hv_FactorRow = (1.0 * hv_HeightWin) / ((hv_Row2Part - hv_Row1Part) + 1);
                hv_FactorColumn = (1.0 * hv_WidthWin) / ((hv_Column2Part - hv_Column1Part) + 1);
                hv_R1 = ((hv_Row_COPY_INP_TMP - hv_Row1Part) + 0.5) * hv_FactorRow;
                hv_C1 = ((hv_Column_COPY_INP_TMP - hv_Column1Part) + 0.5) * hv_FactorColumn;
            }
            //
            //display text box depending on text size
            if ((int)(new HTuple(hv_Box.TupleEqual("true"))) != 0)
            {
                //calculate box extents
                hv_String_COPY_INP_TMP = (" " + hv_String_COPY_INP_TMP) + " ";
                hv_Width = new HTuple();
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                    )) - 1); hv_Index = (int)hv_Index + 1)
                {
                    HOperatorSet.GetStringExtents(hv_WindowHandle, hv_String_COPY_INP_TMP.TupleSelect(
                        hv_Index), out hv_Ascent, out hv_Descent, out hv_W, out hv_H);
                    hv_Width = hv_Width.TupleConcat(hv_W);
                }
                hv_FrameHeight = hv_MaxHeight * (new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                    ));
                hv_FrameWidth = (((new HTuple(0)).TupleConcat(hv_Width))).TupleMax();
                hv_R2 = hv_R1 + hv_FrameHeight;
                hv_C2 = hv_C1 + hv_FrameWidth;
                //display rectangles
                HOperatorSet.GetDraw(hv_WindowHandle, out hv_DrawMode);
                HOperatorSet.SetDraw(hv_WindowHandle, "fill");
                HOperatorSet.SetColor(hv_WindowHandle, "light gray");
                HOperatorSet.DispRectangle1(hv_WindowHandle, hv_R1 + 3, hv_C1 + 3, hv_R2 + 3, hv_C2 + 3);
                HOperatorSet.SetColor(hv_WindowHandle, "white");
                HOperatorSet.DispRectangle1(hv_WindowHandle, hv_R1, hv_C1, hv_R2, hv_C2);
                HOperatorSet.SetDraw(hv_WindowHandle, hv_DrawMode);
            }
            else if ((int)(new HTuple(hv_Box.TupleNotEqual("false"))) != 0)
            {
                hv_Exception = "Wrong value of control parameter Box";
                throw new HalconException(hv_Exception);
            }
            //Write text.
            for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_String_COPY_INP_TMP.TupleLength()
                )) - 1); hv_Index = (int)hv_Index + 1)
            {
                hv_CurrentColor = hv_Color_COPY_INP_TMP.TupleSelect(hv_Index % (new HTuple(hv_Color_COPY_INP_TMP.TupleLength()
                    )));
                if ((int)((new HTuple(hv_CurrentColor.TupleNotEqual(""))).TupleAnd(new HTuple(hv_CurrentColor.TupleNotEqual(
                    "auto")))) != 0)
                {
                    HOperatorSet.SetColor(hv_WindowHandle, hv_CurrentColor);
                }
                else
                {
                    HOperatorSet.SetRgb(hv_WindowHandle, hv_Red, hv_Green, hv_Blue);
                }
                hv_Row_COPY_INP_TMP = hv_R1 + (hv_MaxHeight * hv_Index);
                HOperatorSet.SetTposition(hv_WindowHandle, hv_Row_COPY_INP_TMP, hv_C1);
                HOperatorSet.WriteString(hv_WindowHandle, hv_String_COPY_INP_TMP.TupleSelect(
                    hv_Index));
            }
            //reset changed window settings
            HOperatorSet.SetRgb(hv_WindowHandle, hv_Red, hv_Green, hv_Blue);
            HOperatorSet.SetPart(hv_WindowHandle, hv_Row1Part, hv_Column1Part, hv_Row2Part,
                hv_Column2Part);

            return;
        }
        public void gen_arrow_contour_xld(out HObject ho_Arrow, HTuple hv_Row1, HTuple hv_Column1,
           HTuple hv_Row2, HTuple hv_Column2, HTuple hv_HeadLength, HTuple hv_HeadWidth)
        {
            HObject[] OTemp = new HObject[20];
            long SP_O = 0;
            HObject ho_TempArrow = null;
            HTuple hv_Length, hv_ZeroLengthIndices, hv_DR;
            HTuple hv_DC, hv_HalfHeadWidth, hv_RowP1, hv_ColP1, hv_RowP2;
            HTuple hv_ColP2, hv_Index;

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Arrow);
            HOperatorSet.GenEmptyObj(out ho_TempArrow);

            try
            {

                //Init
                ho_Arrow.Dispose();
                HOperatorSet.GenEmptyObj(out ho_Arrow);
                //
                //Calculate the arrow length
                HOperatorSet.DistancePp(hv_Row1, hv_Column1, hv_Row2, hv_Column2, out hv_Length);
                //
                //Mark arrows with identical start and end point
                //(set Length to -1 to avoid division-by-zero exception)
                hv_ZeroLengthIndices = hv_Length.TupleFind(0);
                if ((int)(new HTuple(hv_ZeroLengthIndices.TupleNotEqual(-1))) != 0)
                {
                    hv_Length[hv_ZeroLengthIndices] = -1;
                }
                //
                //Calculate auxiliary variables.
                hv_DR = (1.0 * (hv_Row2 - hv_Row1)) / hv_Length;
                hv_DC = (1.0 * (hv_Column2 - hv_Column1)) / hv_Length;
                hv_HalfHeadWidth = hv_HeadWidth / 2.0;
                //
                //Calculate end points of the arrow head.
                hv_RowP1 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) + (hv_HalfHeadWidth * hv_DC);
                hv_ColP1 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) - (hv_HalfHeadWidth * hv_DR);
                hv_RowP2 = (hv_Row1 + ((hv_Length - hv_HeadLength) * hv_DR)) - (hv_HalfHeadWidth * hv_DC);
                hv_ColP2 = (hv_Column1 + ((hv_Length - hv_HeadLength) * hv_DC)) + (hv_HalfHeadWidth * hv_DR);
                //
                //Finally create output XLD contour for each input point pair
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_Length.TupleLength())) - 1); hv_Index = (int)hv_Index + 1)
                {
                    if ((int)(new HTuple(((hv_Length.TupleSelect(hv_Index))).TupleEqual(-1))) != 0)
                    {
                        //Create_ single points for arrows with identical start and end point
                        ho_TempArrow.Dispose();
                        HOperatorSet.GenContourPolygonXld(out ho_TempArrow, hv_Row1.TupleSelect(
                            hv_Index), hv_Column1.TupleSelect(hv_Index));
                    }
                    else
                    {
                        //Create arrow contour
                        ho_TempArrow.Dispose();
                        HOperatorSet.GenContourPolygonXld(out ho_TempArrow, ((((((((((hv_Row1.TupleSelect(
                            hv_Index))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                            hv_RowP1.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)))).TupleConcat(
                            hv_RowP2.TupleSelect(hv_Index)))).TupleConcat(hv_Row2.TupleSelect(hv_Index)),
                            ((((((((((hv_Column1.TupleSelect(hv_Index))).TupleConcat(hv_Column2.TupleSelect(
                            hv_Index)))).TupleConcat(hv_ColP1.TupleSelect(hv_Index)))).TupleConcat(
                            hv_Column2.TupleSelect(hv_Index)))).TupleConcat(hv_ColP2.TupleSelect(
                            hv_Index)))).TupleConcat(hv_Column2.TupleSelect(hv_Index)));
                    }
                    OTemp[SP_O] = ho_Arrow.CopyObj(1, -1);
                    SP_O++;
                    ho_Arrow.Dispose();
                    HOperatorSet.ConcatObj(OTemp[SP_O - 1], ho_TempArrow, out ho_Arrow);
                    OTemp[SP_O - 1].Dispose();
                    SP_O = 0;
                }
                ho_TempArrow.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_TempArrow.Dispose();

                MessageBox.Show(HDevExpDefaultException.ToString());
                throw HDevExpDefaultException;
            }
        }
        public void dev_display_shape_matching_results(HTuple hv_ModelID, HTuple hv_Color,
           HTuple hv_Row, HTuple hv_Column, HTuple hv_Angle, HTuple hv_ScaleR, HTuple hv_ScaleC,
           HTuple hv_Model)
        {
            // Local iconic variables 
            HObject ho_ModelContours = null, ho_ContoursAffinTrans = null;

            // Local control variables 
            HTuple hv_NumMatches, hv_Index = new HTuple();
            HTuple hv_Match = new HTuple(), hv_HomMat2DIdentity = new HTuple();
            HTuple hv_HomMat2DScale = new HTuple(), hv_HomMat2DRotate = new HTuple();
            HTuple hv_HomMat2DTranslate = new HTuple();

            HTuple hv_Model_COPY_INP_TMP = hv_Model.Clone();
            HTuple hv_ScaleC_COPY_INP_TMP = hv_ScaleC.Clone();
            HTuple hv_ScaleR_COPY_INP_TMP = hv_ScaleR.Clone();

            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ModelContours);
            HOperatorSet.GenEmptyObj(out ho_ContoursAffinTrans);

            //This procedure displays the results of Shape-Based Matching.
            //
            hv_NumMatches = new HTuple(hv_Row.TupleLength());
            if ((int)(new HTuple(hv_NumMatches.TupleGreater(0))) != 0)
            {
                if ((int)(new HTuple((new HTuple(hv_ScaleR_COPY_INP_TMP.TupleLength())).TupleEqual(
                    1))) != 0)
                {
                    HOperatorSet.TupleGenConst(hv_NumMatches, hv_ScaleR_COPY_INP_TMP, out hv_ScaleR_COPY_INP_TMP);
                }
                if ((int)(new HTuple((new HTuple(hv_ScaleC_COPY_INP_TMP.TupleLength())).TupleEqual(
                    1))) != 0)
                {
                    HOperatorSet.TupleGenConst(hv_NumMatches, hv_ScaleC_COPY_INP_TMP, out hv_ScaleC_COPY_INP_TMP);
                }
                if ((int)(new HTuple((new HTuple(hv_Model_COPY_INP_TMP.TupleLength())).TupleEqual(
                    0))) != 0)
                {
                    HOperatorSet.TupleGenConst(hv_NumMatches, 0, out hv_Model_COPY_INP_TMP);
                }
                else if ((int)(new HTuple((new HTuple(hv_Model_COPY_INP_TMP.TupleLength()
                    )).TupleEqual(1))) != 0)
                {
                    HOperatorSet.TupleGenConst(hv_NumMatches, hv_Model_COPY_INP_TMP, out hv_Model_COPY_INP_TMP);
                }
                for (hv_Index = 0; (int)hv_Index <= (int)((new HTuple(hv_ModelID.TupleLength())) - 1); hv_Index = (int)hv_Index + 1)
                {
                    ho_ModelContours.Dispose();
                    HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID.TupleSelect(hv_Index), 1);
                    if (HDevWindowStack.IsOpen())
                    {
                        HOperatorSet.SetColor(HDevWindowStack.GetActive(), hv_Color.TupleSelect(
                            hv_Index % (new HTuple(hv_Color.TupleLength()))));
                    }
                    for (hv_Match = 0; hv_Match.Continue(hv_NumMatches - 1, 1); hv_Match = hv_Match.TupleAdd(1))
                    {
                        if ((int)(new HTuple(hv_Index.TupleEqual(hv_Model_COPY_INP_TMP.TupleSelect(
                            hv_Match)))) != 0)
                        {
                            HOperatorSet.HomMat2dIdentity(out hv_HomMat2DIdentity);
                            HOperatorSet.HomMat2dScale(hv_HomMat2DIdentity, hv_ScaleR_COPY_INP_TMP.TupleSelect(
                                hv_Match), hv_ScaleC_COPY_INP_TMP.TupleSelect(hv_Match), 0, 0, out hv_HomMat2DScale);
                            HOperatorSet.HomMat2dRotate(hv_HomMat2DScale, hv_Angle.TupleSelect(hv_Match),
                                0, 0, out hv_HomMat2DRotate);
                            HOperatorSet.HomMat2dTranslate(hv_HomMat2DRotate, hv_Row.TupleSelect(
                                hv_Match), hv_Column.TupleSelect(hv_Match), out hv_HomMat2DTranslate);
                            ho_ContoursAffinTrans.Dispose();
                            HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_ContoursAffinTrans,
                                hv_HomMat2DTranslate);
                            if (HDevWindowStack.IsOpen())
                            {
                                HOperatorSet.DispObj(ho_ContoursAffinTrans, HDevWindowStack.GetActive()
                                    );
                            }
                        }
                    }
                }
            }
            ho_ModelContours.Dispose();
            ho_ContoursAffinTrans.Dispose();

            return;
        }
        #endregion

        #region 自製Halcon算子
        // 抓取圓心
        public void gen_circle_center(HObject ho_Image, out HObject ho_UsedEdges, out HObject ho_Contour, out HObject ho_ResultContours, out HObject ho_CrossCenter, HTuple hv_InitialRow,
             HTuple hv_InitialColumn, HTuple hv_InitialRadius, HTuple hv_Length, HTuple hv_Measure_Threshold, HTuple hv_MeasureTransition, HTuple hv_MeasureSelect, out HTuple hv_ResultRow, out HTuple hv_ResultColumn, out HTuple hv_ResultRadius)
        {
            // Local iconic variables 

            HObject ho_ModelContour, ho_Contours;

            // Local control variables 

            HTuple hv_MetrologyHandle = null, hv_circleIndices = null;
            HTuple hv_circleParameter = null, hv_Row = null, hv_Column = null;
            HTuple hv_UsedRow = null, hv_UsedColumn = null, hv_StartPhi = null;
            HTuple hv_EndPhi = null, hv_PointOrder = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_UsedEdges);
            HOperatorSet.GenEmptyObj(out ho_Contour);
            HOperatorSet.GenEmptyObj(out ho_ResultContours);
            HOperatorSet.GenEmptyObj(out ho_CrossCenter);
            HOperatorSet.GenEmptyObj(out ho_ModelContour);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            try
            {
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_InitialRow.TupleConcat(
                    hv_InitialColumn))).TupleConcat(hv_InitialRadius), hv_Length, 5, 1, hv_Measure_Threshold,
                    new HTuple(), new HTuple(), out hv_circleIndices);
                ho_ModelContour.Dispose();
                HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle,
                    "all", 1.5);
                //第一個點或最後一個點
                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices,
                    "measure_select", hv_MeasureSelect);
                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices,
                    "min_score", 0.2);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices,
                    "all", "result_type", "all_param", out hv_circleParameter);

                //白找黑('negative')或黑找白('positive')
                ho_Contour.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle,
                    "all", hv_MeasureTransition, out hv_Row, out hv_Column);
                ho_Contours.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle,
                    "all", "all", 1.5);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges",
                    "row", out hv_UsedRow);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges",
                    "column", out hv_UsedColumn);
                ho_UsedEdges.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_UsedEdges, hv_UsedRow, hv_UsedColumn,
                    10, (new HTuple(45)).TupleRad());
                ho_ResultContours.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours, hv_MetrologyHandle,
                    "all", "all", 1.5);
                HOperatorSet.FitCircleContourXld(ho_ResultContours, "algebraic", -1, 0, 0,
                    3, 2, out hv_ResultRow, out hv_ResultColumn, out hv_ResultRadius, out hv_StartPhi,
                    out hv_EndPhi, out hv_PointOrder);
                ho_CrossCenter.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_CrossCenter, hv_ResultRow, hv_ResultColumn, 50, 0);
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();
                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();
                throw HDevExpDefaultException;
            }
        }
        //抓取矩形圓心
        public void gen_rectangle2_center(HObject ho_Image, out HObject ho_Contour, out HObject ho_UsedEdges, out HObject ho_ResultContours, out HObject ho_CrossCenter, HTuple hv_InitialRow, HTuple hv_InitialColumn,
           HTuple hv_InitialPhi, HTuple hv_InitialLength1, HTuple hv_InitialLength2, HTuple hv_MeasureLength, HTuple hv_MeasureThreshold, HTuple hv_MeasureTransition, HTuple hv_MeasureSelect,
           out HTuple hv_ResultRow, out HTuple hv_ResultColumn, out HTuple hv_ResultPhi, out HTuple hv_ResultLength1, out HTuple hv_ResultLength2)
        {
            // Local iconic variables 
            hv_ResultRow = new HTuple(); hv_ResultColumn = new HTuple();
            hv_ResultPhi = new HTuple(); hv_ResultLength1 = new HTuple(); hv_ResultLength2 = new HTuple();
            HObject ho_ModelContour, ho_Contours;

            // Local control variables 

            HTuple hv_MetrologyHandle = null, hv_circleIndices = null;
            HTuple hv_circleParameter = null, hv_Row = null, hv_Column = null;
            HTuple hv_UsedRow = null, hv_UsedColumn = null, hv_PointOrder1 = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_Contour);
            HOperatorSet.GenEmptyObj(out ho_UsedEdges);
            HOperatorSet.GenEmptyObj(out ho_ResultContours);
            HOperatorSet.GenEmptyObj(out ho_ModelContour);
            HOperatorSet.GenEmptyObj(out ho_CrossCenter);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            try
            {
                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                //創建方形索引區域
                HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "rectangle2", ((((((hv_InitialRow.TupleConcat(
                    hv_InitialColumn))).TupleConcat(hv_InitialPhi))).TupleConcat(hv_InitialLength1))).TupleConcat(
                    hv_InitialLength2), hv_MeasureLength, 5, 1, hv_MeasureThreshold, new HTuple(),
                    new HTuple(), out hv_circleIndices);
                ho_ModelContour.Dispose();
                HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle,
                    "all", 1.5);
                //第一個點或最後一個點
                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices,
                    "measure_select", hv_MeasureSelect);
                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices,
                    "min_score", 0.2);
                HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices,
                    "all", "result_type", "all_param", out hv_circleParameter);
                //白找黑('negative')或黑找白('positive')
                ho_Contour.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle,
                    "all", hv_MeasureTransition, out hv_Row, out hv_Column);
                ho_Contours.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle,
                    "all", "all", 1.5);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges",
                    "row", out hv_UsedRow);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges",
                    "column", out hv_UsedColumn);
                ho_UsedEdges.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_UsedEdges, hv_UsedRow, hv_UsedColumn,
                    10, (new HTuple(45)).TupleRad());
                ho_ResultContours.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours, hv_MetrologyHandle,
                    "all", "all", 1.5);
                HOperatorSet.FitRectangle2ContourXld(ho_ResultContours, "regression", -1, 0,
                    0, 3, 2, out hv_ResultRow, out hv_ResultColumn, out hv_ResultPhi, out hv_ResultLength1,
                    out hv_ResultLength2, out hv_PointOrder1);
                ho_CrossCenter.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_CrossCenter, hv_ResultRow, hv_ResultColumn, 50, hv_ResultPhi);
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();
                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();

                throw HDevExpDefaultException;
            }
        }


        // Short Description: 兩張圖片進行平滑相減 
        public void polar_trans_and_mean_and_abs_diff(HObject ho_Image_Befort, HObject ho_Image_After,
            out HObject ho_XYTransImage, HTuple hv_Row_Befort, HTuple hv_Column_Befort,
            HTuple hv_Row_After, HTuple hv_Column_After, HTuple hv_OuterRadius, HTuple hv_InnerRadius,
            HTuple hv_Abs_Mult, HTuple hv_Mask_Width, HTuple hv_Mask_Height)
        {




            // Local iconic variables 

            HObject ho_PolarTransImage_Befort, ho_ImageMean_Befort;
            HObject ho_PolarTransImage_After, ho_ImageMean_After, ho_ImageAbsDiff;

            // Local control variables 

            HTuple hv_ImageWidth = null, hv_ImageHeight = null;
            HTuple hv_Width = null, hv_Height = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_XYTransImage);
            HOperatorSet.GenEmptyObj(out ho_PolarTransImage_Befort);
            HOperatorSet.GenEmptyObj(out ho_ImageMean_Befort);
            HOperatorSet.GenEmptyObj(out ho_PolarTransImage_After);
            HOperatorSet.GenEmptyObj(out ho_ImageMean_After);
            HOperatorSet.GenEmptyObj(out ho_ImageAbsDiff);
            HOperatorSet.GetImageSize(ho_Image_Befort, out hv_ImageWidth, out hv_ImageHeight);
            hv_Width = (hv_OuterRadius + hv_InnerRadius) * ((new HTuple(180)).TupleRad());
            hv_Height = hv_OuterRadius - hv_InnerRadius;

            //前圖
            ho_PolarTransImage_Befort.Dispose();
            HOperatorSet.PolarTransImageExt(ho_Image_Befort, out ho_PolarTransImage_Befort,
                hv_Row_Befort, hv_Column_Befort, 0, 6.28319, hv_InnerRadius, hv_OuterRadius,
                hv_Width, hv_Height, "nearest_neighbor");
            ho_ImageMean_Befort.Dispose();
            HOperatorSet.MeanImage(ho_PolarTransImage_Befort, out ho_ImageMean_Befort, hv_Mask_Width,
                hv_Mask_Height);

            //後圖
            ho_PolarTransImage_After.Dispose();
            HOperatorSet.PolarTransImageExt(ho_Image_After, out ho_PolarTransImage_After,
                hv_Row_After, hv_Column_After, 0, 6.28319, hv_InnerRadius, hv_OuterRadius,
                hv_Width, hv_Height, "nearest_neighbor");
            ho_ImageMean_After.Dispose();
            HOperatorSet.MeanImage(ho_PolarTransImage_After, out ho_ImageMean_After, hv_Mask_Width,
                hv_Mask_Height);

            //相減
            ho_ImageAbsDiff.Dispose();
            HOperatorSet.AbsDiffImage(ho_ImageMean_After, ho_ImageMean_Befort, out ho_ImageAbsDiff,
                hv_Abs_Mult);

            //極座標轉回
            ho_XYTransImage.Dispose();
            HOperatorSet.PolarTransImageInv(ho_ImageAbsDiff, out ho_XYTransImage, hv_Row_After,
                hv_Column_After, 0, 6.28319, hv_InnerRadius, hv_OuterRadius, hv_ImageWidth,
                hv_ImageHeight, "nearest_neighbor");
            ho_PolarTransImage_Befort.Dispose();
            ho_ImageMean_Befort.Dispose();
            ho_PolarTransImage_After.Dispose();
            ho_ImageMean_After.Dispose();
            ho_ImageAbsDiff.Dispose();

            return;
        }

        #endregion
        #endregion
        #region ALLCCD
        #region //读取图像
        public void ReadImage1(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[0]);
            // Initialize local and output iconic variables 

            HOperatorSet.CopyImage(halcon.Image[0], out ho_Image[0]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[0], out hv_Width[0], out hv_Height[0]);
            //set_display_font(hv_ExpDefaultWinHandle_1, 12, "mono", "true", "false");
            Window.DispObj(ho_Image[0]);
        }
        public void ReadImage2(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[1]);

            HOperatorSet.CopyImage(halcon.Image[1], out ho_Image[1]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[1], out hv_Width[1], out hv_Height[1]);

            Window.DispObj(ho_Image[1]);
        }
        public void ReadImage3(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[2]);

            HOperatorSet.CopyImage(halcon.Image[2], out ho_Image[2]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[2], out hv_Width[2], out hv_Height[2]);

            Window.DispObj(ho_Image[2]);
        }
        public void ReadImage4(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[3]);

            HOperatorSet.CopyImage(halcon.Image[3], out ho_Image[3]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[3], out hv_Width[3], out hv_Height[3]);

            Window.DispObj(ho_Image[3]);
        }
        public void ReadImage5(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[4]);

            HOperatorSet.CopyImage(halcon.Image[4], out ho_Image[4]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[4], out hv_Width[4], out hv_Height[4]);

            Window.DispObj(ho_Image[4]);
        }
        public void ReadImage6(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[5]);

            HOperatorSet.CopyImage(halcon.Image[5], out ho_Image[5]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[5], out hv_Width[5], out hv_Height[5]);

            Window.DispObj(ho_Image[5]);
        }
        public void ReadImage7(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[6]);

            HOperatorSet.CopyImage(halcon.Image[6], out ho_Image[6]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[6], out hv_Width[6], out hv_Height[6]);

            Window.DispObj(ho_Image[6]);
        }
        public void ReadImage8(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[7]);

            HOperatorSet.CopyImage(halcon.Image[7], out ho_Image[7]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[7], out hv_Width[7], out hv_Height[7]);

            Window.DispObj(ho_Image[7]);
        }
        public void ReadImage9(HWindow Window)
        {
            HOperatorSet.GenEmptyObj(out ho_Image[8]);

            HOperatorSet.CopyImage(halcon.Image[8], out ho_Image[8]);
            HOperatorSet.SetDraw(Window, "fill");
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.GetImageSize(ho_Image[8], out hv_Width[8], out hv_Height[8]);

            Window.DispObj(ho_Image[8]);
        }
        #endregion
        #region  //处理图像
        public void ImagePro1(HWindow Window)
        {
            saveOPic = A1CCD1.SaveOf;
            saveRPic = A1CCD1.SaveRf;
         
            BarrelViewMode2("A1CCD1-" + Sys.AssLocation, Window, 0);
            FrmMain.processing[0] = false;
        }
        public void ImagePro12(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A1CCD1.SaveOf;
            saveRPic = A1CCD1.SaveRf;
            
            BarrelViewMode2("A1CCD1-" + Sys.AssLocation, Window, 0);
            if (Sys.AssLocation == "Hold")
            {
                Sys.AssHX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssHY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Holder值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labHx1.Text = Sys.AssHX[0]; FrmVisionSet.frm.labHy1.Text = Sys.AssHY[0]; break;
                    case 2: FrmVisionSet.frm.labHx2.Text = Sys.AssHX[1]; FrmVisionSet.frm.labHy2.Text = Sys.AssHY[1]; break;
                    case 3: FrmVisionSet.frm.labHx3.Text = Sys.AssHX[2]; FrmVisionSet.frm.labHy3.Text = Sys.AssHY[2]; break;
                    case 4: FrmVisionSet.frm.labHx4.Text = Sys.AssHX[3]; FrmVisionSet.frm.labHy4.Text = Sys.AssHY[3]; break;
                    case 5: FrmVisionSet.frm.labHx5.Text = Sys.AssHX[4]; FrmVisionSet.frm.labHy5.Text = Sys.AssHY[4]; break;
                }
                #endregion
            }
            if (Sys.AssLocation == "Lens")
            {
                Sys.AssLX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssLY[Sys.AssTestNum - 1] = Sys.AssY;
                try
                {
                    #region Lens及差值
                    switch (Sys.AssTestNum)
                    {
                        case 1: FrmVisionSet.frm.labLx1.Text = Sys.AssLX[0]; FrmVisionSet.frm.labLy1.Text = Sys.AssLY[0];
                            if (Sys.AssLX[0] != "" && FrmVisionSet.frm.labHx1.Text != "-" & FrmVisionSet.frm.labHx1.Text != "")
                            {
                                FrmVisionSet.frm.dx[0] = double.Parse(Sys.AssLX[0]) - double.Parse(Sys.AssHX[0]);
                                FrmVisionSet.frm.dy[0] = double.Parse(Sys.AssLY[0]) - double.Parse(Sys.AssHY[0]);
                                FrmVisionSet.frm.dis[0] = Math.Sqrt(FrmVisionSet.frm.dx[0] * FrmVisionSet.frm.dx[0] + FrmVisionSet.frm.dy[0] * FrmVisionSet.frm.dy[0]);
                                FrmVisionSet.frm.labDx1.Text = Math.Round(FrmVisionSet.frm.dx[0], 4).ToString();
                                FrmVisionSet.frm.labDy1.Text = Math.Round(FrmVisionSet.frm.dy[0], 4).ToString();
                                FrmVisionSet.frm.labDis1.Text = Math.Round(FrmVisionSet.frm.dis[0], 4).ToString();
                            } break;
                        case 2: FrmVisionSet.frm.labLx2.Text = Sys.AssLX[1]; FrmVisionSet.frm.labLy2.Text = Sys.AssLY[1];
                            if (Sys.AssLX[1] != "" && FrmVisionSet.frm.labHx2.Text != "-" & FrmVisionSet.frm.labHx2.Text != "")
                            {
                                FrmVisionSet.frm.dx[1] = double.Parse(Sys.AssLX[1]) - double.Parse(Sys.AssHX[1]);
                                FrmVisionSet.frm.dy[1] = double.Parse(Sys.AssLY[1]) - double.Parse(Sys.AssHY[1]);
                                FrmVisionSet.frm.dis[1] = Math.Sqrt(FrmVisionSet.frm.dx[1] * FrmVisionSet.frm.dx[1] + FrmVisionSet.frm.dy[1] * FrmVisionSet.frm.dy[1]);
                                FrmVisionSet.frm.labDx2.Text = Math.Round(FrmVisionSet.frm.dx[1], 4).ToString();
                                FrmVisionSet.frm.labDy2.Text = Math.Round(FrmVisionSet.frm.dy[1], 4).ToString();
                                FrmVisionSet.frm.labDis2.Text = Math.Round(FrmVisionSet.frm.dis[1], 4).ToString();
                            } break;
                        case 3: FrmVisionSet.frm.labLx3.Text = Sys.AssLX[2]; FrmVisionSet.frm.labLy3.Text = Sys.AssLY[2];
                            if (Sys.AssLX[2] != "" && FrmVisionSet.frm.labHx3.Text != "-" & FrmVisionSet.frm.labHx3.Text != "")
                            {
                                FrmVisionSet.frm.dx[2] = double.Parse(Sys.AssLX[2]) - double.Parse(Sys.AssHX[2]);
                                FrmVisionSet.frm.dy[2] = double.Parse(Sys.AssLY[2]) - double.Parse(Sys.AssHY[2]);
                                FrmVisionSet.frm.dis[2] = Math.Sqrt(FrmVisionSet.frm.dx[2] * FrmVisionSet.frm.dx[2] + FrmVisionSet.frm.dy[2] * FrmVisionSet.frm.dy[2]);
                                FrmVisionSet.frm.labDx3.Text = Math.Round(FrmVisionSet.frm.dx[2], 4).ToString();
                                FrmVisionSet.frm.labDy3.Text = Math.Round(FrmVisionSet.frm.dy[2], 4).ToString();
                                FrmVisionSet.frm.labDis3.Text = Math.Round(FrmVisionSet.frm.dis[2], 4).ToString();
                            } break;
                        case 4: FrmVisionSet.frm.labLx4.Text = Sys.AssLX[3]; FrmVisionSet.frm.labLy4.Text = Sys.AssLY[3];
                            if (Sys.AssLX[3] != "" && FrmVisionSet.frm.labHx4.Text != "-" & FrmVisionSet.frm.labHx4.Text != "")
                            {
                                FrmVisionSet.frm.dx[3] = double.Parse(Sys.AssLX[3]) - double.Parse(Sys.AssHX[3]);
                                FrmVisionSet.frm.dy[3] = double.Parse(Sys.AssLY[3]) - double.Parse(Sys.AssHY[3]);
                                FrmVisionSet.frm.dis[3] = Math.Sqrt(FrmVisionSet.frm.dx[3] * FrmVisionSet.frm.dx[3] + FrmVisionSet.frm.dy[3] * FrmVisionSet.frm.dy[3]);
                                FrmVisionSet.frm.labDx4.Text = Math.Round(FrmVisionSet.frm.dx[3], 4).ToString();
                                FrmVisionSet.frm.labDy4.Text = Math.Round(FrmVisionSet.frm.dy[3], 4).ToString();
                                FrmVisionSet.frm.labDis4.Text = Math.Round(FrmVisionSet.frm.dis[3], 4).ToString();
                            } break;
                        case 5: FrmVisionSet.frm.labLx5.Text = Sys.AssLX[4]; FrmVisionSet.frm.labLy5.Text = Sys.AssLY[4];
                            if (Sys.AssLX[4] != "" && FrmVisionSet.frm.labHx5.Text != "-" & FrmVisionSet.frm.labHx5.Text != "")
                            {
                                FrmVisionSet.frm.dx[4] = double.Parse(Sys.AssLX[4]) - double.Parse(Sys.AssHX[4]);
                                FrmVisionSet.frm.dy[4] = double.Parse(Sys.AssLY[4]) - double.Parse(Sys.AssHY[4]);
                                FrmVisionSet.frm.dis[4] = Math.Sqrt(FrmVisionSet.frm.dx[4] * FrmVisionSet.frm.dx[4] + FrmVisionSet.frm.dy[4] * FrmVisionSet.frm.dy[4]);
                                FrmVisionSet.frm.labDx5.Text = Math.Round(FrmVisionSet.frm.dx[4], 4).ToString();
                                FrmVisionSet.frm.labDy5.Text = Math.Round(FrmVisionSet.frm.dy[4], 4).ToString();
                                FrmVisionSet.frm.labDis5.Text = Math.Round(FrmVisionSet.frm.dis[4], 4).ToString();
                            } break;
                    }
                    #endregion
                    #region 平均值
                    if (FrmVisionSet.frm.dx.Where(x => x != 0).Count() != 0)
                    {
                        FrmVisionSet.frm.labDx.Text = FrmVisionSet.frm.dx.Where(x => x != 0).Average().ToString();
                        FrmVisionSet.frm.labDy.Text = FrmVisionSet.frm.dy.Where(x => x != 0).Average().ToString();
                    }
                    else
                    {
                        FrmVisionSet.frm.labDx.Text = "0";
                        FrmVisionSet.frm.labDy.Text = "0";
                    }
                    #endregion
                }
                catch
                {
                    //
                }
            }
            FrmMain.processing[0] = false;
           
        }
        public void ImagePro13(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A1CCD1.SaveOf;
            saveRPic = A1CCD1.SaveRf;
            FShape = iniFile.Read("A1CCD1-" + Sys.AssLocation, "FigureShape", FrmMain.propath); //"Circle" "Square"
            if (FShape == "")
                MessageBox.Show("A1CCD1-" + Sys.AssLocation + "参数未设置！");
            if (FShape == "Circle")
            {
                ReadParaIde("A1CCD1-" + Sys.AssLocation);
                BarrelViewMode2add("A1CCD1-" + Sys.AssLocation, Window, 0);
                if (Sys.AssLocation == "Hold")
                {
                    Sys.AssHXA11t = Sys.AssX;
                    Sys.AssHYA11t = Sys.AssY;
                }
                if (Sys.AssLocation == "Lens")
                {
                    Sys.AssLXA11t = Sys.AssX;
                    Sys.AssLYA11t = Sys.AssY;
                    double hxa11 = 0, hya11 = 0, lxa11 = 0, lya11 = 0;
                    if (Sys.AssHXA11t != "")
                        hxa11 = double.Parse(Sys.AssHXA11t);
                    if (Sys.AssHXA11t != "")
                        hya11 = double.Parse(Sys.AssHYA11t);
                    if (Sys.AssHXA11t != "")
                        lxa11 = double.Parse(Sys.AssLXA11t);
                    if (Sys.AssHXA11t != "")
                        lya11 = double.Parse(Sys.AssLYA11t);
                    double dx = lxa11 - hxa11;
                    double dy = lya11 - hya11;
                    double dis = Math.Sqrt(dx * dx + dy * dy);
                    TestLogger("A1CCD1", Sys.AssHXA11t, Sys.AssLXA11t, Math.Round(dx, 4).ToString(),
                                        Sys.AssHYA11t, Sys.AssLYA11t, Math.Round(dy, 4).ToString(), Math.Round(dis, 4).ToString());
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(dx, 3) * 1000));
                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(dy, 3) * 1000));
                    WriteToPlc.CMDOKNG[0] = "0001";
                    WriteToPlc.CMDresult[0] = Xnum + Ynum + "00000000";
                    WriteToPlc.CMDsend[0] = true;
                    FrmMain.processing[0] = false;
                }
            }
        }

        public void ImagePro2(HWindow Window)
        {
            try
            {
                saveOPic = A1CCD2.SaveOf;
                saveRPic = A1CCD2.SaveRf;
                string area = "";
                if (A1CCD2.IntSingle == 1)
                    area = "PickUp";
                if (A1CCD2.IntSingle == 2)
                    area = "Platform";
                if (area == "")
                    return;
                
                BarrelViewMode2("A1CCD2-" + area, Window, 1);
                FrmMain.processing[1] = false;
               
            }
            catch (Exception er)
            {
                MessageBox.Show(er.ToString());
            }
        }
        public void ImagePro22(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A1CCD2.SaveOf;
            saveRPic = A1CCD2.SaveRf;
          
            BarrelViewMode2("A1CCD2-" + Sys.AssLocation, Window, 1);
            if (Sys.AssLocation == "Hold")
            {
                Sys.AssHX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssHY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Holder值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labHx1.Text = Sys.AssHX[0]; FrmVisionSet.frm.labHy1.Text = Sys.AssHY[0]; break;
                    case 2: FrmVisionSet.frm.labHx2.Text = Sys.AssHX[1]; FrmVisionSet.frm.labHy2.Text = Sys.AssHY[1]; break;
                    case 3: FrmVisionSet.frm.labHx3.Text = Sys.AssHX[2]; FrmVisionSet.frm.labHy3.Text = Sys.AssHY[2]; break;
                    case 4: FrmVisionSet.frm.labHx4.Text = Sys.AssHX[3]; FrmVisionSet.frm.labHy4.Text = Sys.AssHY[3]; break;
                    case 5: FrmVisionSet.frm.labHx5.Text = Sys.AssHX[4]; FrmVisionSet.frm.labHy5.Text = Sys.AssHY[4]; break;
                }
                #endregion
            }
            if (Sys.AssLocation == "Lens")
            {
                Sys.AssLX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssLY[Sys.AssTestNum - 1] = Sys.AssY;
                try
                {
                    #region Lens及差值
                    switch (Sys.AssTestNum)
                    {
                        case 1: FrmVisionSet.frm.labLx1.Text = Sys.AssLX[0]; FrmVisionSet.frm.labLy1.Text = Sys.AssLY[0];
                            if (Sys.AssLX[0] != "" && FrmVisionSet.frm.labHx1.Text != "-" & FrmVisionSet.frm.labHx1.Text != "")
                            {
                                FrmVisionSet.frm.dx[0] = double.Parse(Sys.AssLX[0]) - double.Parse(Sys.AssHX[0]);
                                FrmVisionSet.frm.dy[0] = double.Parse(Sys.AssLY[0]) - double.Parse(Sys.AssHY[0]);
                                FrmVisionSet.frm.dis[0] = Math.Sqrt(FrmVisionSet.frm.dx[0] * FrmVisionSet.frm.dx[0] + FrmVisionSet.frm.dy[0] * FrmVisionSet.frm.dy[0]);
                                FrmVisionSet.frm.labDx1.Text = Math.Round(FrmVisionSet.frm.dx[0], 4).ToString();
                                FrmVisionSet.frm.labDy1.Text = Math.Round(FrmVisionSet.frm.dy[0], 4).ToString();
                                FrmVisionSet.frm.labDis1.Text = Math.Round(FrmVisionSet.frm.dis[0], 4).ToString();
                            } break;
                        case 2: FrmVisionSet.frm.labLx2.Text = Sys.AssLX[1]; FrmVisionSet.frm.labLy2.Text = Sys.AssLY[1];
                            if (Sys.AssLX[1] != "" && FrmVisionSet.frm.labHx2.Text != "-" & FrmVisionSet.frm.labHx2.Text != "")
                            {
                                FrmVisionSet.frm.dx[1] = double.Parse(Sys.AssLX[1]) - double.Parse(Sys.AssHX[1]);
                                FrmVisionSet.frm.dy[1] = double.Parse(Sys.AssLY[1]) - double.Parse(Sys.AssHY[1]);
                                FrmVisionSet.frm.dis[1] = Math.Sqrt(FrmVisionSet.frm.dx[1] * FrmVisionSet.frm.dx[1] + FrmVisionSet.frm.dy[1] * FrmVisionSet.frm.dy[1]);
                                FrmVisionSet.frm.labDx2.Text = Math.Round(FrmVisionSet.frm.dx[1], 4).ToString();
                                FrmVisionSet.frm.labDy2.Text = Math.Round(FrmVisionSet.frm.dy[1], 4).ToString();
                                FrmVisionSet.frm.labDis2.Text = Math.Round(FrmVisionSet.frm.dis[1], 4).ToString();
                            } break;
                        case 3: FrmVisionSet.frm.labLx3.Text = Sys.AssLX[2]; FrmVisionSet.frm.labLy3.Text = Sys.AssLY[2];
                            if (Sys.AssLX[2] != "" && FrmVisionSet.frm.labHx3.Text != "-" & FrmVisionSet.frm.labHx3.Text != "")
                            {
                                FrmVisionSet.frm.dx[2] = double.Parse(Sys.AssLX[2]) - double.Parse(Sys.AssHX[2]);
                                FrmVisionSet.frm.dy[2] = double.Parse(Sys.AssLY[2]) - double.Parse(Sys.AssHY[2]);
                                FrmVisionSet.frm.dis[2] = Math.Sqrt(FrmVisionSet.frm.dx[2] * FrmVisionSet.frm.dx[2] + FrmVisionSet.frm.dy[2] * FrmVisionSet.frm.dy[2]);
                                FrmVisionSet.frm.labDx3.Text = Math.Round(FrmVisionSet.frm.dx[2], 4).ToString();
                                FrmVisionSet.frm.labDy3.Text = Math.Round(FrmVisionSet.frm.dy[2], 4).ToString();
                                FrmVisionSet.frm.labDis3.Text = Math.Round(FrmVisionSet.frm.dis[2], 4).ToString();
                            } break;
                        case 4: FrmVisionSet.frm.labLx4.Text = Sys.AssLX[3]; FrmVisionSet.frm.labLy4.Text = Sys.AssLY[3];
                            if (Sys.AssLX[3] != "" && FrmVisionSet.frm.labHx4.Text != "-" & FrmVisionSet.frm.labHx4.Text != "")
                            {
                                FrmVisionSet.frm.dx[3] = double.Parse(Sys.AssLX[3]) - double.Parse(Sys.AssHX[3]);
                                FrmVisionSet.frm.dy[3] = double.Parse(Sys.AssLY[3]) - double.Parse(Sys.AssHY[3]);
                                FrmVisionSet.frm.dis[3] = Math.Sqrt(FrmVisionSet.frm.dx[3] * FrmVisionSet.frm.dx[3] + FrmVisionSet.frm.dy[3] * FrmVisionSet.frm.dy[3]);
                                FrmVisionSet.frm.labDx4.Text = Math.Round(FrmVisionSet.frm.dx[3], 4).ToString();
                                FrmVisionSet.frm.labDy4.Text = Math.Round(FrmVisionSet.frm.dy[3], 4).ToString();
                                FrmVisionSet.frm.labDis4.Text = Math.Round(FrmVisionSet.frm.dis[3], 4).ToString();
                            } break;
                        case 5: FrmVisionSet.frm.labLx5.Text = Sys.AssLX[4]; FrmVisionSet.frm.labLy5.Text = Sys.AssLY[4];
                            if (Sys.AssLX[4] != "" && FrmVisionSet.frm.labHx5.Text != "-" & FrmVisionSet.frm.labHx5.Text != "")
                            {
                                FrmVisionSet.frm.dx[4] = double.Parse(Sys.AssLX[4]) - double.Parse(Sys.AssHX[4]);
                                FrmVisionSet.frm.dy[4] = double.Parse(Sys.AssLY[4]) - double.Parse(Sys.AssHY[4]);
                                FrmVisionSet.frm.dis[4] = Math.Sqrt(FrmVisionSet.frm.dx[4] * FrmVisionSet.frm.dx[4] + FrmVisionSet.frm.dy[4] * FrmVisionSet.frm.dy[4]);
                                FrmVisionSet.frm.labDx5.Text = Math.Round(FrmVisionSet.frm.dx[4], 4).ToString();
                                FrmVisionSet.frm.labDy5.Text = Math.Round(FrmVisionSet.frm.dy[4], 4).ToString();
                                FrmVisionSet.frm.labDis5.Text = Math.Round(FrmVisionSet.frm.dis[4], 4).ToString();
                            } break;
                    }
                    #endregion
                    #region 平均值
                    if (FrmVisionSet.frm.dx.Where(x => x != 0).Count() != 0)
                    {
                        FrmVisionSet.frm.labDx.Text = FrmVisionSet.frm.dx.Where(x => x != 0).Average().ToString();
                        FrmVisionSet.frm.labDy.Text = FrmVisionSet.frm.dy.Where(x => x != 0).Average().ToString();
                    }
                    else
                    {
                        FrmVisionSet.frm.labDx.Text = "0";
                        FrmVisionSet.frm.labDy.Text = "0";
                    }
                    #endregion
                }
                catch
                {
                    //
                }
            }
            FrmMain.processing[1] = false;
            
        }

        public void ImagePro3(HWindow Window)
        {
            saveOPic = A2CCD1.SaveOf;
            saveRPic = A2CCD1.SaveRf;
            
            BarrelViewMode2("A2CCD1-" + Sys.AssLocation2, Window, 2);
            FrmMain.processing[2] = false;
           
        }
        public void ImagePro32(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A2CCD1.SaveOf;
            saveRPic = A2CCD1.SaveRf;
           
            BarrelViewMode2("A2CCD1-" + Sys.AssLocation2, Window, 2);
            if (Sys.AssLocation2 == "Hold")
            {
                Sys.AssHX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssHY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Holder值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labHx1.Text = Sys.AssHX[0]; FrmVisionSet.frm.labHy1.Text = Sys.AssHY[0]; break;
                    case 2: FrmVisionSet.frm.labHx2.Text = Sys.AssHX[1]; FrmVisionSet.frm.labHy2.Text = Sys.AssHY[1]; break;
                    case 3: FrmVisionSet.frm.labHx3.Text = Sys.AssHX[2]; FrmVisionSet.frm.labHy3.Text = Sys.AssHY[2]; break;
                    case 4: FrmVisionSet.frm.labHx4.Text = Sys.AssHX[3]; FrmVisionSet.frm.labHy4.Text = Sys.AssHY[3]; break;
                    case 5: FrmVisionSet.frm.labHx5.Text = Sys.AssHX[4]; FrmVisionSet.frm.labHy5.Text = Sys.AssHY[4]; break;
                }
                #endregion
            }
            if (Sys.AssLocation2 == "Lens")
            {
                Sys.AssLX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssLY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Lens及差值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labLx1.Text = Sys.AssLX[0]; FrmVisionSet.frm.labLy1.Text = Sys.AssLY[0];
                        if (Sys.AssLX[0] != "" && FrmVisionSet.frm.labHx1.Text != "-" & FrmVisionSet.frm.labHx1.Text != "")
                        {
                            FrmVisionSet.frm.dx[0] = double.Parse(Sys.AssLX[0]) - double.Parse(Sys.AssHX[0]);
                            FrmVisionSet.frm.dy[0] = double.Parse(Sys.AssLY[0]) - double.Parse(Sys.AssHY[0]);
                            FrmVisionSet.frm.dis[0] = Math.Sqrt(FrmVisionSet.frm.dx[0] * FrmVisionSet.frm.dx[0] + FrmVisionSet.frm.dy[0] * FrmVisionSet.frm.dy[0]);
                            FrmVisionSet.frm.labDx1.Text = Math.Round(FrmVisionSet.frm.dx[0], 4).ToString();
                            FrmVisionSet.frm.labDy1.Text = Math.Round(FrmVisionSet.frm.dy[0], 4).ToString();
                            FrmVisionSet.frm.labDis1.Text = Math.Round(FrmVisionSet.frm.dis[0], 4).ToString();
                        } break;
                    case 2: FrmVisionSet.frm.labLx2.Text = Sys.AssLX[1]; FrmVisionSet.frm.labLy2.Text = Sys.AssLY[1];
                        if (Sys.AssLX[1] != "" && FrmVisionSet.frm.labHx2.Text != "-" & FrmVisionSet.frm.labHx2.Text != "")
                        {
                            FrmVisionSet.frm.dx[1] = double.Parse(Sys.AssLX[1]) - double.Parse(Sys.AssHX[1]);
                            FrmVisionSet.frm.dy[1] = double.Parse(Sys.AssLY[1]) - double.Parse(Sys.AssHY[1]);
                            FrmVisionSet.frm.dis[1] = Math.Sqrt(FrmVisionSet.frm.dx[1] * FrmVisionSet.frm.dx[1] + FrmVisionSet.frm.dy[1] * FrmVisionSet.frm.dy[1]);
                            FrmVisionSet.frm.labDx2.Text = Math.Round(FrmVisionSet.frm.dx[1], 4).ToString();
                            FrmVisionSet.frm.labDy2.Text = Math.Round(FrmVisionSet.frm.dy[1], 4).ToString();
                            FrmVisionSet.frm.labDis2.Text = Math.Round(FrmVisionSet.frm.dis[1], 4).ToString();
                        } break;
                    case 3: FrmVisionSet.frm.labLx3.Text = Sys.AssLX[2]; FrmVisionSet.frm.labLy3.Text = Sys.AssLY[2];
                        if (Sys.AssLX[2] != "" && FrmVisionSet.frm.labHx3.Text != "-" & FrmVisionSet.frm.labHx3.Text != "")
                        {
                            FrmVisionSet.frm.dx[2] = double.Parse(Sys.AssLX[2]) - double.Parse(Sys.AssHX[2]);
                            FrmVisionSet.frm.dy[2] = double.Parse(Sys.AssLY[2]) - double.Parse(Sys.AssHY[2]);
                            FrmVisionSet.frm.dis[2] = Math.Sqrt(FrmVisionSet.frm.dx[2] * FrmVisionSet.frm.dx[2] + FrmVisionSet.frm.dy[2] * FrmVisionSet.frm.dy[2]);
                            FrmVisionSet.frm.labDx3.Text = Math.Round(FrmVisionSet.frm.dx[2], 4).ToString();
                            FrmVisionSet.frm.labDy3.Text = Math.Round(FrmVisionSet.frm.dy[2], 4).ToString();
                            FrmVisionSet.frm.labDis3.Text = Math.Round(FrmVisionSet.frm.dis[2], 4).ToString();
                        } break;
                    case 4: FrmVisionSet.frm.labLx4.Text = Sys.AssLX[3]; FrmVisionSet.frm.labLy4.Text = Sys.AssLY[3];
                        if (Sys.AssLX[3] != "" && FrmVisionSet.frm.labHx4.Text != "-" & FrmVisionSet.frm.labHx4.Text != "")
                        {
                            FrmVisionSet.frm.dx[3] = double.Parse(Sys.AssLX[3]) - double.Parse(Sys.AssHX[3]);
                            FrmVisionSet.frm.dy[3] = double.Parse(Sys.AssLY[3]) - double.Parse(Sys.AssHY[3]);
                            FrmVisionSet.frm.dis[3] = Math.Sqrt(FrmVisionSet.frm.dx[3] * FrmVisionSet.frm.dx[3] + FrmVisionSet.frm.dy[3] * FrmVisionSet.frm.dy[3]);
                            FrmVisionSet.frm.labDx4.Text = Math.Round(FrmVisionSet.frm.dx[3], 4).ToString();
                            FrmVisionSet.frm.labDy4.Text = Math.Round(FrmVisionSet.frm.dy[3], 4).ToString();
                            FrmVisionSet.frm.labDis4.Text = Math.Round(FrmVisionSet.frm.dis[3], 4).ToString();
                        } break;
                    case 5: FrmVisionSet.frm.labLx5.Text = Sys.AssLX[4]; FrmVisionSet.frm.labLy5.Text = Sys.AssLY[4];
                        if (Sys.AssLX[4] != "" && FrmVisionSet.frm.labHx5.Text != "-" & FrmVisionSet.frm.labHx5.Text != "")
                        {
                            FrmVisionSet.frm.dx[4] = double.Parse(Sys.AssLX[4]) - double.Parse(Sys.AssHX[4]);
                            FrmVisionSet.frm.dy[4] = double.Parse(Sys.AssLY[4]) - double.Parse(Sys.AssHY[4]);
                            FrmVisionSet.frm.dis[4] = Math.Sqrt(FrmVisionSet.frm.dx[4] * FrmVisionSet.frm.dx[4] + FrmVisionSet.frm.dy[4] * FrmVisionSet.frm.dy[4]);
                            FrmVisionSet.frm.labDx5.Text = Math.Round(FrmVisionSet.frm.dx[4], 4).ToString();
                            FrmVisionSet.frm.labDy5.Text = Math.Round(FrmVisionSet.frm.dy[4], 4).ToString();
                            FrmVisionSet.frm.labDis5.Text = Math.Round(FrmVisionSet.frm.dis[4], 4).ToString();
                        } break;
                }
                #endregion
                #region 平均值
                if (FrmVisionSet.frm.dx.Where(x => x != 0).Count() != 0)
                {
                    FrmVisionSet.frm.labDx.Text = Math.Round(FrmVisionSet.frm.dx.Where(x => x != 0).Average(), 4).ToString();
                    FrmVisionSet.frm.labDy.Text = Math.Round(FrmVisionSet.frm.dy.Where(x => x != 0).Average(), 4).ToString();
                }
                else
                {
                    FrmVisionSet.frm.labDx.Text = "0";
                    FrmVisionSet.frm.labDy.Text = "0";
                }
                #endregion
            }
            FrmMain.processing[2] = false;
            
        }
        public void ImagePro33(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A2CCD1.SaveOf;
            saveRPic = A2CCD1.SaveRf;
            
            BarrelViewMode2add("A2CCD1-" + Sys.AssLocation2, Window, 2);
            if (Sys.AssLocation2 == "Hold")
            {
                Sys.AssHXA21t = Sys.AssX;
                Sys.AssHYA21t = Sys.AssY;
            }
            if (Sys.AssLocation2 == "Lens")
            {
                Sys.AssLXA21t = Sys.AssX;
                Sys.AssLYA21t = Sys.AssY;
                double hxa21 = 0, hya21 = 0, lxa21 = 0, lya21 = 0;
                if (Sys.AssHXA21t != "")
                    hxa21 = double.Parse(Sys.AssHXA21t);
                if (Sys.AssHXA21t != "")
                    hya21 = double.Parse(Sys.AssHYA21t);
                if (Sys.AssHXA21t != "")
                    lxa21 = double.Parse(Sys.AssLXA21t);
                if (Sys.AssHXA21t != "")
                    lya21 = double.Parse(Sys.AssLYA21t);
                double dx = lxa21 - hxa21;
                double dy = lya21 - hya21;
                double dis = Math.Sqrt(dx * dx + dy * dy);
                TestLogger("A2CCD1", Sys.AssHXA21t, Sys.AssLXA21t, Math.Round(dx, 4).ToString(),
                                        Sys.AssHYA21t, Sys.AssLYA21t, Math.Round(dy, 4).ToString(), Math.Round(dis, 4).ToString());
                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(dx, 3) * 1000));
                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(dy, 3) * 1000));
                WriteToPlc.CMDOKNG[2] = "0001";
                WriteToPlc.CMDresult[2] = Xnum + Ynum + "00000000";
                WriteToPlc.CMDsend[2] = true;
                FrmMain.processing[2] = false;
            }
        }

        public void ImagePro4(HWindow Window)
        {
            saveOPic = A2CCD2.SaveOf;
            saveRPic = A2CCD2.SaveRf;
            string area = "";
            if (A2CCD2.IntSingle == 1)
                area = "PickUp";
            if (A2CCD2.IntSingle == 2)
                area = "Platform";
            if (area == "")
                return;
           
            BarrelViewMode2("A2CCD2-" + area, Window, 3);
            FrmMain.processing[3] = false;
           
        }
        public void ImagePro42(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = A2CCD2.SaveOf;
            saveRPic = A2CCD2.SaveRf;
            
            BarrelViewMode2("A2CCD2-" + Sys.AssLocation, Window, 3);
            if (Sys.AssLocation == "Hold")
            {
                Sys.AssHX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssHY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Holder值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labHx1.Text = Sys.AssHX[0]; FrmVisionSet.frm.labHy1.Text = Sys.AssHY[0]; break;
                    case 2: FrmVisionSet.frm.labHx2.Text = Sys.AssHX[1]; FrmVisionSet.frm.labHy2.Text = Sys.AssHY[1]; break;
                    case 3: FrmVisionSet.frm.labHx3.Text = Sys.AssHX[2]; FrmVisionSet.frm.labHy3.Text = Sys.AssHY[2]; break;
                    case 4: FrmVisionSet.frm.labHx4.Text = Sys.AssHX[3]; FrmVisionSet.frm.labHy4.Text = Sys.AssHY[3]; break;
                    case 5: FrmVisionSet.frm.labHx5.Text = Sys.AssHX[4]; FrmVisionSet.frm.labHy5.Text = Sys.AssHY[4]; break;
                }
                #endregion
            }
            if (Sys.AssLocation == "Lens")
            {
                Sys.AssLX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssLY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Lens及差值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labLx1.Text = Sys.AssLX[0]; FrmVisionSet.frm.labLy1.Text = Sys.AssLY[0];
                        if (Sys.AssLX[0] != "" && FrmVisionSet.frm.labHx1.Text != "-" & FrmVisionSet.frm.labHx1.Text != "")
                        {
                            FrmVisionSet.frm.dx[0] = double.Parse(Sys.AssLX[0]) - double.Parse(Sys.AssHX[0]);
                            FrmVisionSet.frm.dy[0] = double.Parse(Sys.AssLY[0]) - double.Parse(Sys.AssHY[0]);
                            FrmVisionSet.frm.dis[0] = Math.Sqrt(FrmVisionSet.frm.dx[0] * FrmVisionSet.frm.dx[0] + FrmVisionSet.frm.dy[0] * FrmVisionSet.frm.dy[0]);
                            FrmVisionSet.frm.labDx1.Text = Math.Round(FrmVisionSet.frm.dx[0], 4).ToString();
                            FrmVisionSet.frm.labDy1.Text = Math.Round(FrmVisionSet.frm.dy[0], 4).ToString();
                            FrmVisionSet.frm.labDis1.Text = Math.Round(FrmVisionSet.frm.dis[0], 4).ToString();
                        } break;
                    case 2: FrmVisionSet.frm.labLx2.Text = Sys.AssLX[1]; FrmVisionSet.frm.labLy2.Text = Sys.AssLY[1];
                        if (Sys.AssLX[1] != "" && FrmVisionSet.frm.labHx2.Text != "-" & FrmVisionSet.frm.labHx2.Text != "")
                        {
                            FrmVisionSet.frm.dx[1] = double.Parse(Sys.AssLX[1]) - double.Parse(Sys.AssHX[1]);
                            FrmVisionSet.frm.dy[1] = double.Parse(Sys.AssLY[1]) - double.Parse(Sys.AssHY[1]);
                            FrmVisionSet.frm.dis[1] = Math.Sqrt(FrmVisionSet.frm.dx[1] * FrmVisionSet.frm.dx[1] + FrmVisionSet.frm.dy[1] * FrmVisionSet.frm.dy[1]);
                            FrmVisionSet.frm.labDx2.Text = Math.Round(FrmVisionSet.frm.dx[1], 4).ToString();
                            FrmVisionSet.frm.labDy2.Text = Math.Round(FrmVisionSet.frm.dy[1], 4).ToString();
                            FrmVisionSet.frm.labDis2.Text = Math.Round(FrmVisionSet.frm.dis[1], 4).ToString();
                        } break;
                    case 3: FrmVisionSet.frm.labLx3.Text = Sys.AssLX[2]; FrmVisionSet.frm.labLy3.Text = Sys.AssLY[2];
                        if (Sys.AssLX[2] != "" && FrmVisionSet.frm.labHx3.Text != "-" & FrmVisionSet.frm.labHx3.Text != "")
                        {
                            FrmVisionSet.frm.dx[2] = double.Parse(Sys.AssLX[2]) - double.Parse(Sys.AssHX[2]);
                            FrmVisionSet.frm.dy[2] = double.Parse(Sys.AssLY[2]) - double.Parse(Sys.AssHY[2]);
                            FrmVisionSet.frm.dis[2] = Math.Sqrt(FrmVisionSet.frm.dx[2] * FrmVisionSet.frm.dx[2] + FrmVisionSet.frm.dy[2] * FrmVisionSet.frm.dy[2]);
                            FrmVisionSet.frm.labDx3.Text = Math.Round(FrmVisionSet.frm.dx[2], 4).ToString();
                            FrmVisionSet.frm.labDy3.Text = Math.Round(FrmVisionSet.frm.dy[2], 4).ToString();
                            FrmVisionSet.frm.labDis3.Text = Math.Round(FrmVisionSet.frm.dis[2], 4).ToString();
                        } break;
                    case 4: FrmVisionSet.frm.labLx4.Text = Sys.AssLX[3]; FrmVisionSet.frm.labLy4.Text = Sys.AssLY[3];
                        if (Sys.AssLX[3] != "" && FrmVisionSet.frm.labHx4.Text != "-" & FrmVisionSet.frm.labHx4.Text != "")
                        {
                            FrmVisionSet.frm.dx[3] = double.Parse(Sys.AssLX[3]) - double.Parse(Sys.AssHX[3]);
                            FrmVisionSet.frm.dy[3] = double.Parse(Sys.AssLY[3]) - double.Parse(Sys.AssHY[3]);
                            FrmVisionSet.frm.dis[3] = Math.Sqrt(FrmVisionSet.frm.dx[3] * FrmVisionSet.frm.dx[3] + FrmVisionSet.frm.dy[3] * FrmVisionSet.frm.dy[3]);
                            FrmVisionSet.frm.labDx4.Text = Math.Round(FrmVisionSet.frm.dx[3], 4).ToString();
                            FrmVisionSet.frm.labDy4.Text = Math.Round(FrmVisionSet.frm.dy[3], 4).ToString();
                            FrmVisionSet.frm.labDis4.Text = Math.Round(FrmVisionSet.frm.dis[3], 4).ToString();
                        } break;
                    case 5: FrmVisionSet.frm.labLx5.Text = Sys.AssLX[4]; FrmVisionSet.frm.labLy5.Text = Sys.AssLY[4];
                        if (Sys.AssLX[4] != "" && FrmVisionSet.frm.labHx5.Text != "-" & FrmVisionSet.frm.labHx5.Text != "")
                        {
                            FrmVisionSet.frm.dx[4] = double.Parse(Sys.AssLX[4]) - double.Parse(Sys.AssHX[4]);
                            FrmVisionSet.frm.dy[4] = double.Parse(Sys.AssLY[4]) - double.Parse(Sys.AssHY[4]);
                            FrmVisionSet.frm.dis[4] = Math.Sqrt(FrmVisionSet.frm.dx[4] * FrmVisionSet.frm.dx[4] + FrmVisionSet.frm.dy[4] * FrmVisionSet.frm.dy[4]);
                            FrmVisionSet.frm.labDx5.Text = Math.Round(FrmVisionSet.frm.dx[4], 4).ToString();
                            FrmVisionSet.frm.labDy5.Text = Math.Round(FrmVisionSet.frm.dy[4], 4).ToString();
                            FrmVisionSet.frm.labDis5.Text = Math.Round(FrmVisionSet.frm.dis[4], 4).ToString();
                        } break;
                }
                #endregion
                #region 平均值
                if (FrmVisionSet.frm.dx.Where(x => x != 0).Count() != 0)
                {
                    FrmVisionSet.frm.labDx.Text = Math.Round(FrmVisionSet.frm.dx.Where(x => x != 0).Average(), 4).ToString();
                    FrmVisionSet.frm.labDy.Text = Math.Round(FrmVisionSet.frm.dy.Where(x => x != 0).Average(), 4).ToString();
                }
                else
                {
                    FrmVisionSet.frm.labDx.Text = "0";
                    FrmVisionSet.frm.labDy.Text = "0";
                }
                #endregion
            }
            FrmMain.processing[3] = false;
           
        }

        public void ImagePro5(HWindow Window)
        {
            saveOPic = PCCD1.SaveOf;
            saveRPic = PCCD1.SaveRf;
            BarrelViewMode2("PCCD1", Window, 4);
            FrmMain.processing[4] = false;
        }
        public void ImagePro52(HWindow Window)
        {
            Sys.AssX = ""; Sys.AssY = "";
            saveOPic = PCCD1.SaveOf;
            saveRPic = PCCD1.SaveRf;
           
            BarrelViewMode2("PCCD1-" + Sys.AssLocation2, Window, 4);
            if (Sys.AssLocation2 == "Hold")
            {
                Sys.AssHX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssHY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Holder值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labHx1.Text = Sys.AssHX[0]; FrmVisionSet.frm.labHy1.Text = Sys.AssHY[0]; break;
                    case 2: FrmVisionSet.frm.labHx2.Text = Sys.AssHX[1]; FrmVisionSet.frm.labHy2.Text = Sys.AssHY[1]; break;
                    case 3: FrmVisionSet.frm.labHx3.Text = Sys.AssHX[2]; FrmVisionSet.frm.labHy3.Text = Sys.AssHY[2]; break;
                    case 4: FrmVisionSet.frm.labHx4.Text = Sys.AssHX[3]; FrmVisionSet.frm.labHy4.Text = Sys.AssHY[3]; break;
                    case 5: FrmVisionSet.frm.labHx5.Text = Sys.AssHX[4]; FrmVisionSet.frm.labHy5.Text = Sys.AssHY[4]; break;
                }
                #endregion
            }
            if (Sys.AssLocation2 == "Lens")
            {
                Sys.AssLX[Sys.AssTestNum - 1] = Sys.AssX;
                Sys.AssLY[Sys.AssTestNum - 1] = Sys.AssY;
                #region Lens及差值
                switch (Sys.AssTestNum)
                {
                    case 1: FrmVisionSet.frm.labLx1.Text = Sys.AssLX[0]; FrmVisionSet.frm.labLy1.Text = Sys.AssLY[0];
                        if (Sys.AssLX[0] != "" && FrmVisionSet.frm.labHx1.Text != "-" & FrmVisionSet.frm.labHx1.Text != "")
                        {
                            FrmVisionSet.frm.dx[0] = double.Parse(Sys.AssLX[0]) - double.Parse(Sys.AssHX[0]);
                            FrmVisionSet.frm.dy[0] = double.Parse(Sys.AssLY[0]) - double.Parse(Sys.AssHY[0]);
                            FrmVisionSet.frm.dis[0] = Math.Sqrt(FrmVisionSet.frm.dx[0] * FrmVisionSet.frm.dx[0] + FrmVisionSet.frm.dy[0] * FrmVisionSet.frm.dy[0]);
                            FrmVisionSet.frm.labDx1.Text = Math.Round(FrmVisionSet.frm.dx[0], 4).ToString();
                            FrmVisionSet.frm.labDy1.Text = Math.Round(FrmVisionSet.frm.dy[0], 4).ToString();
                            FrmVisionSet.frm.labDis1.Text = Math.Round(FrmVisionSet.frm.dis[0], 4).ToString();
                        } break;
                    case 2: FrmVisionSet.frm.labLx2.Text = Sys.AssLX[1]; FrmVisionSet.frm.labLy2.Text = Sys.AssLY[1];
                        if (Sys.AssLX[1] != "" && FrmVisionSet.frm.labHx2.Text != "-" & FrmVisionSet.frm.labHx2.Text != "")
                        {
                            FrmVisionSet.frm.dx[1] = double.Parse(Sys.AssLX[1]) - double.Parse(Sys.AssHX[1]);
                            FrmVisionSet.frm.dy[1] = double.Parse(Sys.AssLY[1]) - double.Parse(Sys.AssHY[1]);
                            FrmVisionSet.frm.dis[1] = Math.Sqrt(FrmVisionSet.frm.dx[1] * FrmVisionSet.frm.dx[1] + FrmVisionSet.frm.dy[1] * FrmVisionSet.frm.dy[1]);
                            FrmVisionSet.frm.labDx2.Text = Math.Round(FrmVisionSet.frm.dx[1], 4).ToString();
                            FrmVisionSet.frm.labDy2.Text = Math.Round(FrmVisionSet.frm.dy[1], 4).ToString();
                            FrmVisionSet.frm.labDis2.Text = Math.Round(FrmVisionSet.frm.dis[1], 4).ToString();
                        } break;
                    case 3: FrmVisionSet.frm.labLx3.Text = Sys.AssLX[2]; FrmVisionSet.frm.labLy3.Text = Sys.AssLY[2];
                        if (Sys.AssLX[2] != "" && FrmVisionSet.frm.labHx3.Text != "-" & FrmVisionSet.frm.labHx3.Text != "")
                        {
                            FrmVisionSet.frm.dx[2] = double.Parse(Sys.AssLX[2]) - double.Parse(Sys.AssHX[2]);
                            FrmVisionSet.frm.dy[2] = double.Parse(Sys.AssLY[2]) - double.Parse(Sys.AssHY[2]);
                            FrmVisionSet.frm.dis[2] = Math.Sqrt(FrmVisionSet.frm.dx[2] * FrmVisionSet.frm.dx[2] + FrmVisionSet.frm.dy[2] * FrmVisionSet.frm.dy[2]);
                            FrmVisionSet.frm.labDx3.Text = Math.Round(FrmVisionSet.frm.dx[2], 4).ToString();
                            FrmVisionSet.frm.labDy3.Text = Math.Round(FrmVisionSet.frm.dy[2], 4).ToString();
                            FrmVisionSet.frm.labDis3.Text = Math.Round(FrmVisionSet.frm.dis[2], 4).ToString();
                        } break;
                    case 4: FrmVisionSet.frm.labLx4.Text = Sys.AssLX[3]; FrmVisionSet.frm.labLy4.Text = Sys.AssLY[3];
                        if (Sys.AssLX[3] != "" && FrmVisionSet.frm.labHx4.Text != "-" & FrmVisionSet.frm.labHx4.Text != "")
                        {
                            FrmVisionSet.frm.dx[3] = double.Parse(Sys.AssLX[3]) - double.Parse(Sys.AssHX[3]);
                            FrmVisionSet.frm.dy[3] = double.Parse(Sys.AssLY[3]) - double.Parse(Sys.AssHY[3]);
                            FrmVisionSet.frm.dis[3] = Math.Sqrt(FrmVisionSet.frm.dx[3] * FrmVisionSet.frm.dx[3] + FrmVisionSet.frm.dy[3] * FrmVisionSet.frm.dy[3]);
                            FrmVisionSet.frm.labDx4.Text = Math.Round(FrmVisionSet.frm.dx[3], 4).ToString();
                            FrmVisionSet.frm.labDy4.Text = Math.Round(FrmVisionSet.frm.dy[3], 4).ToString();
                            FrmVisionSet.frm.labDis4.Text = Math.Round(FrmVisionSet.frm.dis[3], 4).ToString();
                        } break;
                    case 5: FrmVisionSet.frm.labLx5.Text = Sys.AssLX[4]; FrmVisionSet.frm.labLy5.Text = Sys.AssLY[4];
                        if (Sys.AssLX[4] != "" && FrmVisionSet.frm.labHx5.Text != "-" & FrmVisionSet.frm.labHx5.Text != "")
                        {
                            FrmVisionSet.frm.dx[4] = double.Parse(Sys.AssLX[4]) - double.Parse(Sys.AssHX[4]);
                            FrmVisionSet.frm.dy[4] = double.Parse(Sys.AssLY[4]) - double.Parse(Sys.AssHY[4]);
                            FrmVisionSet.frm.dis[4] = Math.Sqrt(FrmVisionSet.frm.dx[4] * FrmVisionSet.frm.dx[4] + FrmVisionSet.frm.dy[4] * FrmVisionSet.frm.dy[4]);
                            FrmVisionSet.frm.labDx5.Text = Math.Round(FrmVisionSet.frm.dx[4], 4).ToString();
                            FrmVisionSet.frm.labDy5.Text = Math.Round(FrmVisionSet.frm.dy[4], 4).ToString();
                            FrmVisionSet.frm.labDis5.Text = Math.Round(FrmVisionSet.frm.dis[4], 4).ToString();
                        } break;
                }
                #endregion
                #region 平均值
                if (FrmVisionSet.frm.dx.Where(x => x != 0).Count() != 0)
                {
                    FrmVisionSet.frm.labDx.Text = Math.Round(FrmVisionSet.frm.dx.Where(x => x != 0).Average(), 4).ToString();
                    FrmVisionSet.frm.labDy.Text = Math.Round(FrmVisionSet.frm.dy.Where(x => x != 0).Average(), 4).ToString();
                }
                else
                {
                    FrmVisionSet.frm.labDx.Text = "0";
                    FrmVisionSet.frm.labDy.Text = "0";
                }
                #endregion
            }
            FrmMain.processing[2] = false;
            
        }
        HObject ho_pcopy = new HObject();
        public void ImagePro53(HWindow Window)
        {
            try
            {
                if (Sys.AssLocation == "Hold" || Sys.AssLocation == "Lens")
                {
                    Sys.AssX = ""; Sys.AssY = "";
                    saveOPic = PCCD1.SaveOf;
                    saveRPic = PCCD1.SaveRf;
                    
                    ReadAssPara("PCCD1");
                    ho_pcopy.Dispose();
                    HOperatorSet.CopyImage(halcon.Image[4], out ho_pcopy);
                    BarrelViewMode2("PCCD1-" + Sys.AssLocation, Window, 4);
                    if (Sys.AssLocation == "Hold")
                    {
                        Sys.AssHXP1t = Sys.AssX;
                        Sys.AssHYP1t = Sys.AssY;
                    }
                    if (Sys.AssLocation == "Lens")
                    {
                        Sys.AssLXP1t = Sys.AssX;
                        Sys.AssLYP1t = Sys.AssY;
                        double hxa11 = 0, hya11 = 0, lxa11 = 0, lya11 = 0;
                        if (Sys.AssHXP1t != "")
                            hxa11 = double.Parse(Sys.AssHXP1t);
                        if (Sys.AssHYP1t != "")
                            hya11 = double.Parse(Sys.AssHYP1t);
                        if (Sys.AssLXP1t != "")
                            lxa11 = double.Parse(Sys.AssLXP1t);
                        if (Sys.AssLYP1t != "")
                            lya11 = double.Parse(Sys.AssLYP1t);
                        double dx = lxa11 - hxa11;
                        double dy = lya11 - hya11;
                        double dis = Math.Sqrt(dx * dx + dy * dy);
                        Sys.AssDisX = Math.Round(dx, 4).ToString();
                        Sys.AssDisY = Math.Round(dy, 4).ToString();
                        Sys.AssDis = Math.Round(dis, 4).ToString();
                        string TESTtime = DateTime.Now.ToString("HHmmss");
                        FrmMain.afterDT = System.DateTime.Now;
                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(dx, 3) * 1000));
                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(dy, 3) * 1000));
                        Window.ClearWindow();
                        Window.DispObj(ho_pcopy);
                        try
                        {
                            Window.SetColor("green");
                            HOperatorSet.GenCircleContourXld(out ho_p1holdCircle, hv_p1hrow, hv_p1hcol, hv_p1hr, 0, 6.28318, "positive", 1);
                            Window.DispObj(ho_p1holdCircle);
                            HOperatorSet.GenCircle(out ho_p1holdCircle0, hv_p1hrow, hv_p1hcol, 8);
                            Window.DispObj(ho_p1holdCircle0);
                            Window.SetColor("red");
                            HOperatorSet.GenCircleContourXld(out ho_p1lensCircle, hv_p1lrow, hv_p1lcol, hv_p1lr, 0, 6.28318, "positive", 1);
                            Window.DispObj(ho_p1lensCircle);
                            HOperatorSet.GenCircle(out ho_p1lensCircle0, hv_p1lrow, hv_p1lcol, 8);
                            Window.DispObj(ho_p1lensCircle0);
                        }
                        catch (Exception er)
                        {
                            MessageBox.Show(er.ToString());
                        }
                        disp_message(Window, "DisX:" + Math.Round(dx, 4) + "mm", "", 150, 150, "green", "false");
                        disp_message(Window, "DisY:" + Math.Round(dy, 4) + "mm", "", 300, 150, "green", "false");
                        disp_message(Window, "Dis:" + Math.Round(dis, 4) + "mm", "", 450, 150, "green", "false");
                        if (Math.Round(dx, 4) < AssDisXmaxSet & Math.Round(dy, 4) < AssDisYmaxSet & Math.Round(dis, 4) < AssDismaxSet)
                        {
                            WriteToPlc.CMDOKNG[4] = "0001";
                            Sys.P1Result = "PASS";
                            disp_message(Window, "PASS", "", 150, 2000, "green", "false");
                        }
                        else
                        {
                            WriteToPlc.CMDOKNG[4] = "0002";
                            Sys.P1Result = "NG";
                            if (hxa11 == 0 || lxa11 == 0)
                            {
                                disp_message(Window, "NG(请重试或", "", 150, 1500, "red", "false");
                                disp_message(Window, "调整参数！)", "", 260, 1510, "red", "false");
                            }
                            else
                                disp_message(Window, "NG", "", 150, 2000, "red", "false");
                        }
                        if (Sys.P1Result == "")
                            Sys.P1Result = "NG";
                        WriteToPlc.CMDresult[4] = Xnum + Ynum + "00000000";
                        WriteToPlc.CMDsend[4] = true;
                        FrmMain.processing[4] = false;
                        if (saveOPic)
                            HOperatorSet.WriteImage(ho_pcopy, "png", -1, Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\PCCD1\\" + Sys.P1Result + "\\OriginalImage\\Dis" + TESTtime);
                        if (saveRPic)
                            HOperatorSet.DumpWindow(Window, "png", Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\PCCD1\\" + Sys.P1Result + "\\ResultImage\\Dis" + TESTtime);
                        iniFile.Write("AssShift", "Result", Sys.P1Result, Sys.IniPath + "\\Data.ini");
                        iniFile.Write("AssShift", "X", Sys.AssDisX, Sys.IniPath + "\\Data.ini");
                        iniFile.Write("AssShift", "Y", Sys.AssDisY, Sys.IniPath + "\\Data.ini");
                        iniFile.Write("AssShift", "Dis", Sys.AssDis, Sys.IniPath + "\\Data.ini");
                    }
                }
            }
            catch //(Exception er)
            {
                //MessageBox.Show(er.ToString());
            }
        }

        public void ImagePro6(HWindow Window)
        {
            PCCD2.xpm = 0.00441;
            saveOPic = PCCD2.SaveOf;
            saveRPic = PCCD2.SaveRf;
            string area = "";
            if (PCCD2.IntSingle == 1)
                area = "PickUp";
            if (PCCD2.IntSingle == 2)
                area = "Platform1";
            if (PCCD2.IntSingle == 3)
                area = "Platform2";
            if (area == "")
                return;
            
            BarrelViewMode2("PCCD2-" + area, Window, 5);
            if (PCCD2.isPUAVI & Glue.GlueOutResult != "PASS")
                Glue.GlueOutResult = "NG";
            FrmMain.processing[5] = false;
           
        }
        public void ImagePro7(HWindow Window)
        {
            saveOPic = GCCD1.SaveOf;
            saveRPic = GCCD1.SaveRf;
            
            BarrelViewMode2("GCCD1", Window, 6);
            FrmMain.processing[6] = false;
           
        }
        public void ImagePro8(HWindow Window)
        {
            saveOPic = GCCD2.SaveOf;
            saveRPic = GCCD2.SaveRf;
            GlueOrder = GCCD2.IntSingle;
            string area1 = "";
            if (PLC.ccdTrigger[12])
            {
                if (PLC.ccdTrigger[14] || PLC.ccdTrigger[15])
                    area1 = "1";
                if (PLC.ccdTrigger[22] || PLC.ccdTrigger[23])
                    area1 = "3";
            }
            if (PLC.ccdTrigger[13])
            {
                if (PLC.ccdTrigger[14] || PLC.ccdTrigger[15])
                    area1 = "2";
                if (PLC.ccdTrigger[22] || PLC.ccdTrigger[23])
                    area1 = "4";
            }
           
           
            BarrelViewMode2("GCCD2-" + area1, Window, 7);
            FrmMain.processing[7] = false;
            
        }
        public void ImagePro9(HWindow Window)
        {
            saveOPic = QCCD.SaveOf;
            saveRPic = QCCD.SaveRf;
            
            BarrelViewMode2("QCCD", Window, 8);
            FrmMain.processing[8] = false;
        }
        #endregion
        #endregion

        #region 圆和角度变量
        string regionR = ""; string AMode = ""; string Tfilepath = "";
        int ringR = 0, binBvi = 128, ringWidth = 0, ringTh = 128;
        HTuple RegionRadius = new HTuple(), hv_transition = new HTuple();
        HTuple hv_ModelID1 = new HTuple();
        double Prmin, Prmax, CXp, CXm, CYp, CYm, DegP = 360, DegM = 0;
        int RadiusMin = 0, RadiusMax = 0, binBW = 1, binWB = 255, Cutmin = 0, Cutmax = 10000;
        string Shapetype = ""; double modescore;
        string gMode = ""; bool gCheck = false, gblimitCheck = false;
        HObject ho_circleR = new HObject(), ho_ImageReducedR = new HObject(), ho_ImageRun = new HObject(), ho_Border1 = new HObject();
        HObject ho_selectCir = new HObject(), ho_selectContour = new HObject();
        HObject ho_ContoursSplit1 = new HObject(), ho_SelectedXLD1 = new HObject();
        HObject ho_ObjectSelectedM1 = new HObject(), ho_ObjectSelectedN1 = new HObject(), ho_RRegions = new HObject(), ho_RContCircle = new HObject();
        HObject[] OTemp = new HObject[20]; long SP_O = 0;
        HObject ho_Arrow1 = new HObject(), ho_Circle = new HObject(), ho_Contour = new HObject(), ho_RCircle = new HObject();
        HObject ho_ContoursSplit = new HObject(), ho_SortedContours = new HObject(), ho_ObjectSelected2 = new HObject();
        HObject ho_RCircle0 = new HObject(), ho_CutRegion1 = new HObject(), ho_CutRegion2 = new HObject(), ho_ROI_0 = new HObject();
        HObject ho_RegionDifference = new HObject(), ho_Mode = new HObject(), ho_SelectedRegionsMax = new HObject();
        HObject ho_ImageReduced1 = new HObject(), ho_Region = new HObject(), ho_ConnectedRegions = new HObject(), ho_SelectedRegions1 = new HObject();
        HObject ho_ModelContour = new HObject(), ho_MeasureContour = new HObject(), ho_Cross = new HObject();
        HObject ho_UsedEdges = new HObject(), ho_ResultContours = new HObject(), ho_CrossCenter = new HObject();
        HObject ho_GrayDiff1 = new HObject(), ho_GrayDiff2 = new HObject(), ho_DiffCirIn = new HObject(), ho_DiffCirOut = new HObject();
        HObject ho_GlueImage_Befort = new HObject(), ho_GlueImage_After = new HObject(), ho_GlueImage_Befort_2 = new HObject();

        HTuple GERadiusMin = new HTuple(), GERadiusMax = new HTuple();

        HTuple hv_diff1Area = 0, hv_diff2Area = 0, hv_diffRow = new HTuple(), hv_diffCol = new HTuple();
        HTuple hv_MetrologyHandle = null, hv_circleIndices = null, hv_circleParameter = null, hv_CoatMetrologyHandle = null;
        HTuple width = new HTuple(), height = new HTuple(), area = new HTuple(), row = new HTuple(), col = new HTuple();
        int permin, permax, limitAreaminIn, limitAreaminOut;
        HTuple hv_Number1 = new HTuple(), hv_LengthMax1 = new HTuple(), hv_Length1 = new HTuple();
        HTuple hv_Row2 = new HTuple(), hv_Column2 = new HTuple(), hv_Radius = new HTuple(), hv_StartPhi = new HTuple(), hv_EndPhi = new HTuple();
        HTuple hv_PointOrder = new HTuple(), RingCrow = new HTuple(), RingCcolumn = new HTuple();
        HTuple hv_RowCenter = new HTuple(), hv_ColCenter = new HTuple(), hv_Deg2 = new HTuple();
        HTuple hv_AreaCut = new HTuple(), hv_RowCut = new HTuple(), hv_ColumnCut = new HTuple(), hv_ArcType = "circle";
        HTuple hv_RowM = new HTuple(), hv_ColumnM = new HTuple(), hv_AngleM = new HTuple(), hv_Score = new HTuple();
        HTuple hv_AreaMode = new HTuple(), hv_RowMode = new HTuple(), hv_ColMode = new HTuple();
        double SubRow, SubCol;
        HTuple hv_AreaCut4 = new HTuple(), hv_RowCut4 = new HTuple(), hv_ColumnCut4 = new HTuple(), hv_DistanceCut4 = null;
        HTuple hv_NumberCut4 = null, hv_iCut4 = null, hv_dismaxCut4 = null, hv_kCut4 = null;

        HObject ho_Rectangle = new HObject(), ho_EmptyRectangle = new HObject(), ho_emSelectedRegion = new HObject(), ho_SelectedRegion = new HObject();
        HTuple hv_emRow = new HTuple(), hv_emColumn = new HTuple(), hv_emPhi = new HTuple(), hv_emLength1 = new HTuple(), hv_emLength2 = new HTuple();
        HTuple hv_i = new HTuple(), hv_j = new HTuple(), hv_val1 = new HTuple(), hv_val2 = new HTuple(), hv_Number2 = new HTuple(), hv_valueM = new HTuple(), hv_va = new HTuple();
        HTuple hv_CRow2 = new HTuple(), hv_CColumn2 = new HTuple(), hv_CPhi = new HTuple(), hv_CLength1 = new HTuple(), hv_CLength2 = new HTuple();
        HTuple hv_Areare = new HTuple(), hv_Rowre = new HTuple(), hv_Columnre = new HTuple(), hv_valueLM = new HTuple();
        HTuple hv_Areareall = new HTuple(), hv_Rowreall = new HTuple(), hv_Columnreall = new HTuple();

        HTuple hv_RowCenter_Befort = new HTuple(), hv_ColumnCenter_Befort = new HTuple(), hv_RowCenter_After = new HTuple(), hv_ColumnCenter_After = new HTuple();
        HTuple hv_RowCenter_Befort_2 = new HTuple(), hv_ColumnCenter_Befort_2 = new HTuple();
        HTuple hv_RowCut_Befort = new HTuple(), hv_ColumnCut_Befort = new HTuple(), hv_RowCut_After = new HTuple(), hv_ColumnCut_After = new HTuple();
        #endregion
        #region 点胶变量
        HTuple hv_FDegPlue = new HTuple(), hv_grayDistance = new HTuple(), hv_g1length1 = new HTuple(), hv_g1length2 = new HTuple(), glueGray = new HTuple();
        HTuple hv_markDistance = new HTuple(), hv_marklength1 = new HTuple(), hv_marklength2 = new HTuple(), hv_markDegPlus = new HTuple();
        HTuple hv_g1area = new HTuple(), hv_g2area = new HTuple(), hv_g3area = new HTuple(), hv_g4area = new HTuple(), hv_GlueArea = new HTuple(), hv_GlueArea_2 = new HTuple();
        HTuple hv_g1row = new HTuple(), hv_g2row = new HTuple(), hv_g3row = new HTuple(), hv_g4row = new HTuple(), hv_g1col = new HTuple();
        HTuple hv_g2col = new HTuple(), hv_g3col = new HTuple(), hv_g4col = new HTuple();
        HTuple g1Area1 = new HTuple(), g2Area1 = new HTuple(), g3Area1 = new HTuple(), g4Area1 = new HTuple();
        HTuple g1Area2 = new HTuple(), g2Area2 = new HTuple(), g3Area2 = new HTuple(), g4Area2 = new HTuple();
        HTuple MidCirRadius = new HTuple(), RegionWidth = new HTuple(), StartAngle = new HTuple(), EndAngle = new HTuple();
        HTuple hv_rowFCenter = new HTuple(), hv_colFCenter = new HTuple(), hv_g1angle = new HTuple();
        HTuple hv_g1RowCh = new HTuple(), hv_g1ColumnCh = new HTuple(), hv_g2RowCh = new HTuple(), hv_g2ColumnCh = new HTuple();
        HTuple hv_g3RowCh = new HTuple(), hv_g3ColumnCh = new HTuple(), hv_g4RowCh = new HTuple(), hv_g4ColumnCh = new HTuple();
        HTuple hv_startPhi = new HTuple(), hv_endPhi = new HTuple(), hv_startPhi1 = new HTuple(), hv_endPhi1 = new HTuple();
        HTuple hv_rowF = new HTuple(), hv_colF = new HTuple(), hv_rowF1 = new HTuple(), hv_colF1 = new HTuple();
        HTuple hv_rowF0 = new HTuple(), hv_colF0 = new HTuple(), hv_rowF01 = new HTuple(), hv_colF01 = new HTuple();

        PointF g2Point, g4Point, cenPoint;

        HObject ho_g1Rectangle = new HObject(), ho_g3Rectangle = new HObject(), ho_g2Rectangle = new HObject(), ho_g4Rectangle = new HObject();
        HObject ho_mark1Rectangle = new HObject(), ho_mark2Rectangle = new HObject(), ho_mark3Rectangle = new HObject(), ho_mark4Rectangle = new HObject();
        HObject ho_g1Region = new HObject(), ho_g3Region = new HObject(), ho_g2Region = new HObject(), ho_g4Region = new HObject();
        HObject ho_g1Reduced = new HObject(), ho_g3Reduced = new HObject(), ho_g2Reduced = new HObject(), ho_g4Reduced = new HObject();
        HObject ho_g1Grey = new HObject(), ho_g3Grey = new HObject(), ho_g2Grey = new HObject(), ho_g4Grey = new HObject();
        HObject ho_GlueQ1 = new HObject(), ho_GlueQ2 = new HObject(), ho_GlueQ3 = new HObject(), ho_GlueQ4 = new HObject();
        HObject ho_GlueH1 = new HObject(), ho_GlueH2 = new HObject(), ho_GlueH3 = new HObject(), ho_GlueH4 = new HObject();
        HObject ho_GlueDiff1 = new HObject(), ho_GlueDiff2 = new HObject(), ho_GlueDiff3 = new HObject(), ho_GlueDiff4 = new HObject();
        HObject ho_ContCircleOut = new HObject(), ho_ContoursUnion = new HObject(), ho_RegionS = new HObject(), ho_ContCircleIn = new HObject();
        HObject ho_Contour1 = new HObject(), ho_ContoursUnion1 = new HObject(), ho_RegionS1 = new HObject();
        HObject ho_R = new HObject(), ho_RegionD = new HObject(), ho_RegionS01 = new HObject(), ho_RegionDifference0 = new HObject();
        HObject ho_R0 = new HObject(), ho_RegionD0 = new HObject(), ho_ContCircleIn1 = new HObject(), ho_Contour01 = new HObject(), ho_ContoursUnion01 = new HObject();
        HObject ho_ContCircleOut1 = new HObject(), ho_Contour0 = new HObject(), ho_ContoursUnion0 = new HObject(), ho_RegionS0 = new HObject();
        HObject ho_RegionDifference_2 = new HObject(), ho_RegionDifference0_2 = new HObject();
        HObject ho_g1Reduced_2 = new HObject(), ho_g3Reduced_2 = new HObject(), ho_g2Reduced_2 = new HObject(), ho_g4Reduced_2 = new HObject();
        HObject ho_GlueQ1_2 = new HObject(), ho_GlueQ2_2 = new HObject(), ho_GlueQ3_2 = new HObject(), ho_GlueQ4_2 = new HObject();
        HObject ho_GlueH1_2 = new HObject(), ho_GlueH2_2 = new HObject(), ho_GlueH3_2 = new HObject(), ho_GlueH4_2 = new HObject();
        HObject ho_g1Grey_2 = new HObject(), ho_g3Grey_2 = new HObject(), ho_g2Grey_2 = new HObject(), ho_g4Grey_2 = new HObject();


        bool IsGlueColorChecked = false;

        bool gOutCh = false, CoatCh = false, HCoatCh = false; string gOutMode = "0"; double txtAimR = 0.0, txtOutR = 0.0, txtOutR2 = 0.0; //, txtOutRp = 0.0;

        HTuple hv_GlueOutAimR = new HTuple(), hv_GlueOutCheckR = new HTuple(), hv_GlueOutCheckR2 = new HTuple(), hv_GlueOutgray = new HTuple();
        HTuple hv_GlueOutArea = new HTuple(), hv_GlueOutRow = new HTuple(), hv_GlueOutCol = new HTuple();
        HTuple hv_goWidth = new HTuple();
        HObject ho_GlueOutCir1 = new HObject(), ho_GlueOutCir2 = new HObject(), ho_GlueOutDiff = new HObject();
        HObject ho_GlueOutReduced = new HObject(), ho_GlueOutRegion = new HObject(), ho_GlueOutFillup = new HObject(), ho_GlueOutFillup2 = new HObject();
        double Rearradius = 5.90;

        HObject ho_CutRegion10 = new HObject(), ho_ImageReducedI = new HObject(), ho_CutRegion20 = new HObject(), ho_ImageReducedO = new HObject();
        HObject ho_GlueUnion = new HObject(), ho_GrayDiff = new HObject(), ho_GrayDiffSelect = new HObject();
        HObject ho_GrayDiffSelectIn = new HObject(), ho_GrayDiffSelectOut = new HObject();
        HTuple hv_diffIArea = new HTuple(), hv_diffOArea = new HTuple();
        HObject ho_gGreyUnion = new HObject(), ho_BinImage = new HObject(), ho_ContourIn = new HObject(), ho_ContourOut = new HObject();
        HTuple hv_RowIn = new HTuple(), hv_ColumnIn = new HTuple(), hv_RowOut = new HTuple(), hv_ColumnOut = new HTuple();
        HTuple hv_Distance = new HTuple(), hv_Max = new HTuple(), hv_Length = new HTuple(), hv_k_m = new HTuple(), hv_m = new HTuple();
        HTuple hv_SpaceDis = new HTuple();
        HObject ho_RInCir = new HObject(), ho_ROutCir = new HObject();
        HTuple hv_RowInCenter = new HTuple(), hv_ColInCenter = new HTuple(), hv_RadiusInCenter = new HTuple();
        HTuple hv_RowOutCenter = new HTuple(), hv_ColOutCenter = new HTuple(), hv_RadiusOutCenter = new HTuple();
        HTuple hv_CoatRRadius = new HTuple(), hv_CoatRWidth = new HTuple(), hv_Coattrans = new HTuple(), hv_Coatgray = new HTuple();
        HTuple hv_HoleRRadius = new HTuple(), hv_HoleRWidth = new HTuple(), hv_Holetrans = new HTuple(), hv_Holegray = new HTuple();
        HTuple dishc = new HTuple(); HObject ho_HoleCircle = new HObject();
        double CoatRmin = 0, CoatRmax = 0, CoatOffset = 0.0, Lenspix = 0, hx = 0, hy = 0, cx = 0, cy = 0, dmax = 0, dmin = 0;
        HTuple hv_HCoatRRadius = new HTuple(), hv_HCoatRWidth = new HTuple(), hv_HCoattrans = new HTuple(), hv_HCoatgray = new HTuple();
        HTuple hv_HHoleRRadius = new HTuple(), hv_HHoleRWidth = new HTuple(), hv_HHoletrans = new HTuple(), hv_HHolegray = new HTuple();
        HTuple Hdishc = new HTuple(); HObject ho_HHoleCircle = new HObject();
        double HCoatRmin = 0, HCoatRmax = 0, HCoatOffset = 0.0, HLensAimR = 0, HLenspix = 0, Hhx = 0, Hhy = 0, Hcx = 0, Hcy = 0, Hdmax = 0, Hdmin = 0;

        HTuple hv_AddDeg = new HTuple(), hv_AddRegionDeg = new HTuple(), hv_AddDegPlus = new HTuple();
        HObject ho_AddRegion1 = new HObject(), ho_AddRegion2 = new HObject();
        HObject ho_AddConRegion1 = new HObject(), ho_AddConRegion2 = new HObject();
        HObject ho_AR11 = new HObject(), ho_AR12 = new HObject(), ho_AR21 = new HObject(), ho_AR22 = new HObject();
        HObject ho_AddContour11 = new HObject(), ho_AddContour12 = new HObject();
        HObject ho_AddContour21 = new HObject(), ho_AddContour22 = new HObject();
        HObject ho_Line1 = new HObject(), ho_Line2 = new HObject();
        HObject ho_AddShowRegion1 = new HObject(), ho_AddShowRegion2 = new HObject();
        HTuple hv_AddArea1 = new HTuple(), hv_AddRow1 = new HTuple(), hv_AddColumn1 = new HTuple();
        HTuple hv_AddArea2 = new HTuple(), hv_AddRow2 = new HTuple(), hv_AddColumn2 = new HTuple();
        HTuple hv_DisMin1 = new HTuple(), hv_DisMin11Min = new HTuple(), hv_DisMin11Max = new HTuple(), hv_DisMin12Min = new HTuple(), hv_DisMin12Max = new HTuple();
        HTuple hv_DisMin2 = new HTuple(), hv_DisMin21Min = new HTuple(), hv_DisMin21Max = new HTuple(), hv_DisMin22Min = new HTuple(), hv_DisMin22Max = new HTuple();
        HTuple hv_Add1Row1 = new HTuple(), hv_Add1Col1 = new HTuple(), hv_Add1Row2 = new HTuple(), hv_Add1Col2 = new HTuple();
        HTuple hv_Add2Row1 = new HTuple(), hv_Add2Col1 = new HTuple(), hv_Add2Row2 = new HTuple(), hv_Add2Col2 = new HTuple();
        PointF a11, a12, b11, b12, a21, a22, b21, b22; bool DisAddCh = false; double DisMin = 0.0, DisMax = 0.0;
        #endregion
        #region 辅助找角度变量
        bool addFCT = false; int Widmax = 30, Widmin = 0, ALmax = 200, ALmin = 60;
        int ARegionDis = 0, ARegionLen1 = 0, ARegionLen2 = 0, ARegionTh = 0;
        int PAreaMin = 0; int Deg4anglePlus = 45; int Deg4angleDis = 300; int Deg4AngleIntersection = 0;
        int MarkCount = 1, MarkRMin = 10;
        bool GlueBreakch = true; bool DegLChecked = false; bool Deg3RChecked = false;
        bool Mode2GrayChecked = true; bool MarkDegChecked = false;
        HTuple hv_deg3shift = new HTuple(), hv_deg3dis = new HTuple();
        HTuple hv_deg3len1 = new HTuple(), hv_deg3len2 = new HTuple();
        HTuple hv_deg3b2w = new HTuple(), hv_deg3w2b = new HTuple();
        HTuple hv_deg31area = new HTuple(), hv_deg32area = new HTuple();
        HTuple hv_deg31row = new HTuple(), hv_deg32row = new HTuple();
        HTuple hv_deg31col = new HTuple(), hv_deg32col = new HTuple();
        HTuple hv_deg3row = new HTuple(), hv_deg3col = new HTuple();
        HObject ho_deg3Region1 = new HObject(), ho_deg3Region2 = new HObject();
        #region Mark变量
        HTuple hv_MarkRow = new HTuple(), hv_MarkColumn = new HTuple(), hv_MarkRadius = new HTuple();
        HTuple hv_MarkRow1 = new HTuple(), hv_MarkColumn1 = new HTuple(), hv_MarkRadius1 = new HTuple();
        HTuple hv_MarkRow2 = new HTuple(), hv_MarkColumn2 = new HTuple(), hv_MarkRadius2 = new HTuple();
        HTuple hv_MarkRow3 = new HTuple(), hv_MarkColumn3 = new HTuple(), hv_MarkRadius3 = new HTuple();
        HTuple hv_MarkRow4 = new HTuple(), hv_MarkColumn4 = new HTuple(), hv_MarkRadius4 = new HTuple();
        HTuple hv_NumBalls1 = new HTuple(), hv_Diameter = new HTuple(), hv_meanDiameter = new HTuple();
        HTuple hv_NumBalls2 = new HTuple(), hv_NumBalls3 = new HTuple(), hv_NumBalls4 = new HTuple();
        HTuple hv_MarkRowmax = new HTuple(), hv_MarkColumnmax = new HTuple(), hv_MarkDistancemax = new HTuple();
        HTuple hv_MarkDistance1 = new HTuple(), hv_MarkDistance2 = new HTuple(), hv_MarkDistance3 = new HTuple();
        HTuple hv_MarkDistance4 = new HTuple(); HTuple hv_markgray1 = 1, hv_markgray2 = 128;
        HObject ho_Wires = new HObject(), ho_WiresFilled = new HObject();
        HObject ho_Balls = new HObject(), ho_SingleBalls = new HObject();
        HObject ho_IntermediateBalls = new HObject(), ho_FinalBalls = new HObject();
        #endregion
        #endregion
        #region SqPara
        HObject ho_FModelRegion = new HObject(), ho_FModelImage = new HObject(), ho_FModelContours = new HObject();
        HObject ho_ShowContours = new HObject(), ho_ShowContoursRegion = new HObject();
        HObject ho_RectangleIR = new HObject(), ho_ImageReducedIR = new HObject(), ho_SqRegion = new HObject();
        HObject ho_RegionFill = new HObject(), ho_SqContours = new HObject(), ho_Rectangle1 = new HObject();
        HObject ho_Contours = new HObject();

        HTuple hv_FModelID = new HTuple(), Fhv_Area = new HTuple(), hv_FRow = new HTuple(), hv_FCol = new HTuple();
        HTuple hv_HomMat2D = new HTuple();
        HTuple hv_IRtransition = "positive", hv_IRTH = 10, hv_NumberTh = new HTuple(), hv_AreaMax = new HTuple();
        HTuple hv_Select = "last";
        HTuple hv_AreaIR = new HTuple(), hv_RowIR = new HTuple(), hv_ColumnIR = new HTuple();
        HTuple hv_RectangleIndices = new HTuple(), hv_F2DRow = new HTuple(), hv_F2DColumn = new HTuple();
        HTuple hv_IRWidth = 55, hv_IRdis = 10, hv_FRectangleParameter = new HTuple(), hv_FDeg = new HTuple();
        HTuple hv_RowFound = new HTuple(), hv_ColFound = new HTuple(), hv_AngleFound = new HTuple(), hv_ScaleFound = new HTuple(), hv_ScoreFound = new HTuple();
        HTuple hv_Row = new HTuple(), hv_Column = new HTuple(), hv_Row1 = new HTuple(), hv_Column1 = new HTuple();
        HTuple hv_RowCh = new HTuple(), hv_ColumnCh = new HTuple(), hv_angle = new HTuple(), hv_length1 = new HTuple(), hv_length2 = new HTuple();
        HTuple hv_UsedRow = new HTuple(), hv_UsedColumn = new HTuple();
        double RectangleLength1_FigureShape = 0,RectangleLength2_FigureShape = 0;
        #endregion
        #region Barcode halcon变量
        HObject ho_BarImage = null; //, ho_BarImageResult = null;
        HTuple hv_BarDataCodeHandle = new HTuple();
        HTuple hv_BarWindowHandle = new HTuple(), hv_BarWidth = new HTuple();
        HTuple hv_BarHeight = new HTuple(), hv_BarT1 = new HTuple(), hv_BarRow1 = new HTuple();
        HTuple hv_BarColumn1 = new HTuple(), hv_BarRow2 = new HTuple(), hv_BarColumn2 = new HTuple();
        HTuple hv_BarResultHandles = new HTuple(), hv_BarDecodedDataStrings = new HTuple();
        HTuple hv_BarResultValues = new HTuple(), hv_BarI = new HTuple();
        HTuple hv_BarBarcode = new HTuple(), hv_BarT2 = new HTuple(), hv_BarTime = new HTuple();
        #endregion
        //catch first circle center 20200522
        public void CatchFirstCircleCenter(HObject ho_ImageRun, out HTuple hv_Row2, out HTuple hv_Column2)
        {
            HObject ho_Border1 = null, ho_ContoursSplit1 = null, ho_SelectedXLD1 = null;
            HObject ho_selectContour = null, ho_ObjectSelectedM1 = null, ho_ObjectSelectedN1 = null;

            HOperatorSet.GenEmptyObj(out ho_Border1);
            HOperatorSet.GenEmptyObj(out ho_ContoursSplit1);
            HOperatorSet.GenEmptyObj(out ho_SelectedXLD1);
            HOperatorSet.GenEmptyObj(out ho_selectContour);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelectedM1);
            HOperatorSet.GenEmptyObj(out ho_ObjectSelectedN1);
            try
            {

                ho_Border1.Dispose();
                HOperatorSet.ThresholdSubPix(ho_ImageRun, out ho_Border1, binBvi);
                ho_ContoursSplit1.Dispose();
                HOperatorSet.SegmentContoursXld(ho_Border1, out ho_ContoursSplit1, "lines_circles", 5, 4, 2);
                ho_SelectedXLD1.Dispose();
                HOperatorSet.SelectShapeXld(ho_ContoursSplit1, out ho_SelectedXLD1, "contlength", "and", 50, 99999);
                HOperatorSet.CountObj(ho_SelectedXLD1, out hv_Number1);
                HOperatorSet.GenEmptyObj(out ho_selectCir);
                for (int i = 1; i <= (int)hv_Number1; i++)
                {
                    ho_selectContour.Dispose();
                    HOperatorSet.SelectObj(ho_SelectedXLD1, out ho_selectContour, i);
                    HTuple hv_attrib;
                    HOperatorSet.GetContourGlobalAttribXld(ho_selectContour, "cont_approx", out hv_attrib);
                    if (hv_attrib.D == 1)
                        HOperatorSet.ConcatObj(ho_selectCir, ho_selectContour, out ho_selectCir);
                }
                HOperatorSet.CountObj(ho_selectCir, out hv_Number1);
                ho_ObjectSelectedM1.Dispose();
                HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedM1, 1);
                HOperatorSet.LengthXld(ho_ObjectSelectedM1, out hv_LengthMax1);
                HTuple hv_max_L = 0.0;
                hv_max_L = hv_LengthMax1.Clone();
                for (int i = 1; i < (int)hv_Number1 - 1; i++)
                {
                    ho_ObjectSelectedN1.Dispose();
                    HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedN1, i);
                    HOperatorSet.LengthXld(ho_ObjectSelectedN1, out hv_Length1);
                    if ((int)(new HTuple(hv_Length1.TupleGreater(hv_max_L))) != 0)
                    {
                        hv_max_L = hv_Length1.Clone();
                        ho_ObjectSelectedM1.Dispose();
                        HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedM1, i);
                    }
                }
                HOperatorSet.FitCircleContourXld(ho_ObjectSelectedM1, "algebraic", -1, 0, 0, 3, 2,
                    out hv_Row2, out hv_Column2, out hv_Radius, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
            }
            catch
            {
                hv_Row2 = 0;
                hv_Column2 = 0;
            }
            finally
            {
                ho_Border1.Dispose();
                ho_ContoursSplit1.Dispose();
                ho_SelectedXLD1.Dispose();
                ho_selectContour.Dispose();
                ho_ObjectSelectedM1.Dispose();
                ho_ObjectSelectedN1.Dispose();
            }
        }

        public void ReadParaIde(string CCDName)
        {
            string name = "";
            if (CCDName != "PCCD1" & CCDName != "QCCD")
                name = CCDName.Substring(0, 6);
            try
            {
                //圓/矩
                FShape = iniFile.Read(CCDName, "FigureShape", FrmMain.propath); //"Circle" "Square"
                if (FShape == "")
                    MessageBox.Show(CCDName + "参数未设置！");
                if(FShape=="Square")
                {
                    ReadSqPara(CCDName);
                }
                #region
                #region  找圆心Mode2
                string adeg = iniFile.Read(CCDName, "AngleStatus", FrmMain.propath);  //剪口
                if (name == "A1CCD1")
                    isa11deg = ((adeg == "true") ? true : false);
                if (name == "A2CCD1")
                    isa21deg = ((adeg == "true") ? true : false);
                if (CCDName == "GCCD2-1" || CCDName == "GCCD2-2"|| CCDName == "GCCD2-3" || CCDName == "GCCD2-4")
                {
                    string astatus = iniFile.Read(CCDName, "GQAngleStatus", FrmMain.propath);
                    GQCutIsChecked = ((astatus == "true") ? true : false);
                    astatus = iniFile.Read(CCDName, "GHAngleStatus", FrmMain.propath);
                    GHCutIsChecked = ((astatus == "true") ? true : false);
                    Glue.Glue_Follow = bool.Parse(IniFile.Read(CCDName, "Glue_Follow", "false", FrmMain.propath));
                }
                else
                {
                    string astatus = IniFile.Read(CCDName, "AngleStatus","false", FrmMain.propath);  //剪口
                    CutIsChecked = ((astatus == "true") ? true : false);
                }
                string cirmode = IniFile.Read(CCDName, "CircleMode2", "1", FrmMain.propath);  //找圆Mode

                regionR = IniFile.Read(CCDName, "Mode2RegionRadius", "1", FrmMain.propath);
                if (regionR != "")
                {
                    RegionRadius = int.Parse(regionR);
                    binBvi = int.Parse(IniFile.Read(CCDName, "Mode2gray", "1", FrmMain.propath));
                    ringR = int.Parse(IniFile.Read(CCDName, "Mode2RingRadius", "1", FrmMain.propath));
                    ringWidth = int.Parse(IniFile.Read(CCDName, "Mode2UDRingWidth", "1", FrmMain.propath));
                    hv_transition = iniFile.Read(CCDName, "Transition", FrmMain.propath);
                    Prmin = double.Parse(IniFile.Read(CCDName, "ZoneRmin", "1", FrmMain.propath));
                    Prmax = double.Parse(IniFile.Read(CCDName, "ZoneRmax", "1", FrmMain.propath));
                    CXp = double.Parse(IniFile.Read(CCDName, "Mode2BaCenX+", "1", FrmMain.propath));
                    CXm = double.Parse(IniFile.Read(CCDName, "Mode2BaCenX-", "1", FrmMain.propath));
                    CYp = double.Parse(IniFile.Read(CCDName, "Mode2BaCenY+", "1", FrmMain.propath));
                    CYm = double.Parse(IniFile.Read(CCDName, "Mode2BaCenY-", "1", FrmMain.propath));
                    ringTh = int.Parse(IniFile.Read(CCDName, "Mode2UDRingThreshold","1", FrmMain.propath));
                }
                string grayc = iniFile.Read(CCDName, "GrayChecked", FrmMain.propath);
                Mode2GrayChecked = (grayc == "False" ? false : true);
                if (!Mode2GrayChecked)
                {
                    RingCrow = double.Parse(iniFile.Read(CCDName, "Mode2RingCRow", FrmMain.propath));
                    RingCcolumn = double.Parse(iniFile.Read(CCDName, "Mode2RingCColumn", FrmMain.propath));
                }
                #endregion
                #region 找角度
                if (CutIsChecked || ((CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4") & (GQCutIsChecked || GHCutIsChecked))
                    || (name == "A1CCD1" & isa11deg) || (name == "A2CCD1" & isa21deg))
                {
                    AMode = iniFile.Read(CCDName, "AngleMode", FrmMain.propath);
                    if (AMode == "1")
                    {
                        #region Mode1
                        hv_Mode1RowIRLs = double.Parse(iniFile.Read(CCDName, "Mode1DegLineRow1", FrmMain.propath));
                        hv_Mode1ColIRLs = double.Parse(iniFile.Read(CCDName, "Mode1DegLineCol1", FrmMain.propath));
                        hv_Mode1RowIRLe = double.Parse(iniFile.Read(CCDName, "Mode1DegLineRow2", FrmMain.propath));
                        hv_Mode1ColIRLe = double.Parse(iniFile.Read(CCDName, "Mode1DegLineCol2", FrmMain.propath));
                        hv_Mode1DegLth = int.Parse(iniFile.Read(CCDName, "Mode1DegLineGray", FrmMain.propath));
                        hv_Mode1DegLWidth = int.Parse(iniFile.Read(CCDName, "Mode1DegLineWidth", FrmMain.propath));
                        string m1d = iniFile.Read(CCDName, "Mode1Deg+", FrmMain.propath);
                        if (m1d != "")
                        {
                            DegP = double.Parse(m1d);
                            DegM = double.Parse(iniFile.Read(CCDName, "Mode1Deg-", FrmMain.propath));
                        }
                        #endregion
                    }
                    if (AMode == "2")
                    {
                        #region Mode2
                        string ar = iniFile.Read(CCDName, "AngleRmin", FrmMain.propath);
                        if (ar != "")
                        {
                            RadiusMin = int.Parse(ar);
                            RadiusMax = int.Parse(iniFile.Read(CCDName, "AngleRmax", FrmMain.propath));
                            binBW = int.Parse(iniFile.Read(CCDName, "AnglebinB2W", FrmMain.propath));
                            binWB = int.Parse(iniFile.Read(CCDName, "AnglebinW2B", FrmMain.propath));
                            Cutmin = int.Parse(iniFile.Read(CCDName, "AngleAreamin", FrmMain.propath));
                            Cutmax = int.Parse(iniFile.Read(CCDName, "AngleAreamax", FrmMain.propath));
                            DegP = double.Parse(iniFile.Read(CCDName, "BaDeg+", FrmMain.propath));
                            DegM = double.Parse(iniFile.Read(CCDName, "BaDeg-", FrmMain.propath));
                            string AddStatus = iniFile.Read(CCDName, "Mode2Add", FrmMain.propath);
                            addFCT = ((AddStatus == "true") ? true : false);
                            string lmin = iniFile.Read(CCDName, "Mode2Widthmin", FrmMain.propath);
                            Widmin = int.Parse((lmin != "") ? lmin : "0");
                            string lmax = iniFile.Read(CCDName, "Mode2Widthmax", FrmMain.propath);
                            Widmax = int.Parse((lmax != "") ? lmax : "30");
                            string LLmin = iniFile.Read(CCDName, "Mode2Lengthmin", FrmMain.propath);
                            ALmin = int.Parse((LLmin != "") ? LLmin : "60");
                            string LLmax = iniFile.Read(CCDName, "Mode2Lengthmax", FrmMain.propath);
                            ALmax = int.Parse((LLmax != "") ? LLmax : "200");
                        }
                        #endregion
                    }
                    if (AMode == "3")
                    {
                        #region Mode3
                        string ar = iniFile.Read(CCDName, "AngleModeRmin", FrmMain.propath);
                        RadiusMin = int.Parse((ar != "") ? ar : "1");
                        ar = iniFile.Read(CCDName, "AngleModeRmax", FrmMain.propath);
                        RadiusMax = int.Parse((ar != "") ? ar : "200");
                        #endregion
                    }
                    if (AMode == "4")
                    {
                        #region Mode4
                        string ar = iniFile.Read(CCDName, "Mode4AngleRmin", FrmMain.propath);
                        if (ar != "")
                        {
                            RadiusMin = int.Parse(ar);
                            RadiusMax = int.Parse(iniFile.Read(CCDName, "Mode4AngleRmax", FrmMain.propath));
                            binBW = int.Parse(iniFile.Read(CCDName, "Mode4AnglebinB2W", FrmMain.propath));
                            binWB = int.Parse(iniFile.Read(CCDName, "Mode4AnglebinW2B", FrmMain.propath));
                            Cutmin = int.Parse(iniFile.Read(CCDName, "Mode4AngleAreamin", FrmMain.propath));
                            Cutmax = int.Parse(iniFile.Read(CCDName, "Mode4AngleAreamax", FrmMain.propath));
                            DegP = double.Parse(iniFile.Read(CCDName, "Mode4BaDeg+", FrmMain.propath));
                            DegM = double.Parse(iniFile.Read(CCDName, "Mode4BaDeg-", FrmMain.propath));
                        }
                        #endregion
                    }
                    if (AMode == "5")
                    {
                        #region Mode5
                        string adis = iniFile.Read(CCDName, "ARegionCenDistance", FrmMain.propath);
                        if (adis != "")
                        {
                            ARegionDis = int.Parse(adis);
                            ARegionLen1 = int.Parse(iniFile.Read(CCDName, "ARegionLength", FrmMain.propath));
                            ARegionLen2 = int.Parse(iniFile.Read(CCDName, "ARegionWidth", FrmMain.propath));
                            ARegionTh = int.Parse(iniFile.Read(CCDName, "ARegionDryThreshold", FrmMain.propath));
                            DegP = double.Parse(iniFile.Read(CCDName, "ARegionDeg+", FrmMain.propath));
                            DegM = double.Parse(iniFile.Read(CCDName, "ARegionDeg-", FrmMain.propath));
                            string pam = iniFile.Read(CCDName, "PAreaMin", FrmMain.propath);
                            if (pam == "")
                                pam = "200";
                            PAreaMin = int.Parse(pam);
                        }
                        #endregion
                    }
                    if (AMode == "6")
                    {
                        #region Mode6
                        halcon.CircleMeasureSelect = IniFile.Read(CCDName, "CircleMeasureSelect", "last", FrmMain.propath);
                        halcon.CircleRadius = int.Parse(IniFile.Read(CCDName, "CircleRadius", "1", FrmMain.propath));
                        halcon.CircleLength = int.Parse(IniFile.Read(CCDName, "CircleLength", "1", FrmMain.propath));
                        halcon.CircleMeasureTransition = IniFile.Read(CCDName, "CircleMeasureTransition", "negative", FrmMain.propath);
                        halcon.CircleMeasureThreshold = int.Parse(IniFile.Read(CCDName, "CircleMeasureThreshold", "1", FrmMain.propath));
                        #endregion
                    }
                    #region 辅助Mode3
                    string cbd3 = iniFile.Read(CCDName, "Deg3RChecked", FrmMain.propath);
                    Deg3RChecked = (cbd3 == "True" ? true : false);
                    string deg3d = iniFile.Read(CCDName, "Deg3RDegree", FrmMain.propath);
                    if (deg3d != "")
                    {
                        hv_deg3shift = int.Parse(deg3d);
                        hv_deg3dis = int.Parse(iniFile.Read(CCDName, "Deg3RSetDis", FrmMain.propath));
                        hv_deg3len1 = int.Parse(iniFile.Read(CCDName, "Deg3RLength", FrmMain.propath));
                        hv_deg3len2 = int.Parse(iniFile.Read(CCDName, "Deg3RWidth", FrmMain.propath));
                        hv_deg3b2w = int.Parse(iniFile.Read(CCDName, "Deg3RgrayB2W", FrmMain.propath));
                        hv_deg3w2b = int.Parse(iniFile.Read(CCDName, "Deg3RgrayW2B", FrmMain.propath));
                    }
                    #endregion
                    #region DegLine
                    string dlc = iniFile.Read(CCDName, "DegLineChecked", FrmMain.propath);
                    DegLChecked = (dlc == "True" ? true : false);
                    if (DegLChecked)
                    {
                        hv_RowIRLs = double.Parse(iniFile.Read(CCDName, "DegLineRow1", FrmMain.propath));
                        hv_ColIRLs = double.Parse(iniFile.Read(CCDName, "DegLineCol1", FrmMain.propath));
                        hv_RowIRLe = double.Parse(iniFile.Read(CCDName, "DegLineRow2", FrmMain.propath));
                        hv_ColIRLe = double.Parse(iniFile.Read(CCDName, "DegLineCol2", FrmMain.propath));
                        hv_DegLth = int.Parse(iniFile.Read(CCDName, "DegLineGray", FrmMain.propath));
                        hv_DegLWidth = int.Parse(iniFile.Read(CCDName, "DegLineWidth", FrmMain.propath));
                    }
                    #endregion
                    #region 辅助4
                    string cbmark = iniFile.Read(CCDName, "MarkRChecked", FrmMain.propath);
                    MarkDegChecked = (cbmark == "True" ? true : false);
                    string marksh = iniFile.Read(CCDName, "MarkRDegree", FrmMain.propath);
                    if (marksh != "")
                    {
                        hv_markDegPlus = int.Parse(marksh);
                        hv_markDistance = int.Parse(iniFile.Read(CCDName, "MarkRSetDis", FrmMain.propath));
                        hv_marklength1 = int.Parse(iniFile.Read(CCDName, "MarkRLength", FrmMain.propath));
                        hv_marklength2 = int.Parse(iniFile.Read(CCDName, "MarkRWidth", FrmMain.propath));
                        MarkCount = int.Parse(iniFile.Read(CCDName, "MarkRCount", FrmMain.propath));
                        MarkRMin = int.Parse(iniFile.Read(CCDName, "MarkRrMin", FrmMain.propath));
                        hv_markgray1 = int.Parse(iniFile.Read(CCDName, "MarkRgray1", FrmMain.propath));
                        hv_markgray2 = int.Parse(iniFile.Read(CCDName, "MarkRgray2", FrmMain.propath));
                    }
                    #endregion
                    #region 四点
                    string d4 = iniFile.Read(CCDName, "Deg4Checked", FrmMain.propath);
                    GCCD2.Deg4Checked = (d4 == "True" ? true : false);
                    if (GCCD2.Deg4Checked)
                    {
                        Deg4anglePlus = int.Parse(iniFile.Read(CCDName, "Deg4AnglePlus", FrmMain.propath));
                        Deg4angleDis = int.Parse(iniFile.Read(CCDName, "Deg4AngleDis", FrmMain.propath));
                        Deg4AngleIntersection = int.Parse(IniFile.Read(CCDName, "Deg4AngleIntersection", "0", FrmMain.propath));
                    }
                    #endregion
                }
                #endregion
                #region 胶点辨识
                string gcd = iniFile.Read(CCDName, "GlueChecked", FrmMain.propath);
                gCheck = ((gcd == "True") ? true : false);
                if (gCheck)
                {
                    gMode = iniFile.Read(CCDName, "GlueMode", FrmMain.propath);
                    if (gMode == "0")
                    {
                        string fep = iniFile.Read(CCDName, "GlueFDegPlue", FrmMain.propath);
                        hv_FDegPlue = int.Parse((fep != "") ? fep : "45");
                        hv_grayDistance = int.Parse(iniFile.Read(CCDName, "GlueCenDistance", FrmMain.propath));
                        hv_g1length1 = int.Parse(iniFile.Read(CCDName, "GlueLength", FrmMain.propath));
                        hv_g1length2 = int.Parse(iniFile.Read(CCDName, "GlueWidth", FrmMain.propath));
                    }
                    if (gMode == "1")
                    {
                        MidCirRadius = int.Parse(iniFile.Read(CCDName, "GlueRingRadius", FrmMain.propath));
                        RegionWidth = int.Parse(iniFile.Read(CCDName, "GlueRingWidth", FrmMain.propath));
                        StartAngle = int.Parse(iniFile.Read(CCDName, "GlueStartA", FrmMain.propath));
                        EndAngle = int.Parse(iniFile.Read(CCDName, "GlueEndA", FrmMain.propath));
                        string gblc = iniFile.Read(CCDName, "GlueEdgeChecked", FrmMain.propath);
                        gblimitCheck = ((gblc == "True") ? true : false);
                        string gblin = iniFile.Read(CCDName, "GlueEdgeMin", FrmMain.propath);
                        if (gblin != "" && gblimitCheck)
                        {
                            GERadiusMin = int.Parse(gblin);
                            GERadiusMax = int.Parse(iniFile.Read(CCDName, "GlueEdgeMax", FrmMain.propath));
                            limitAreaminIn = int.Parse(iniFile.Read(CCDName, "GlueEdgeInAreaMax", FrmMain.propath));
                            limitAreaminOut = int.Parse(iniFile.Read(CCDName, "GlueEdgeOutAreaMax", FrmMain.propath));
                        }
                    }
                    glueGray = int.Parse(iniFile.Read(CCDName, "GlueGray", FrmMain.propath));
                    permin = int.Parse(iniFile.Read(CCDName, "GlueAreaMin", FrmMain.propath));
                    string pmax = iniFile.Read(CCDName, "GlueAreaMax", FrmMain.propath);
                    if (pmax == "")
                        permax = permin + 100000;
                    else
                        permax = int.Parse(pmax);
                    string gbcolor = iniFile.Read(CCDName, "GlueColorChecked", FrmMain.propath);
                    IsGlueColorChecked = ((gbcolor == "True") ? true : false);
                    Glue.WidthIsChecked = ((iniFile.Read(CCDName, "GlueWidthIschecked", FrmMain.propath) == "True") ? true : false);
                    string rr = iniFile.Read(CCDName, "GlueWidthRradius", FrmMain.propath);
                    Rearradius = double.Parse((rr != "") ? rr : "0");
                    string wm = iniFile.Read(CCDName, "GlueWidthMax", FrmMain.propath);
                    Glue.WidthMaxSet = double.Parse((wm != "") ? wm : "0");
                    Glue.InOutIsChecked = ((iniFile.Read(CCDName, "GlueInOutRadius", FrmMain.propath) == "True") ? true : false);
                    string gim = iniFile.Read(CCDName, "GlueInRadiusMin", FrmMain.propath);
                    Glue.InRMin = double.Parse((gim != "") ? gim : "0");
                    string gom = iniFile.Read(CCDName, "GlueOutRadiusMax", FrmMain.propath);
                    Glue.OutRMax = double.Parse((gom != "") ? gom : "0");
                    GlueBreakch= bool.Parse(IniFile.Read(CCDName, "GlueBreakChecked","false", FrmMain.propath));
                   

                    //乃元加
                    Glue.GlueAngleRatio = double.Parse(IniFile.Read(CCDName, "GlueAngleRatio", "0", FrmMain.propath));
                    Glue.GlueAngleRatio_2 = double.Parse(IniFile.Read(CCDName, "GlueAngleRatio_2", "0", FrmMain.propath));
                    //Glue.Glue_Circle_2 = bool.Parse(IniFile.Read(CCDName, "Glue_Circle_2", "false", FrmMain.propath));
                    //默認開啟
                    Glue.Glue_Circle_2 = bool.Parse("true");
                    Glue.Glue_Circle_OuterRadius_2 = int.Parse(IniFile.Read(CCDName, "Glue_Circle_OuterRadius_2", "1", FrmMain.propath));
                    Glue.Glue_Circle_InnerRadius_2 = int.Parse(IniFile.Read(CCDName, "Glue_Circle_InnerRadius_2", "1", FrmMain.propath));
                    Glue.Glue_Circle_StartAngle_2 = int.Parse(IniFile.Read(CCDName, "Glue_Circle_StartAngle_2", "0", FrmMain.propath));
                    Glue.Glue_Circle_EndAngle_2 = int.Parse(IniFile.Read(CCDName, "Glue_Circle_EndAngle_2", "180", FrmMain.propath));
                    Glue.Glue_Circle_Gray_2 = int.Parse(IniFile.Read(CCDName, "Glue_Circle_Gray_2", "0", FrmMain.propath));
                    //膠水內外徑補償
                    Glue.Offset_InnerRadius = double.Parse(IniFile.Read(CCDName, "Offset_InnerRadius", "0", FrmMain.propath));
                    Glue.Offset_OuterRadius = double.Parse(IniFile.Read(CCDName, "Offset_OuterRadius", "0", FrmMain.propath));
                }
                #endregion
                #region 外观检测
                gOutMode = iniFile.Read(CCDName, "GlueCIMode", FrmMain.propath);
                string gcic = iniFile.Read(CCDName, "GlueCIChecked", FrmMain.propath);
                gOutCh = ((gcic == "True") ? true : false);
                string cc = iniFile.Read(CCDName, "CoatCIChecked", FrmMain.propath);
                CoatCh = (cc == "True" ? true : false);
                if (gOutCh & gOutMode == "1")
                {
                    txtAimR = double.Parse(iniFile.Read(CCDName, "GlueCIAimCirRadius", FrmMain.propath));
                    txtOutR = double.Parse(iniFile.Read(CCDName, "GlueCIOutCirRadius", FrmMain.propath));
                    string r2c = iniFile.Read(CCDName, "GlueCIOutCir2RChecked", FrmMain.propath);
                    Glue.Cir2AVIchecked = (r2c == "True" ? true : false);
                    string c2r = iniFile.Read(CCDName, "GlueCIOutCir2Radius", FrmMain.propath);
                    txtOutR2 = double.Parse(c2r != "" ? c2r : "0");
                    FrmVisionSet.txtOutP = double.Parse(iniFile.Read(CCDName, "GlueCIOutCirRadiusPlus", FrmMain.propath));
                    hv_goWidth = int.Parse(iniFile.Read(CCDName, "GlueCIOutWidth", FrmMain.propath));
                    hv_GlueOutgray = int.Parse(iniFile.Read(CCDName, "GlueCIOutGray", FrmMain.propath));
                    Glue.GlueOutAreaMax = double.Parse(iniFile.Read(CCDName, "GlueCIOutAreamax", FrmMain.propath));
                    if (CoatCh)
                    {
                        hv_CoatRRadius = int.Parse(iniFile.Read(CCDName, "CoatRingRadius", FrmMain.propath));
                        hv_CoatRWidth = int.Parse(iniFile.Read(CCDName, "CoatRingWidth", FrmMain.propath));
                        hv_Coattrans = (HTuple)iniFile.Read(CCDName, "CoatTransition", FrmMain.propath);
                        CoatRmin = double.Parse(iniFile.Read(CCDName, "CoatRmin", FrmMain.propath));
                        string tcrm = iniFile.Read(CCDName, "CoatRmax", FrmMain.propath);
                        if (tcrm == "")
                        {
                            CoatRmax = 7.75;
                            iniFile.Write(CCDName, "CoatRmax", "7.75", FrmMain.propath);
                        }
                        else
                            CoatRmax = double.Parse(tcrm);
                        if (hv_Coattrans == "negative")
                            hv_Coatgray = int.Parse(iniFile.Read(CCDName, "CoatRingThreshold", FrmMain.propath));
                        if (hv_Coattrans == "positive")
                            hv_Coatgray = int.Parse(iniFile.Read(CCDName, "CoatRingThreshold", FrmMain.propath));

                        dmax = double.Parse(iniFile.Read(CCDName, "DiamMinMax", FrmMain.propath));
                        dmin = double.Parse(iniFile.Read(CCDName, "DiamMinMin", FrmMain.propath));
                        string bn = iniFile.Read(CCDName, "jBaseNum", FrmMain.propath);
                        Sys.NumBase = double.Parse((bn == "") ? "7.51" : bn);
                        if (bn == "")
                            iniFile.Write(CCDName, "jBaseNum", "7.51", FrmMain.propath);
                        string pn = iniFile.Read(CCDName, "jPlusNum", FrmMain.propath);
                        Sys.NumAdd = double.Parse((pn == "") ? "0.07" : pn);
                        if (pn == "")
                            iniFile.Write(CCDName, "jPlusNum", "0.07", FrmMain.propath);
                        string tofs = iniFile.Read(CCDName, "jallCoatOffset", FrmMain.propath);
                        if (tofs == "")
                            iniFile.Write(CCDName, "jallCoatOffset", "0.04", FrmMain.propath);
                        CoatOffset = double.Parse((tofs == "") ? "0.04" : tofs);
                    }
                }
                #region  Mode5自动时参数读取
                if (gOutMode == "5")
                {
                    Sign.isMode5 = true;
                    HCoatCh = false;
                    string SysPath = Sys.IniPath + "\\Mode5.ini";

                    if (CCDName == "A1CCD2-PickUp")
                    {
                        Mode5A1CCD2.OutRangeRadius = Convert.ToInt32(IniFile.Read(CCDName, "OutRangeRadius", "500", SysPath));
                        Mode5A1CCD2.InRangeRadius = Convert.ToInt32(IniFile.Read(CCDName, "InRangeRadius", "100", SysPath));
                        Mode5A1CCD2.Graythreshold = Convert.ToInt32(IniFile.Read(CCDName, "Graythreshold", "5", SysPath));
                        Mode5A1CCD2.MeasureThreshold = Convert.ToInt32(IniFile.Read(CCDName, "MeasureThreshold", "5", SysPath));
                        Mode5A1CCD2.DarkLightGray = Convert.ToInt32(IniFile.Read(CCDName, "DarkLightGray", "0", SysPath));
                        Mode5A1CCD2.DarkLightMeasure = Convert.ToInt32(IniFile.Read(CCDName, "DarkLightMeasure", "0", SysPath));
                        Mode5A1CCD2.MeasureLength1 = Convert.ToInt32(IniFile.Read(CCDName, "Length1Measure", "5", SysPath));
                        Mode5A1CCD2.MeasureLength2 = Convert.ToInt32(IniFile.Read(CCDName, "Length2Measure", "5", SysPath));
                        Mode5A1CCD2.FirstOrLast = Convert.ToInt32(IniFile.Read(CCDName, "FirstorLast", "0", SysPath));
                        Mode5A1CCD2.LimitUp = Convert.ToDouble(IniFile.Read(CCDName, "LimitUp", "3.82", SysPath));
                        Mode5A1CCD2.LimitDown = Convert.ToDouble(IniFile.Read(CCDName, "LimitDown", "3.79", SysPath));
                        Mode5A1CCD2.Offset = Convert.ToDouble(IniFile.Read(CCDName, "Offset", "0.00", SysPath));
                        Mode5A1CCD2.LimitUpGap = Convert.ToDouble(IniFile.Read(CCDName, "LimitUpGap", "7.66", SysPath));
                        Mode5A1CCD2.LimitDownGap = Convert.ToDouble(IniFile.Read(CCDName, "LimitDownGap", "7.55", SysPath));
                        Mode5A1CCD2.GapOffset = Convert.ToDouble(IniFile.Read(CCDName, "Gapoffset", "0.000", SysPath));
                        Mode5A1CCD2.AreaLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "AreaLimitUP", "10000", SysPath));
                        Mode5A1CCD2.AreaLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "AreaLimitDown", "1", SysPath));
                        Mode5A1CCD2.WidthLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "WidthLimitUp", "10000", SysPath));
                        Mode5A1CCD2.WidthLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "WidthLimitDown", "1", SysPath));
                        Mode5A1CCD2.HeightLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "HeightLimitUp", "10000", SysPath));
                        Mode5A1CCD2.HeightLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "HeightLimitDown", "1", SysPath));

                    }
                    if (CCDName == "A2CCD2-PickUp")
                    {
                        Mode5A2CCD2.OutRangeRadius = Convert.ToInt32(IniFile.Read(CCDName, "OutRangeRadius", "500", SysPath));
                        Mode5A2CCD2.InRangeRadius = Convert.ToInt32(IniFile.Read(CCDName, "InRangeRadius", "100", SysPath));
                        Mode5A2CCD2.Graythreshold = Convert.ToInt32(IniFile.Read(CCDName, "Graythreshold", "5", SysPath));
                        Mode5A2CCD2.MeasureThreshold = Convert.ToInt32(IniFile.Read(CCDName, "MeasureThreshold", "5", SysPath));
                        Mode5A2CCD2.DarkLightGray = Convert.ToInt32(IniFile.Read(CCDName, "DarkLightGray", "0", SysPath));
                        Mode5A2CCD2.DarkLightMeasure = Convert.ToInt32(IniFile.Read(CCDName, "DarkLightMeasure", "0", SysPath));
                        Mode5A2CCD2.MeasureLength1 = Convert.ToInt32(IniFile.Read(CCDName, "Length1Measure", "5", SysPath));
                        Mode5A2CCD2.MeasureLength2 = Convert.ToInt32(IniFile.Read(CCDName, "Length2Measure", "5", SysPath));
                        Mode5A2CCD2.FirstOrLast = Convert.ToInt32(IniFile.Read(CCDName, "FirstorLast", "0", SysPath));
                        Mode5A2CCD2.LimitUp = Convert.ToDouble(IniFile.Read(CCDName, "LimitUp", "3.82", SysPath));
                        Mode5A2CCD2.LimitDown = Convert.ToDouble(IniFile.Read(CCDName, "LimitDown", "3.79", SysPath));
                        Mode5A2CCD2.Offset = Convert.ToDouble(IniFile.Read(CCDName, "Offset", "0.00", SysPath));
                        Mode5A2CCD2.LimitUpGap = Convert.ToDouble(IniFile.Read(CCDName, "LimitUpGap", "7.66", SysPath));
                        Mode5A2CCD2.LimitDownGap = Convert.ToDouble(IniFile.Read(CCDName, "LimitDownGap", "7.55", SysPath));
                        Mode5A2CCD2.GapOffset = Convert.ToDouble(IniFile.Read(CCDName, "Gapoffset", "0.000", SysPath));
                        Mode5A2CCD2.AreaLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "AreaLimitUP", "10000", SysPath));
                        Mode5A2CCD2.AreaLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "AreaLimitDown", "1", SysPath));
                        Mode5A2CCD2.WidthLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "WidthLimitUp", "10000", SysPath));
                        Mode5A2CCD2.WidthLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "WidthLimitDown", "1", SysPath));
                        Mode5A2CCD2.HeightLimitUp = Convert.ToInt32(IniFile.Read(CCDName, "HeightLimitUp", "10000", SysPath));
                        Mode5A2CCD2.HeightLimitDown = Convert.ToInt32(IniFile.Read(CCDName, "HeightLimitDown", "1", SysPath));
                    }
                
              
                #endregion

                }
                //  A1CCD2 A2CCD2 PCCD2 外观检
                if (CCDName == "PCCD2-PickUp")
                    PCCD2.isPUAVI = ((iniFile.Read(CCDName, "PickUpAVI", FrmMain.propath) == "True") ? true : false);
                if (CCDName == "A1CCD2-PickUp")
                {
                    if (gOutMode == "5")
                        
                    {
                        Mode5A1CCD2.isMode5 = true;
                    }
                    else 
                    {
                        cc = iniFile.Read(CCDName, "HCoatCIChecked", FrmMain.propath);
                        HCoatCh = (cc == "True" ? true : false);
                        A1CCD2.HCoatCh1 = ((HCoatCh) ? true : false);
                        Mode5A1CCD2.isMode5 = false;
                    }
                }
                if (CCDName == "A2CCD2-PickUp")
                {
                    if (gOutMode == "5")
                    {
                        Mode5A2CCD2.isMode5 = true;
                    }
                    else
                    {
                        cc = iniFile.Read(CCDName, "HCoatCIChecked", FrmMain.propath);
                        HCoatCh = (cc == "True" ? true : false);
                        A2CCD2.HCoatCh2 = ((HCoatCh) ? true : false);
                        Mode5A2CCD2.isMode5 = false;
                    }
                }
                if (HCoatCh & gOutMode == "2")
                {
                    HLensAimR = double.Parse(iniFile.Read(CCDName, "LensAimR", FrmMain.propath));
                    hv_HHoleRRadius = int.Parse(iniFile.Read(CCDName, "HoleRingRadius", FrmMain.propath));
                    hv_HHoleRWidth = int.Parse(iniFile.Read(CCDName, "HoleRingWidth", FrmMain.propath));
                    hv_HHoletrans = (HTuple)iniFile.Read(CCDName, "HoleTransition", FrmMain.propath);
                    if (hv_HHoletrans == "negative")
                        hv_HHolegray = int.Parse(iniFile.Read(CCDName, "HoleRingThreshold", FrmMain.propath));
                    if (hv_HHoletrans == "positive")
                        hv_HHolegray = int.Parse(iniFile.Read(CCDName, "HoleRingThreshold", FrmMain.propath));

                    hv_HCoatRRadius = int.Parse(iniFile.Read(CCDName, "HCoatRingRadius", FrmMain.propath));
                    hv_HCoatRWidth = int.Parse(iniFile.Read(CCDName, "HCoatRingWidth", FrmMain.propath));
                    hv_HCoattrans = (HTuple)iniFile.Read(CCDName, "HCoatTransition", FrmMain.propath);
                    HCoatRmin = double.Parse(iniFile.Read(CCDName, "HCoatRmin", FrmMain.propath));
                    string tcrm = iniFile.Read(CCDName, "HCoatRmax", FrmMain.propath);
                    if (tcrm == "")
                    {
                        HCoatRmax = 7.75;
                        iniFile.Write(CCDName, "HCoatRmax", "7.75", FrmMain.propath);
                    }
                    else
                        HCoatRmax = double.Parse(tcrm);
                    if (hv_HCoattrans == "negative")
                        hv_HCoatgray = int.Parse(iniFile.Read(CCDName, "HCoatRingThreshold", FrmMain.propath));
                    if (hv_HCoattrans == "positive")
                        hv_HCoatgray = int.Parse(iniFile.Read(CCDName, "HCoatRingThreshold", FrmMain.propath));

                    Hdmax = double.Parse(iniFile.Read(CCDName, "HCDiamMinMax", FrmMain.propath));
                    Hdmin = double.Parse(iniFile.Read(CCDName, "HCDiamMinMin", FrmMain.propath));
                    string bn = iniFile.Read(CCDName, "jBaseNum", FrmMain.propath);
                    Sys.NumBase2 = double.Parse((bn == "") ? "7.51" : bn);
                    if (bn == "")
                        iniFile.Write(CCDName, "jBaseNum", "7.51", FrmMain.propath);
                    string pn = iniFile.Read(CCDName, "jPlusNum", FrmMain.propath);
                    Sys.NumAdd2 = double.Parse((pn == "") ? "0.07" : pn);
                    if (pn == "")
                        iniFile.Write(CCDName, "jPlusNum", "0.07", FrmMain.propath);
                    string tofs = iniFile.Read(CCDName, "jallCoatOffset", FrmMain.propath);
                    if (tofs == "")
                        iniFile.Write(CCDName, "jallCoatOffset", "0.04", FrmMain.propath);
                    HCoatOffset = double.Parse((tofs == "") ? "0.04" : tofs);
                }
                string DisAddChecked = iniFile.Read(CCDName, "DisAddChecked", FrmMain.propath);
                DisAddCh = ((DisAddChecked == "True") ? true : false);
                if (DisAddCh)
                {
                    hv_AddRegionDeg = int.Parse(iniFile.Read(CCDName, "DisAddDegree", FrmMain.propath));
                    hv_AddDegPlus = int.Parse(iniFile.Read(CCDName, "DisAddDegreePlus", FrmMain.propath));
                    hv_grayDistance = int.Parse(iniFile.Read(CCDName, "DisAddSetDis", FrmMain.propath));
                    hv_g1length1 = int.Parse(iniFile.Read(CCDName, "DisAddLength", FrmMain.propath));
                    hv_g1length2 = int.Parse(iniFile.Read(CCDName, "DisAddWidth", FrmMain.propath));
                    DisMin = double.Parse(iniFile.Read(CCDName, "DisAddDisMin", FrmMain.propath));
                    DisMax = double.Parse(iniFile.Read(CCDName, "DisAddDisMax", FrmMain.propath));
                }
                #endregion
                #region 外观检测pccd1
                Sys.P1DisMode2 = (iniFile.Read("PCCD1", "DisMode2Checked", FrmMain.propath) == "True" ? true : false);
                if (CCDName == "PCCD1" & Sys.P1DisMode2)
                {
                    hv_P1lensRRadius = int.Parse(iniFile.Read(CCDName, "LensRingRadius", FrmMain.propath));
                    hv_P1LensWidth = int.Parse(iniFile.Read(CCDName, "LensRingWidth", FrmMain.propath));
                    hv_P1transition = iniFile.Read(CCDName, "LensTransition", FrmMain.propath);
                    hv_P1LensRmin = int.Parse(iniFile.Read(CCDName, "LensZoneRmin", FrmMain.propath));
                    hv_P1LensRmax = int.Parse(iniFile.Read(CCDName, "LensZoneRmax", FrmMain.propath));
                    if (hv_P1transition == "negative")
                        hv_P1Threshold = int.Parse(iniFile.Read(CCDName, "LensRingThreshold", FrmMain.propath));
                    if (hv_P1transition == "positive")
                        hv_P1Threshold = int.Parse(iniFile.Read(CCDName, "LensRingThreshold", FrmMain.propath));
                }
                #endregion
                #endregion
            }
            catch (Exception ER)
            {
                MessageBox.Show("请重新设置参数！" + ER.ToString());
            }
        }
        public void ReadAssPara(string CCDName)
        {
            string axm = iniFile.Read(CCDName, "AssXDismax", FrmMain.propath);
            if (axm != "")
            {
                AssDisXmaxSet = double.Parse(axm);
                AssDisYmaxSet = double.Parse(iniFile.Read(CCDName, "AssYDismax", FrmMain.propath));
                AssDismaxSet = double.Parse(iniFile.Read(CCDName, "AssDismax", FrmMain.propath));
            }
        }
        void ReadSqPara(string CCDName)
        {
            try
            {
                //HOperatorSet.ReadShapeModel(Sys.IniPath + "\\" + Sys.CurrentProduction + "\\" + CCDName + "_RegionModel.shm", out hv_FModelID);
                //if (hv_FModelID.Length != 0 & hv_FModelID != null)
                //{
                    //hv_RowCh = double.Parse(iniFile.Read(CCDName, "Frow", FrmMain.propath));
                    //hv_ColumnCh = double.Parse(iniFile.Read(CCDName, "Fcol", FrmMain.propath));
                    //hv_angle = double.Parse(iniFile.Read(CCDName, "Fangle", FrmMain.propath));
                    //hv_length1 = double.Parse(iniFile.Read(CCDName, "Flength1", FrmMain.propath));
                    //hv_length2 = double.Parse(iniFile.Read(CCDName, "Flength2", FrmMain.propath));
                    hv_IRWidth = int.Parse(iniFile.Read(CCDName, "FWidth", FrmMain.propath));
                    //hv_IRdis = int.Parse(iniFile.Read(CCDName, "FDis", FrmMain.propath));
                    hv_IRtransition = iniFile.Read(CCDName, "Ftransition", FrmMain.propath);
                    hv_IRTH = int.Parse(iniFile.Read(CCDName, "Fthreshold", FrmMain.propath));
                    hv_Select = IniFile.Read(CCDName, "Fselect", "last", FrmMain.propath);
                    RectangleLength1_FigureShape = int.Parse(IniFile.Read(CCDName, "RectangleLength1_FigureShape", "100", FrmMain.propath));
                    RectangleLength2_FigureShape = int.Parse(IniFile.Read(CCDName, "RectangleLength2_FigureShape", "100", FrmMain.propath));
                //}
            }
            catch
            {
                MessageBox.Show("请重新设置参数！");
            }
        }

        #region 图像处理
        #region Var
        public static double rmin = 0.0, diam_min = 0.0, rmin1 = 0.0, diam_min1 = 0.0, rmin2 = 0.0, diam_min2 = 0.0;
        public static string CoatResult = "", CoatResult1 = "", CoatResult2 = "";
        public static double Hrmin = 0.0, Hdiam_min = 0.0, Hrmin1 = 0.0, Hdiam_min1 = 0.0, Hrmin2 = 0.0, Hdiam_min2 = 0.0;
        public static string HCoatResult = "", HCoatResult1 = "", HCoatResult2 = "";
        HObject ho_GlueQ = new HObject(), ho_GlueH = new HObject(), ho_AddGrey = new HObject();
        HObject centerRCircleOI = new HObject(); HObject centerRCircleCOAT = new HObject();
        HObject ho_BreakIn = new HObject(), ho_BreakOut = new HObject();
        HObject ho_BreakDiff = new HObject(), ho_BreakReduced = new HObject();
        HObject ho_BreakLregion = new HObject(), ho_MSERLight = new HObject();
        HObject ho_gapRegion_candidate = new HObject(), ho_radius_line = new HObject();
        HObject ho_scan_intersect = new HObject(), ho_gapRegion = new HObject();
        HObject ho_RegionFillUp = new HObject();
        HObject ho_MSERDark = new HObject(), ho_Skeleton = new HObject();
        HObject ho_ImageMean1 = new HObject(), ho_ImageMean = new HObject(), ho_odd_region = new HObject();
        HObject ho_g1conn = new HObject(), ho_g1sele = new HObject();
        HObject ho_g2conn = new HObject(), ho_g2sele = new HObject();
        HObject ho_g3conn = new HObject(), ho_g3sele = new HObject();
        HObject ho_g4conn = new HObject(), ho_g4sele = new HObject();

        HTuple hv_count = new HTuple(), hv_gap_select_maskall = new HTuple();
        HTuple hv_AmplitudeThreshold = new HTuple();
        HTuple hv_RoiWidthLen2 = new HTuple(), hv_LineRowStart_Measure_03_0 = new HTuple();
        HTuple hv_LineColumnStart_Measure_03_0 = new HTuple();
        HTuple hv_LineRowEnd_Measure_03_0 = new HTuple(), hv_LineColumnEnd_Measure_03_0 = new HTuple();
        HTuple hv_TmpCtrl_Row = new HTuple(), hv_TmpCtrl_Column = new HTuple();
        HTuple hv_TmpCtrl_Dr = new HTuple(), hv_TmpCtrl_Dc = new HTuple();
        HTuple hv_TmpCtrl_Phi = new HTuple(), hv_TmpCtrl_Len1 = new HTuple();
        HTuple hv_TmpCtrl_Len2 = new HTuple(), hv_MsrHandle_Measure_03_0 = new HTuple();
        HTuple hv_Row_Measure_03_0 = new HTuple(), hv_Column_Measure_03_0 = new HTuple();
        HTuple hv_Amplitude_Measure_03_0 = new HTuple(), hv_Distance_Measure_03_0 = new HTuple();
        HTuple hv_Length5 = new HTuple(), hv_gap_select_mask1 = new HTuple();
        HTuple hv_Rows2 = new HTuple(), hv_Columns2 = new HTuple(), hv_Length4 = new HTuple(), hv_n = new HTuple();
        HTuple hv_Addarea = null, hv_Addrow = null, hv_Addcol = null;
        HTuple hv_msercount = new HTuple(), hv_gap_select_mask = new HTuple();
        HTuple hv_Row4 = new HTuple(), hv_Column4 = new HTuple(), hv_Phi1 = new HTuple(), hv_Length11 = new HTuple(), hv_Length21 = new HTuple();
        HTuple hv_dummy = new HTuple(), hv_row = new HTuple(), hv_col = new HTuple();
        HTuple hv_end_row = new HTuple(), hv_end_col = new HTuple(), hv_g = new HTuple();
        HTuple hv_scan_intersect_area = new HTuple(), hv_AbsoluteHisto = new HTuple(), hv_RelativeHisto = new HTuple();
        HTuple hv_accumulated_hist = new HTuple(), hv_third_quarter_grayVal = new HTuple();
        HTuple hv_gap_width_max_offset = new HTuple(), hv_ideal_gap_width = new HTuple();
        HTuple hv_min_gap_width = new HTuple(), hv_gapRegionCount = new HTuple();
        HTuple hv_Rowb2 = new HTuple(), hv_Columnb2 = new HTuple();

        HTuple hv_RowIRLs, hv_ColIRLs, hv_RowIRLe, hv_ColIRLe, hv_Index1 = null;
        HTuple hv_RowBegin = null, hv_ColBegin = null, hv_RowEnd = null;
        HTuple hv_ColEnd = null, hv_Angle = null, hv_AngleDeg = 720.0;
        HTuple hv_DegLth = 20, hv_DegLWidth = 80;
        HTuple hv_DLModelID = new HTuple();
        HTuple hv_DLRowFound = new HTuple(), hv_DLColFound = new HTuple(), hv_DLAngleFound = new HTuple();
        HTuple hv_DLScaleFound = new HTuple(), hv_DLScoreFound = new HTuple(), hv_DLHomMat2D = new HTuple();
        HObject ho_MeasureContours = new HObject(), ho_MeasuredLines = new HObject();
        HObject ho_DLRContours = new HObject(), ho_DLRLines = new HObject();

        HObject ho_CrossP1 = new HObject(); HTuple hv_P1RowCh = new HTuple(), hv_P1ColumnCh = new HTuple();
        HObject ho_CrossP2 = new HObject(); HTuple hv_P2RowCh = new HTuple(), hv_P2ColumnCh = new HTuple();
        HObject ho_CrossP3 = new HObject(); HTuple hv_P3RowCh = new HTuple(), hv_P3ColumnCh = new HTuple();
        HObject ho_CrossP4 = new HObject(); HTuple hv_P4RowCh = new HTuple(), hv_P4ColumnCh = new HTuple();

        HTuple hv_CenRadius = new HTuple();
        HObject ho_ARegion = new HObject();
        HObject ho_ArrowLine = new HObject();
        HTuple[] hv_Aarea = new HTuple[4] { 0, 0, 0, 0 }, hv_Arow = new HTuple[4], hv_Acol = new HTuple[4];

        HTuple hv_Mode1RowIRLs, hv_Mode1ColIRLs, hv_Mode1RowIRLe, hv_Mode1ColIRLe, hv_Mode1Index1 = null;
        HTuple hv_Mode1RowBegin = null, hv_Mode1ColBegin = null, hv_Mode1RowEnd = null;
        HTuple hv_Mode1ColEnd = null, hv_Mode1Angle = null, hv_Mode1AngleDeg = 720.0;
        HTuple hv_Mode1DegLth = 20, hv_Mode1DegLWidth = 80;
        //HTuple hv_Mode1DLRowCh, hv_Mode1DLColumnCh, hv_Mode1DLangle = new HTuple(), hv_Mode1DLlength1, hv_Mode1DLlength2;
        HTuple hv_Mode1DLModelID = new HTuple();
        HTuple hv_Mode1DLRowFound = new HTuple(), hv_Mode1DLColFound = new HTuple(), hv_Mode1DLAngleFound = new HTuple();
        HTuple hv_Mode1DLScaleFound = new HTuple(), hv_Mode1DLScoreFound = new HTuple(), hv_Mode1DLHomMat2D = new HTuple();
        HObject ho_Mode1MeasureContours = new HObject(), ho_Mode1MeasuredLines = new HObject();
        HObject ho_Mode1DLRContours = new HObject(), ho_Mode1DLRLines = new HObject();
        #endregion
        #region 偏心（pccd1）
        HObject ho_p1lensCircle = new HObject(), ho_p1lensCircle0 = new HObject();
        HObject ho_p1holdCircle = new HObject(), ho_p1holdCircle0 = new HObject();
        HTuple hv_p1lrow = new HTuple(), hv_p1lcol = new HTuple(), hv_p1lr = new HTuple();
        HTuple hv_p1hrow = new HTuple(), hv_p1hcol = new HTuple(), hv_p1hr = new HTuple();
        #region Mode2
        HTuple hv_P1lensRRadius = new HTuple(), hv_P1LensWidth = new HTuple(), hv_P1transition = new HTuple();
        HTuple hv_P1LensRmin = new HTuple(), hv_P1LensRmax = new HTuple(), hv_P1Threshold = new HTuple();
        HTuple hv_LensRow = new HTuple(), hv_LensCol = new HTuple(), hv_LensRadius = new HTuple();
        HTuple hv_HoldRow = new HTuple(), hv_HoldCol = new HTuple(), hv_HoldRadius = new HTuple();
        HObject ho_P1HoldC = new HObject(), ho_P1HoldC0 = new HObject();
        HObject ho_P1LensC = new HObject(), ho_P1LensC0 = new HObject();
        #endregion
        #endregion
        public void BarrelViewMode2(string CCDName, HWindow HWindowID, int i_image)
        {
            
            ReadParaIde(CCDName);//讀參數
            switch (CCDName)
            {
                case "GCCD2-1":
                    Glue.ResultGlueArea_CCD1 = 0;
                    Glue.ResultGlueAngle_CCD1 = 0;
                    Glue.ResultGlueAngle_2_CCD1 = 0;
                    break;
                case "GCCD2-2":
                    Glue.ResultGlueArea_CCD2 = 0;
                    Glue.ResultGlueAngle_CCD2 = 0;
                    Glue.ResultGlueAngle_2_CCD2 = 0;
                    break;
                case "GCCD2-3":
                    Glue.ResultGlueArea_CCD1 = 0;
                    Glue.ResultGlueAngle_CCD1 = 0;
                    Glue.ResultGlueAngle_2_CCD1 = 0;
                    break;
                case "GCCD2-4":
                    Glue.ResultGlueArea_CCD2 = 0;
                    Glue.ResultGlueAngle_CCD2 = 0;
                    Glue.ResultGlueAngle_2_CCD2 = 0;
                    break;
            }
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            hv_Deg2 = 720.0; double xnum = 0.0, ynum = 0.0;
            try
            {
                if (Sys.NoAutoMatic & (CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4"))
                    gCheck = true;
                string name = "";
                if (CCDName != "PCCD1" & CCDName != "QCCD")
                    name = CCDName.Substring(0, 6);
                if (Sys.CurrentProduction == "")
                {
                    MessageBox.Show("未选择机种");
                    goto theend;
                }
                try
                {
                    #region 图片处理及效果显示
                        try
                        {
                            HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
                            HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
                            if (!Sys.NoAutoMatic)
                                HOperatorSet.SetPart(HWindowID, 0, 0, height, width);
                            #region Region
                            if (regionR != "0" && regionR != "")
                            {
                                ho_circleR.Dispose();
                                HOperatorSet.GenCircle(out ho_circleR, row, col, RegionRadius);
                                ho_ImageReducedR.Dispose();
                                HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_circleR, out ho_ImageReducedR);
                                ho_ImageRun.Dispose();
                                HOperatorSet.CopyImage(ho_ImageReducedR, out ho_ImageRun);
                            }
                            else
                            {
                                ho_ImageRun.Dispose();
                                HOperatorSet.CopyImage(halcon.Image[i_image], out ho_ImageRun);
                            }
                            #endregion
                            #region
                            if (FShape == "Circle") //求圓圓心
                            {
                                #region 找圆心(圓)
                                if (Mode2GrayChecked)
                                {
                                    #region 粗找圆
                                    CatchFirstCircleCenter(ho_ImageRun, out hv_Row2, out hv_Column2);

                                    RingCrow = hv_Row2; RingCcolumn = hv_Column2;
                                    #endregion
                                }

                                HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((RingCrow.TupleConcat(
                                    RingCcolumn))).TupleConcat(ringR), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", hv_transition);
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", ringWidth);
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 5);
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", ringTh);
                                HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                //应用测量
                                HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_MetrologyHandle);
                                //获取结果
                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                ho_RCircle.Dispose();
                                HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_MetrologyHandle, "all", "all", 1.5);
                                Thread.Sleep(5);
                                hv_RowCenter = hv_circleParameter.TupleSelect(0);
                                hv_ColCenter = hv_circleParameter.TupleSelect(1);
                                hv_Radius = hv_circleParameter.TupleSelect(2);
                                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                ho_RCircle0.Dispose();
                                HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                                #endregion
                                #region 找圆心结果NG

                                if (hv_RowCenter.D == 0.0)
                                {
                                    #region NG
                                    HWindowID.ClearWindow();
                                    HWindowID.DispObj(halcon.Image[i_image]);
                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                    disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                                    disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                                    disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                                    disp_message(HWindowID, "NG(c)", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                    goto Clearvar;  //4118
                                }
                                if (!(hv_Radius.D > Prmin & hv_Radius.D < Prmax))
                                {
                                    #region NG
                                    HWindowID.ClearWindow();
                                    HWindowID.DispObj(halcon.Image[i_image]);
                                    HWindowID.SetColor("red");
                                    HWindowID.SetLineWidth(1);
                                    HWindowID.DispCross(row, col, width, 0);
                                    HWindowID.SetColor("green");
                                    if (FShape == "Circle")
                                    {
                                        HWindowID.DispObj(ho_RCircle0);
                                        HWindowID.SetColor("red");
                                        HWindowID.DispObj(ho_RCircle);
                                    }
                                    else if (FShape == "Square")
                                    {
                                        HWindowID.SetDraw("margin");
                                        HWindowID.DispObj(ho_ResultContours);
                                    }
                                    xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                    ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                    disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "red", "false");
                                    disp_message(HWindowID, "NG(r)", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                    string Anglenum = "00000000";
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                    goto Clearvar;   //4118
                                }
                                #endregion
                            }
                            else if (FShape == "Square")//求矩形圓心
                            {
                                #region 求矩形圓心
                                try
                                {
                                    if (Sys.CurrentProduction != "")
                                    {
                                        #region 图片处理及效果显示
                                         try
                                        {
                                            string Path = Sys.IniPath + "\\" + "Model";
                                            HOperatorSet.ReadShapeModel(Path + "\\" + CCDName + "_FigureShape_Square_Model", out hv_FModelID);
                                        }
                                        catch
                                        {
                                            MessageBox.Show("請先創建模組!");
                                            return;
                                        }
                                         HObject ho_ResultContours2 = new HObject(), ho_CrossCenter2 = new HObject(), ho_ImageMedian = new HObject(), ho_ImageEmphasize = new HObject();
                                        HTuple hv_RectangleRow = new HTuple(), hv_RectangleColumn = new HTuple(), hv_RectanglePhi = new HTuple(), hv_RectangleLength1 = new HTuple(), hv_RectangleLength2 = new HTuple();
                                        HTuple hv_ResultPhi = new HTuple(),hv_ResultLength1 = new HTuple(),hv_ResultLength2 = new HTuple();
                                        ho_ImageMedian.Dispose();
                                        HOperatorSet.MedianRect(ho_ImageRun, out ho_ImageMedian, 10, 10);
                                        ho_ImageEmphasize.Dispose();
                                        HOperatorSet.Emphasize(ho_ImageMedian, out ho_ImageEmphasize, 50, 50, 1);
                                        HOperatorSet.GetShapeModelContours(out ho_FModelContours, hv_FModelID, 1);
                                        HOperatorSet.FindScaledShapeModel(ho_ImageEmphasize, hv_FModelID, (new HTuple(-180)).TupleRad(), (new HTuple(180)).TupleRad(), 0.9, 1.1, 0.3, 1, 0.5,
                                                 "least_squares", 0, 0.9, out hv_RowFound, out hv_ColFound, out hv_AngleFound, out hv_ScaleFound, out hv_ScoreFound);
               
                                        HOperatorSet.ClearShapeModel(hv_FModelID);
                                        if ((int)(new HTuple((new HTuple(1)).TupleEqual(new HTuple(hv_RowFound.TupleLength())))) != 0)
                                        {
                                            HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                                            //HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_RowFound, hv_ColFound, hv_AngleFound, out hv_HomMat2D);
                                            HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_AngleFound, 0, 0, out hv_HomMat2D);
                                            HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_RowFound, hv_ColFound, out hv_HomMat2D);
                                            ho_ShowContours.Dispose();
                                            HOperatorSet.AffineTransContourXld(ho_FModelContours, out ho_ShowContours, hv_HomMat2D);
                                            ho_Region.Dispose();
                                            HOperatorSet.GenRegionContourXld(ho_ShowContours, out ho_Region, "filled");
                                            ho_RegionUnion.Dispose();
                                            HOperatorSet.Union1(ho_Region, out ho_RegionUnion);
                                            HOperatorSet.SmallestRectangle2(ho_RegionUnion, out hv_RectangleRow, out hv_RectangleColumn, out hv_RectanglePhi, out hv_RectangleLength1, out hv_RectangleLength2);
                                            HOperatorSet.GenRectangle2(out ho_Rectangle, hv_RectangleRow, hv_RectangleColumn, hv_RectanglePhi, hv_RectangleLength1, hv_RectangleLength2);

                                            try
                                            {
                                                gen_rectangle2_center(ho_ImageRun, out ho_Contour, out ho_Cross,
                                                out ho_ResultContours, out ho_CrossCenter2, hv_RectangleRow, hv_RectangleColumn, hv_RectanglePhi, RectangleLength1_FigureShape, RectangleLength2_FigureShape,
                                               hv_IRWidth, hv_IRTH, hv_IRtransition, hv_Select, out hv_ResultRow, out hv_ResultColumn, out hv_ResultPhi,
                                               out hv_ResultLength1, out hv_ResultLength2);
                                                hv_RowCenter = hv_ResultRow;
                                                hv_ColCenter = hv_ResultColumn;
                                                hv_Deg2 = hv_ResultPhi.TupleDeg();
                                            }
                                            catch
                                            {
                                                 #region NG
                                                HWindowID.ClearWindow();
                                                HWindowID.DispObj(halcon.Image[i_image]);
                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                                                disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                                                disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                FrmMain.afterDT = System.DateTime.Now;
                                                string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                #endregion
                                                goto Clearvar;  //4118
                                            }
                                        
                                        }
                                        else
                                        {
                                            #region NG
                                            HWindowID.ClearWindow();
                                            HWindowID.DispObj(halcon.Image[i_image]);
                                            set_display_font(HWindowID, 18, "sans", "true", "false");
                                            disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                                            disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                                            disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            disp_message(HWindowID, "没有找到模板", "window", 24, 24, "red", "true");
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                            #endregion
                                           
                                            goto Clearvar;  //4118
                                        }
                                        ho_ImageMedian.Dispose();
                                        ho_ImageEmphasize.Dispose();
                                        #endregion
                                    }
                                    else
                                    {
                                        MessageBox.Show("未选择机种");
                                        goto Clearvar;  //4118
                                    }
                                        
                                }
                                catch
                                {
                                    #region NG
                                    HWindowID.ClearWindow();
                                    HWindowID.DispObj(halcon.Image[i_image]);
                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                    disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                                    disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                                    disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                    goto Clearvar;  //4118
                                }
                                #endregion
                            }
                            //GCCD才存膠前膠後圓心參數 ("GCCD2"-1)
                            if (CCDName.Substring(0, 5) == "GCCD2")
                            {
                                if (GlueOrder == 1)
                                {
                                    hv_RowCenter_Befort = hv_ColumnCenter_Befort = 0;
                                    hv_RowCenter_Befort = hv_RowCenter;
                                    hv_ColumnCenter_Befort = hv_ColCenter;
                                }
                                if (GlueOrder == 2)
                                {
                                    hv_RowCenter_After = hv_ColumnCenter_After = 0;
                                    hv_RowCenter_After = hv_RowCenter;
                                    hv_ColumnCenter_After = hv_ColCenter;
                                }
                            }
                            
                            if ((name == "A1CCD1" & isa11deg) || (name == "A2CCD1" & isa21deg) ||
                                ((CCDName != "GCCD2-1" && CCDName != "GCCD2-2" && CCDName != "GCCD2-3" && CCDName != "GCCD2-4") & CutIsChecked) ||
                                ((CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4") & ((GlueOrder == 1 & GQCutIsChecked) || (GlueOrder == 2 & GHCutIsChecked))))
                            {
                                double SubRow, SubCol, angle = 720.0;
                                #region 找角度
                                switch (AMode)
                                {
                                    case "1":
                                        #region Mode1
                                        try
                                        {
                                            string Tfilepath = Sys.IniPath + "\\" + Sys.CurrentProduction + "\\" + CCDName + "\\DegTemplate";
                                            HOperatorSet.ReadShapeModel(Tfilepath + "\\DegLocation.shm", out hv_Mode1DLModelID);

                                            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                            HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                            HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_Mode1RowIRLs, hv_Mode1ColIRLs, hv_Mode1RowIRLe, hv_Mode1ColIRLe,
                                                 hv_Mode1DegLWidth, 10, 1, hv_Mode1DegLth, new HTuple(), "positive", out hv_Mode1Index1);

                                            //HOperatorSet.SetMetrologyModelParam(hv_MetrologyHandle, "reference_system", ((hv_FRow.TupleConcat(hv_FCol))).TupleConcat(0));
                                            ho_FModelContours.Dispose();
                                            HOperatorSet.GetShapeModelContours(out ho_FModelContours, hv_Mode1DLModelID, 1);
                                            HOperatorSet.ReadMetrologyModel(Tfilepath + "\\DegTemplate.shm", out hv_MetrologyHandle);

                                            HOperatorSet.FindScaledShapeModel(halcon.Image[i_image], hv_Mode1DLModelID, (new HTuple(0)).TupleRad(), (new HTuple(360)).TupleRad(), 0.9, 1.1, 0.5, 1, 0.5,
                                                "least_squares", 0, 0.9, out hv_Mode1DLRowFound, out hv_Mode1DLColFound, out hv_Mode1DLAngleFound, out hv_Mode1DLScaleFound, out hv_Mode1DLScoreFound);
                                            hv_AngleDeg = 720.0;
                                            //如果找到模板
                                            if ((int)(new HTuple((new HTuple(1)).TupleEqual(new HTuple(hv_Mode1DLRowFound.TupleLength())))) != 0)
                                            {
                                                HOperatorSet.HomMat2dIdentity(out hv_Mode1DLHomMat2D);
                                                HOperatorSet.HomMat2dScale(hv_Mode1DLHomMat2D, hv_Mode1DLScaleFound, hv_Mode1DLScaleFound, 0, 0, out hv_Mode1DLHomMat2D);
                                                HOperatorSet.HomMat2dRotate(hv_Mode1DLHomMat2D, hv_Mode1DLAngleFound, 0, 0, out hv_Mode1DLHomMat2D);
                                                HOperatorSet.HomMat2dTranslate(hv_Mode1DLHomMat2D, hv_Mode1DLRowFound - 0, hv_Mode1DLColFound - 0, out hv_Mode1DLHomMat2D);
                                                ho_ResultContours.Dispose();
                                                HOperatorSet.AffineTransContourXld(ho_FModelContours, out ho_ResultContours, hv_Mode1DLHomMat2D);

                                                //按照找到的模板位置，移动测量位置
                                                HOperatorSet.AlignMetrologyModel(hv_MetrologyHandle, hv_Mode1DLRowFound, hv_Mode1DLColFound, hv_Mode1DLAngleFound);
                                                //应用测量
                                                HOperatorSet.ApplyMetrologyModel(halcon.Image[i_image], hv_MetrologyHandle);
                                                //获取结果
                                                ho_Mode1DLRContours.Dispose();
                                                HOperatorSet.GetMetrologyObjectMeasures(out ho_Mode1DLRContours, hv_MetrologyHandle, "all", "all", out hv_Row, out hv_Column);
                                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_Mode1Index1, "all", "result_type", "all_param", out hv_FRectangleParameter);

                                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "row_begin", out hv_Mode1RowBegin);
                                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "column_begin", out hv_Mode1ColBegin);
                                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "row_end", out hv_Mode1RowEnd);
                                                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "column_end", out hv_Mode1ColEnd);
                                                HOperatorSet.AngleLx(hv_Mode1RowBegin, hv_Mode1ColBegin, hv_Mode1RowEnd, hv_Mode1ColEnd, out hv_Mode1Angle);
                                                gen_arrow_contour_xld(out ho_ArrowLine, hv_Mode1RowBegin, hv_Mode1ColBegin, hv_Mode1RowEnd, hv_Mode1ColEnd, 18, 18);
                                                hv_AngleDeg = hv_Mode1Angle.TupleDeg();
                                                if (hv_AngleDeg.D < 0.0)
                                                    hv_AngleDeg = hv_AngleDeg + 360;
                                                ho_DLRLines.Dispose();
                                                HOperatorSet.GetMetrologyObjectResultContour(out ho_DLRLines, hv_MetrologyHandle, "all", "all", 1.5);
                                                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                HOperatorSet.ClearShapeModel(hv_Mode1DLModelID);
                                            }
                                            hv_Deg2 = hv_AngleDeg;
                                            #region 完整结果
                                            HWindowID.ClearWindow();
                                            HWindowID.DispObj(halcon.Image[i_image]);
                                            HWindowID.SetColor("red");
                                            HWindowID.SetLineWidth(1);
                                            HWindowID.DispCross(row, col, width, 0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_ArrowLine);
                                            if (FShape == "Circle")
                                            {
                                                HWindowID.DispObj(ho_RCircle0);
                                            }
                                            else if (FShape == "Square")
                                            {
                                                HWindowID.SetDraw("margin");
                                                HWindowID.DispObj(ho_ResultContours);
                                            }
                                            HWindowID.SetColor("red");
                                            HWindowID.DispObj(ho_RCircle0);
                                            xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                            ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                            if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
                                            {
                                                #region Waixie
                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                                disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
                                                disp_message(HWindowID, "NG1", "", 150, 2000, "red", "false");
                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                FrmMain.afterDT = System.DateTime.Now;
                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                #endregion
                                            }
                                            else
                                            {
                                                if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4"))
                                                {
                                                    hv_Row2 = hv_RowCut;
                                                    hv_Column2 = hv_ColumnCut;
                                                    hv_CenRadius = hv_Radius;
                                                    try
                                                    {
                                                        GlueIde(halcon.Image[i_image], CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
                                                    }
                                                    catch
                                                    {
                                                        #region NG
                                                        HWindowID.DispObj(halcon.Image[i_image]);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.SetLineWidth(1);
                                                        HWindowID.DispCross(row, col, width, 0);
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispObj(ho_RCircle);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.DispObj(ho_RCircle0);
                                                        HWindowID.SetColor("blue");
                                                        HWindowID.DispObj(ho_ArrowLine);
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                                        disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                                        disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
                                                        disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                        WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                }
                                                else
                                                {
                                                    #region PASS
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                                    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                                    disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                    set_display_font(HWindowID, 14, "sans", "true", "false");
                                                    if (addFCT & (CCDName == "A1CCD1" || CCDName == "A2CCD1"))
                                                    {
                                                        disp_message(HWindowID, Math.Round((double)hv_valueM, 3).ToString(), "", 1780, 150, "blue", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_valueLM, 3).ToString(), "", 1840, 150, "green", "false");
                                                    }
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                            }
                                            #endregion
                                        }
                                        catch
                                        {
                                            DegreeErrSta = true;
                                            goto DegreeErr;
                                        }
                                        #endregion
                                        break;
                                    case "2":
                                        #region Mode2
                                        try
                                        {
                                            #region 找剪口
                                            //RadiusMax = (int)Math.Round((double)hv_Radius) - 2;
                                            ho_CutRegion1.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, RadiusMin);
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, RadiusMax);
                                            OTemp[SP_O] = ho_CutRegion2.CopyObj(1, -1);
                                            SP_O++;
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.Difference(OTemp[SP_O - 1], ho_CutRegion1, out ho_CutRegion2);
                                            OTemp[SP_O - 1].Dispose();
                                            SP_O = 0;
                                            ho_ImageReduced1.Dispose();
                                            HOperatorSet.ReduceDomain(ho_ImageRun, ho_CutRegion2, out ho_ImageReduced1);
                                            ho_Region.Dispose();
                                            HOperatorSet.Threshold(ho_ImageReduced1, out ho_Region, binBW, binWB);
                                            ho_ConnectedRegions.Dispose();
                                            HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
                                            ho_SelectedRegions1.Dispose();
                                            HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1, "area", "and", Cutmin, Cutmax);
                                            HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_AreaCut, out hv_RowCut, out hv_ColumnCut);
                                            if (!addFCT)
                                            {
                                                #region
                                                if (hv_AreaCut.Length > 1)
                                                {
                                                    double areaCut = hv_AreaCut[0], rowCut = hv_RowCut[0], columnCut = hv_ColumnCut[0];
                                                    for (int i = 1; i < hv_AreaCut.Length; i++)
                                                    {
                                                        if (areaCut < hv_AreaCut[i])
                                                        {
                                                            areaCut = hv_AreaCut[i]; rowCut = hv_RowCut[i]; columnCut = hv_ColumnCut[i];
                                                            ho_SelectedRegionsMax.Dispose();
                                                            HOperatorSet.SelectObj(ho_SelectedRegions1, out ho_SelectedRegionsMax, i);
                                                        }
                                                    }
                                                    hv_AreaCut = areaCut;
                                                    hv_RowCut = rowCut;
                                                    hv_ColumnCut = columnCut;
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                #region
                                                HOperatorSet.SmallestRectangle2(ho_SelectedRegions1, out hv_CRow2, out hv_CColumn2, out hv_CPhi, out hv_CLength1, out hv_CLength2);
                                                ho_Rectangle.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_Rectangle, hv_CRow2, hv_CColumn2, hv_CPhi, hv_CLength1, hv_CLength2);
                                                HOperatorSet.CountObj(ho_Rectangle, out hv_Number1);
                                                ho_EmptyRectangle.Dispose();
                                                HOperatorSet.SelectObj(ho_Rectangle, out ho_EmptyRectangle, 1);
                                                hv_emRow[0] = hv_CRow2.TupleSelect(0);
                                                hv_emColumn[0] = hv_CColumn2.TupleSelect(0);
                                                hv_emPhi[0] = hv_CPhi.TupleSelect(0);
                                                hv_emLength1[0] = hv_CLength1.TupleSelect(0);
                                                hv_emLength2[0] = hv_CLength2.TupleSelect(0);
                                                if (hv_Number1 > 1)
                                                {
                                                    HOperatorSet.GenEmptyObj(out ho_EmptyRectangle);
                                                    hv_i = 0;
                                                    HTuple end_val84 = hv_Number1 - 1, step_val84 = 1;
                                                    for (hv_j = 0; hv_j.Continue(end_val84, step_val84); hv_j = hv_j.TupleAdd(step_val84))
                                                    {
                                                        hv_val1 = hv_CLength2.TupleSelect(hv_j);
                                                        hv_val2 = hv_CLength1.TupleSelect(hv_j);
                                                        if ((int)(new HTuple(hv_val1.TupleLess(Widmax))) != 0 & (int)(new HTuple(hv_val1.TupleGreater(Widmin))) != 0 &
                                                            (int)(new HTuple(hv_val2.TupleLess(ALmax))) != 0 & (int)(new HTuple(hv_val2.TupleGreater(ALmin))) != 0)
                                                        {
                                                            hv_i = hv_i + 1;
                                                            ho_emSelectedRegion.Dispose();
                                                            HOperatorSet.SelectObj(ho_Rectangle, out ho_emSelectedRegion, hv_j + 1);
                                                            {
                                                                HObject ExpTmpOutVar_0;
                                                                HOperatorSet.ConcatObj(ho_EmptyRectangle, ho_emSelectedRegion, out ExpTmpOutVar_0);
                                                                ho_EmptyRectangle.Dispose();
                                                                ho_EmptyRectangle = ExpTmpOutVar_0;
                                                            }
                                                            hv_emRow[hv_i - 1] = hv_CRow2.TupleSelect(hv_j);
                                                            hv_emColumn[hv_i - 1] = hv_CColumn2.TupleSelect(hv_j);
                                                            hv_emPhi[hv_i - 1] = hv_CPhi.TupleSelect(hv_j);
                                                            hv_emLength1[hv_i - 1] = hv_CLength1.TupleSelect(hv_j);
                                                            hv_emLength2[hv_i - 1] = hv_CLength2.TupleSelect(hv_j);
                                                        }
                                                    }
                                                }
                                                HOperatorSet.CountObj(ho_EmptyRectangle, out hv_Number2);
                                                hv_valueM = hv_emLength2.TupleSelect(0);
                                                hv_valueLM = hv_emLength1.TupleSelect(0);
                                                ho_SelectedRegion.Dispose();
                                                HOperatorSet.SelectObj(ho_EmptyRectangle, out ho_SelectedRegion, 1);
                                                if (hv_Number2 > 1)
                                                {
                                                    HTuple end_val101 = hv_Number2 - 1;
                                                    HTuple step_val101 = 1;
                                                    for (hv_j = 1; hv_j.Continue(end_val101, step_val101); hv_j = hv_j.TupleAdd(step_val101))
                                                    {
                                                        hv_va = hv_emLength2.TupleSelect(hv_j);
                                                        if ((int)(new HTuple(hv_va.TupleGreaterEqual(hv_valueM))) != 0)
                                                        {
                                                            hv_valueM = hv_va.Clone();
                                                            hv_valueLM = hv_emLength1.TupleSelect(hv_j);
                                                            ho_SelectedRegion.Dispose();
                                                            HOperatorSet.SelectObj(ho_EmptyRectangle, out ho_SelectedRegion, hv_j + 1);
                                                        }
                                                    }
                                                }
                                                HOperatorSet.AreaCenter(ho_SelectedRegion, out hv_Areare, out hv_Rowre, out hv_Columnre);
                                                hv_AreaCut = hv_Areare;
                                                hv_RowCut = hv_Rowre;
                                                hv_ColumnCut = hv_Columnre;
                                                #endregion
                                            }
                                            if (!(hv_AreaCut > Cutmin || hv_AreaCut < Cutmax))
                                            {
                                                hv_Deg2 = 720.0;
                                                goto ng3;
                                            }
                                            SubRow = hv_RowCut - hv_RowCenter;
                                            SubCol = hv_ColumnCut - hv_ColCenter;
                                            hv_Deg2 = (HTuple)Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                                            if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                                                hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
                                            else
                                                hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);

                                        ng3:
                                            if (!(hv_Deg2.Length != 0 && hv_Deg2.D != 720.0)) // && plDistance >= Pldis - 3.0)
                                            {
                                                #region 未抓到角度
                                                try
                                                {
                                                    #region
                                                    HWindowID.ClearWindow();
                                                    HWindowID.DispObj(halcon.Image[i_image]);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.SetLineWidth(1);
                                                    HWindowID.DispCross(row, col, width, 0);
                                                    HWindowID.SetColor("green");
                                                    HWindowID.DispObj(ho_RCircle);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.DispObj(ho_RCircle0);
                                                    xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                                    ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                                    disp_message(HWindowID, "T:未抓到角度", "", 450, 150, "green", "false");
                                                    disp_message(HWindowID, "NG3", "", 150, 2000, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = "00000000";
                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                                catch
                                                {
                                                    #region RcircleError
                                                    HWindowID.ClearWindow();
                                                    HWindowID.DispObj(halcon.Image[i_image]);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.SetLineWidth(1);
                                                    HWindowID.DispCross(row, col, width, 0);
                                                    HWindowID.SetColor("green");
                                                    HWindowID.DispObj(ho_RCircle);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.DispObj(ho_RCircle0);
                                                    xnum = 0.00;
                                                    ynum = 0.00;
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                                    disp_message(HWindowID, "NG4", "", 150, 2000, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                                #endregion
                                                goto theend;
                                            }
                                            #endregion
                                            DegreeAdd(CCDName, HWindowID, i_image);
                                        }
                                        catch
                                        {
                                            DegreeErrSta = true;
                                            goto DegreeErr;
                                        }
                                        #endregion
                                        break;
                                    case "3":
                                        #region  Mode3
                                        #region zhaomoban
                                        if (!(RadiusMin == 1 & RadiusMax == 200))
                                        {
                                            ho_CutRegion1.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, RadiusMin);
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, RadiusMax);
                                            OTemp[SP_O] = ho_CutRegion2.CopyObj(1, -1);
                                            SP_O++;
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.Difference(OTemp[SP_O - 1], ho_CutRegion1, out ho_CutRegion2);
                                            OTemp[SP_O - 1].Dispose();
                                            SP_O = 0;
                                            ho_ImageReduced1.Dispose();
                                            HOperatorSet.ReduceDomain(ho_ImageRun, ho_CutRegion2, out ho_ImageReduced1);
                                            ho_ImageRun.Dispose();
                                            HOperatorSet.CopyImage(ho_ImageReduced1, out ho_ImageRun);
                                        }
                                        Shapetype = iniFile.Read(CCDName, "TemplateShape", FrmMain.propath);
                                        if (Shapetype != "")
                                        {
                                            string tempstyle = "";
                                            modescore = int.Parse(iniFile.Read(CCDName, "SetScore", FrmMain.propath));
                                            if (Shapetype == "0")
                                                tempstyle = "\\CircleTemplate";
                                            if (Shapetype == "1")
                                                tempstyle = "\\SquareTemplate";
                                            Tfilepath = Sys.IniPath + "\\" + Sys.CurrentProduction + "\\" + CCDName + tempstyle;
                                            DirectoryInfo theFolder = new DirectoryInfo(Tfilepath);
                                            FileInfo[] TfileInfo = theFolder.GetFiles();
                                            for (int i = 0; i < TfileInfo.Length; i++)
                                            {
                                                HOperatorSet.ReadShapeModel(Tfilepath + "\\" + TfileInfo[i], out hv_ModelID1);
                                                if (CCDName == "A1CCD1" || CCDName == "A2CCD1")
                                                    HOperatorSet.FindShapeModel(ho_ImageRun, hv_ModelID1, 0, (new HTuple(360)).TupleRad(), 0.3, 1, 0.5,
                                                        "least_squares", 0, 0.5, out hv_RowM, out hv_ColumnM, out hv_AngleM, out hv_Score);
                                                else
                                                    HOperatorSet.FindShapeModel(ho_ImageRun, hv_ModelID1, 0, (new HTuple(360)).TupleRad(), 0.3, 1, 0.5,
                                                        "least_squares", 0, 0.9, out hv_RowM, out hv_ColumnM, out hv_AngleM, out hv_Score);
                                                dev_display_shape_matching_results(hv_ModelID1, "red", hv_RowM, hv_ColumnM, hv_AngleM, 1, 1, 0);
                                                HOperatorSet.ClearShapeModel(hv_ModelID1);
                                                if (hv_Score.Length != 0)
                                                    goto jixu;
                                            }
                                        }
                                        #endregion
                                        if (hv_Score.Length == 0)
                                            hv_Score = 0.0;
                                    jixu: if (hv_Score * 100 >= modescore)
                                        {
                                            try
                                            {
                                                ho_ROI_0.Dispose();
                                                HOperatorSet.GenRectangle2ContourXld(out ho_ROI_0, hv_RowM, hv_ColumnM, hv_AngleM, 100, 100);
                                                ho_RegionDifference.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_RegionDifference, hv_RowM, hv_ColumnM, hv_AngleM, 100, 100);
                                                ho_Mode.Dispose();
                                                HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_RegionDifference, out ho_Mode);
                                                HOperatorSet.AreaCenter(ho_Mode, out hv_AreaMode, out hv_RowMode, out hv_ColMode);
                                                SubRow = hv_RowMode - hv_RowCenter;
                                                SubCol = hv_ColMode - hv_ColCenter;
                                                hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                                                if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                                                    hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
                                                else
                                                    hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
                                                hv_RowCut = hv_RowM;
                                                hv_ColumnCut = hv_ColumnM;
                                                DegreeAdd(CCDName, HWindowID, i_image);
                                            }
                                            catch
                                            {
                                                DegreeErrSta = true;
                                                goto DegreeErr;
                                            }
                                        }
                                        else
                                        {
                                            DegreeErrSta = true;
                                            goto DegreeErr;
                                        }
                                        #endregion
                                        break;
                                    case "4":
                                        #region Mode4
                                        try
                                        {
                                            #region 找剪口
                                            RadiusMax = (int)Math.Round((double)hv_Radius) - 5;
                                            ho_CutRegion1.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, RadiusMin);
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, RadiusMax);
                                            OTemp[SP_O] = ho_CutRegion2.CopyObj(1, -1);
                                            SP_O++;
                                            ho_CutRegion2.Dispose();
                                            HOperatorSet.Difference(OTemp[SP_O - 1], ho_CutRegion1, out ho_CutRegion2);
                                            OTemp[SP_O - 1].Dispose();
                                            SP_O = 0;
                                            ho_ImageReduced1.Dispose();
                                            HOperatorSet.ReduceDomain(ho_ImageRun, ho_CutRegion2, out ho_ImageReduced1);
                                            ho_Region.Dispose();
                                            HOperatorSet.Threshold(ho_ImageReduced1, out ho_Region, binBW, binWB);
                                            ho_ConnectedRegions.Dispose();
                                            HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
                                            ho_SelectedRegions1.Dispose();
                                            HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions1, "area", "and", Cutmin, Cutmax);
                                            HOperatorSet.CountObj(ho_SelectedRegions1, out hv_NumberCut4);
                                            #endregion
                                            if (hv_NumberCut4.D == 5)
                                            {
                                                #region 计算
                                                HOperatorSet.AreaCenter(ho_SelectedRegions1, out hv_AreaCut4, out hv_RowCut4, out hv_ColumnCut4);
                                                ho_Cross.Dispose();
                                                HOperatorSet.GenCrossContourXld(out ho_Cross, hv_RowCut4, hv_ColumnCut4, 50, 0.785398);
                                                HTuple hv_dis = new HTuple();
                                                hv_dis[0] = 0;
                                                for (hv_iCut4 = 1; (int)hv_iCut4 <= 4; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[0], hv_ColumnCut4[0], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    if (hv_dis == null)
                                                        hv_dis = new HTuple();
                                                    hv_dis[0] = hv_dis[0] + hv_DistanceCut4;
                                                }

                                                hv_dis[1] = 0;
                                                HOperatorSet.DistancePp(hv_RowCut4[0], hv_ColumnCut4[0], hv_RowCut4[1], hv_ColumnCut4[1], out hv_DistanceCut4);
                                                hv_dis[1] = hv_dis[1] + hv_DistanceCut4;
                                                for (hv_iCut4 = 2; (int)hv_iCut4 <= 4; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[1], hv_ColumnCut4[1], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    hv_dis[1] = hv_dis[1] + hv_DistanceCut4;
                                                }

                                                hv_dis[2] = 0;
                                                for (hv_iCut4 = 0; (int)hv_iCut4 <= 1; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[2], hv_ColumnCut4[2], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    hv_dis[2] = hv_dis[2] + hv_DistanceCut4;
                                                }
                                                for (hv_iCut4 = 3; (int)hv_iCut4 <= 4; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[2], hv_ColumnCut4[2], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    hv_dis[2] = hv_dis[2] + hv_DistanceCut4;
                                                }

                                                hv_dis[3] = 0;
                                                for (hv_iCut4 = 0; (int)hv_iCut4 <= 2; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[3], hv_ColumnCut4[3], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    hv_dis[3] = hv_dis[3] + hv_DistanceCut4;
                                                }
                                                HOperatorSet.DistancePp(hv_RowCut4[3], hv_ColumnCut4[3], hv_RowCut4[4], hv_ColumnCut4[4], out hv_DistanceCut4);
                                                hv_dis[3] = hv_dis[3] + hv_DistanceCut4;

                                                hv_dis[4] = 0;
                                                for (hv_iCut4 = 0; (int)hv_iCut4 <= 3; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    HOperatorSet.DistancePp(hv_RowCut4[4], hv_ColumnCut4[4], hv_RowCut4[hv_iCut4], hv_ColumnCut4[hv_iCut4], out hv_DistanceCut4);
                                                    hv_dis[4] = hv_dis[4] + hv_DistanceCut4;
                                                }

                                                hv_dismaxCut4 = hv_dis[0];
                                                hv_kCut4 = 0;
                                                for (hv_iCut4 = 1; (int)hv_iCut4 <= 4; hv_iCut4 = (int)hv_iCut4 + 1)
                                                {
                                                    if ((int)(new HTuple(((hv_dis.TupleSelect(hv_iCut4))).TupleLess(hv_dismaxCut4))) != 0)
                                                    {
                                                        hv_dismaxCut4 = hv_dis.TupleSelect(hv_iCut4);
                                                        hv_kCut4 = hv_iCut4.Clone();
                                                    }
                                                }

                                                SubRow = hv_RowCut4[hv_kCut4] - hv_RowCenter;
                                                SubCol = hv_ColumnCut4[hv_kCut4] - hv_ColCenter;
                                                hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                                                if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                                                    hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
                                                else
                                                    hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
                                                #endregion
                                                hv_RowCut = hv_RowCut4[hv_kCut4];
                                                hv_ColumnCut = hv_ColumnCut4[hv_kCut4];
                                                DegreeAdd(CCDName, HWindowID, i_image);
                                            }
                                            else
                                            {
                                                DegreeErrSta = true;
                                                goto DegreeErr;
                                            }
                                        }
                                        catch
                                        {
                                            DegreeErrSta = true;
                                            goto DegreeErr;
                                        }
                                        #endregion
                                        break;
                                    case "5":
                                        #region Mode5
                                        double Amax = 0.0, Arow = 0.0, Acol = 0.0;
                                        try
                                        {
                                            CutView();
                                            HOperatorSet.AreaCenter(ho_g1Reduced, out hv_Aarea[0], out hv_Arow[0], out hv_Acol[0]);
                                            HOperatorSet.AreaCenter(ho_g2Reduced, out hv_Aarea[1], out hv_Arow[1], out hv_Acol[1]);
                                            HOperatorSet.AreaCenter(ho_g3Reduced, out hv_Aarea[2], out hv_Arow[2], out hv_Acol[2]);
                                            HOperatorSet.AreaCenter(ho_g4Reduced, out hv_Aarea[3], out hv_Arow[3], out hv_Acol[3]);
                                            int NumB = 0;
                                            for (int Nb = 0; Nb < 4; Nb++)
                                            {
                                                if (hv_Aarea[Nb] > PAreaMin)
                                                    NumB++;
                                            }
                                            if (NumB == 1)
                                            {
                                                #region PASS
                                                if (hv_Arow[0].Length == 0)
                                                {
                                                    hv_Aarea[0] = 0;
                                                    hv_Arow[0] = 0;
                                                    hv_Acol[0] = 0;
                                                }
                                                if (hv_Arow[1].Length == 0)
                                                {
                                                    hv_Aarea[1] = 0;
                                                    hv_Arow[1] = 0;
                                                    hv_Acol[1] = 0;
                                                }
                                                if (hv_Arow[2].Length == 0)
                                                {
                                                    hv_Aarea[2] = 0;
                                                    hv_Arow[2] = 0;
                                                    hv_Acol[2] = 0;
                                                }
                                                if (hv_Arow[3].Length == 0)
                                                {
                                                    hv_Aarea[3] = 0;
                                                    hv_Arow[3] = 0;
                                                    hv_Acol[3] = 0;
                                                }
                                                Amax = hv_Aarea[0]; Arow = hv_Arow[0]; Acol = hv_Acol[0];
                                                for (int I = 1; I < 4; I++)
                                                {
                                                    if (hv_Aarea[I] > Amax)
                                                    {
                                                        Amax = hv_Aarea[I];
                                                        Arow = hv_Arow[I];
                                                        Acol = hv_Acol[I];
                                                    }
                                                }
                                                SubRow = (HTuple)Arow - hv_RowCenter;
                                                SubCol = (HTuple)Acol - hv_ColCenter;
                                                angle = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                                                if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                                                    angle = ((SubCol > 0) ? 360 - angle : 180 + angle);
                                                else
                                                    angle = ((SubCol > 0) ? angle : 180 - angle);
                                                #endregion
                                            }
                                            else
                                            {
                                                angle = 720.0;  //NG
                                            }
                                        }
                                        catch
                                        { }
                                        hv_Deg2 = angle;
                                        hv_RowCut = Arow;
                                        hv_ColumnCut = Acol;
                                        if (hv_Deg2.Length != 0 && hv_Deg2.D != 720.0)// && plDistance >= Pldis - 3.0)
                                        {
                                            DegreeAdd(CCDName, HWindowID, i_image);
                                        }
                                        else
                                        {
                                            DegreeErrSta = true;
                                            goto DegreeErr;
                                        }
                                        #endregion
                                        break;
                                    case "6":
                                        #region Mode6
                                        try
                                        {
                                            HObject ho_UsedEdges = new HObject()/*, ho_Contour = new HObject()*/, ho_ResultContours = new HObject(), ho_CrossCenter = new HObject();
                                            HObject ho_ImageMedian = new HObject(), ho_ImageEmphasize = new HObject(), ho_ModelContours = new HObject();
                                            HObject ho_TransContours = new HObject(), ho_SelectedContours = new HObject();
                                            HTuple hv_ModelID = new HTuple();
                                            HTuple hv_FirstStartPhi = new HTuple(), hv_FirstEndPhi = new HTuple(), hv_FirstPointOrder = new HTuple();
                                            try
                                            {
                                                string Path = Sys.IniPath + "\\" + Sys.CurrentProduction + "\\" + CCDName;
                                                if (!Directory.Exists(Path))
                                                {
                                                    Directory.CreateDirectory(Path);
                                                }
                                                HOperatorSet.ReadShapeModel(Path + "\\Arc_Model", out hv_ModelID);
                                            }
                                            catch
                                            {
                                                MessageBox.Show("請建立初始模組");
                                                return;
                                            }
                                            ho_ImageMedian.Dispose();
                                            HOperatorSet.MedianRect(ho_ImageRun, out ho_ImageMedian, 50, 50);
                                            ho_ImageEmphasize.Dispose();
                                            HOperatorSet.Emphasize(ho_ImageMedian, out ho_ImageEmphasize, 100, 100, 1);
                                            try
                                            {
                                                HOperatorSet.GetShapeModelContours(out ho_ModelContours, hv_ModelID, 1);
                                                HOperatorSet.FindShapeModel(ho_ImageEmphasize, hv_ModelID, (new HTuple(0)).TupleRad(), (new HTuple(360)).TupleRad(), 0.5, 0, 0.5, "least_squares", (new HTuple(6)).TupleConcat(1), 0.75, out hv_Row, out hv_Column, out hv_Angle, out hv_Score);
                                                if (hv_Score.TupleGreater(0) != 0)
                                                {
                                                    HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                                                    HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Angle[0], 0, 0, out hv_HomMat2D);
                                                    HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_Row[0], hv_Column[0], out hv_HomMat2D);
                                                    ho_TransContours.Dispose();
                                                    HOperatorSet.AffineTransContourXld(ho_ModelContours, out ho_TransContours, hv_HomMat2D);
                                                    ho_SelectedContours.Dispose();
                                                    HOperatorSet.SelectContoursXld(ho_TransContours, out ho_SelectedContours, "contour_length", 100, 99999, -0.5, 0.5);
                                                    //初步利用圓弧擬合圓
                                                    HOperatorSet.FitCircleContourXld(ho_SelectedContours, "ahuber", -1, 2, 0, 3, 2, out halcon.hv_FirstRow, out halcon.hv_FirstColumn, out halcon.hv_FirstRadius, out hv_FirstStartPhi, out hv_FirstEndPhi, out hv_FirstPointOrder);
                                                    //halcon.hv_FirstRow = hv_Row[0];
                                                    //halcon.hv_FirstColumn = hv_Column[0];
                                                }
                                                HOperatorSet.ClearShapeModel(hv_ModelID);
                                            }
                                            catch
                                            {
                                                DegreeErrSta = true;
                                                goto DegreeErr;
                                            }
                                            try
                                            {
                                                halcon.hv_ResultRow = 0;
                                                halcon.hv_ResultColumn = 0;
                                                GenAngleMode6(ho_ImageRun, out ho_UsedEdges, out ho_Contour, out ho_ResultContours, out ho_CrossCenter, out halcon.hv_ResultRow, out halcon.hv_ResultColumn, out halcon.hv_ResultRadius);
                                                HOperatorSet.AngleLx(halcon.hv_ResultRow, halcon.hv_ResultColumn, hv_RowCenter, hv_ColCenter, out hv_Angle);

                                            }
                                            catch
                                            {
                                                DegreeErrSta = true;
                                                goto DegreeErr;
                                            }
                                            if (hv_Angle.D != 0)
                                            {
                                                angle = hv_Angle.TupleDeg()+180;
                                            }
                                            else
                                            {
                                                angle = 720.0;  //NG
                                            }
                                        }
                                        catch
                                        { }
                                        hv_Deg2 = angle;
                                        hv_RowCut = halcon.hv_ResultRow;
                                        hv_ColumnCut = halcon.hv_ResultColumn;
                                        #endregion
                                        break;
                                    case "7":
                                        {
                                            if (FShape == "Circle")
                                            {
                                                MessageBox.Show("找角度mode7為矩形限定,圓形不可使用");
                                                DegreeErrSta = true;
                                                goto DegreeErr;
                                            }
                                            else
                                            {
                                                hv_RowCut = hv_RowCenter;
                                                hv_ColumnCut = hv_ColCenter;
                                                if (hv_Deg2 >= 0)
                                                {
                                                    hv_AngleDeg = hv_Deg2;
                                                }
                                                else
                                                {
                                                    hv_Deg2 = hv_Deg2 + 180;
                                                    hv_AngleDeg = hv_Deg2;

                                                }
                                            }
                                        } 
                                        break;//7為找矩形圓心時自帶出的角度(矩形限定)
                                }
                                #region 完整结果
                                HWindowID.ClearWindow();
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("red");
                                HWindowID.SetLineWidth(1);
                                HWindowID.DispCross(row, col, width, 0);
                                HWindowID.SetColor("green");
                                if (DegLChecked & hv_AngleDeg.D != 720)
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                {
                                    HWindowID.DispLine(hv_RowCut, hv_ColumnCut, hv_RowCenter, hv_ColCenter);
                                    if (AMode == "6")
                                    {
                                        ho_Circle.Dispose();
                                        HOperatorSet.GenCircle(out ho_Circle, halcon.hv_ResultRow, halcon.hv_ResultColumn, halcon.hv_ResultRadius);
                                        HWindowID.SetDraw("margin");
                                        HWindowID.SetColor("green");
                                        HWindowID.DispObj(ho_Circle);
                                        HWindowID.SetColor("blue");
                                        HOperatorSet.DispCross(HWindowID, halcon.hv_ResultRow, halcon.hv_ResultColumn, 50, 0);
                                    }
                                } 
                                //GCCD才存膠前膠後角度參數  ("GCCD2"-1)
                                if (CCDName.Substring(0,5) == "GCCD2")
                                {
                                    if (GlueOrder == 1)
                                    {
                                        hv_RowCut_Befort = hv_ColumnCut_Befort = 0;
                                        hv_RowCut_Befort = hv_RowCut;
                                        hv_ColumnCut_Befort = hv_ColumnCut;
                                    }
                                    if (GlueOrder == 2)
                                    {
                                        hv_RowCut_After = hv_ColumnCut_After = 0;
                                        hv_RowCut_After = hv_RowCut;
                                        hv_ColumnCut_After = hv_ColumnCut;
                                    }
                                }


                                //HWindowID.DispObj(ho_RCircle);
                                HWindowID.SetColor("red");
                                //HWindowID.DispObj(ho_RCircle0);
                                xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
                                {
                                    #region Waixie
                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                    disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
                                    if (MarkDegChecked)
                                    {
                                        disp_message(HWindowID, "或Mark点数有误", "", 750, 150, "red", "false");
                                    }
                                    disp_message(HWindowID, "NG1", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                                else
                                {
                                    if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4"))
                                    {
                                        hv_Row2 = hv_RowCut;
                                        hv_Column2 = hv_ColumnCut;
                                        hv_CenRadius = hv_Radius;
                                        try
                                        {
                                            //膠前膠後檢測
                                            GlueIde(halcon.Image[i_image], CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
                                            if (AMode == "6")
                                            {
                                                ho_Circle.Dispose();
                                                HOperatorSet.GenCircle(out ho_Circle, halcon.hv_ResultRow, halcon.hv_ResultColumn, halcon.hv_ResultRadius);
                                                HWindowID.SetDraw("margin");
                                                HWindowID.SetColor("green");
                                                HWindowID.DispObj(ho_Circle);
                                                HWindowID.SetColor("blue");
                                                HOperatorSet.DispCross(HWindowID, halcon.hv_ResultRow, halcon.hv_ResultColumn, 50, 0);
                                            }
                                        }
                                        catch
                                        {
                                            #region NG
                                            HWindowID.DispObj(halcon.Image[i_image]);
                                            HWindowID.SetColor("red");
                                            HWindowID.SetLineWidth(1);
                                            HWindowID.DispCross(row, col, width, 0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_RCircle);
                                            HWindowID.SetColor("red");
                                            HWindowID.DispObj(ho_RCircle0);
                                            HWindowID.SetColor("blue");
                                            if (DegLChecked & hv_AngleDeg.D != 720)
                                                HWindowID.DispObj(ho_ArrowLine);
                                            else
                                                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                            set_display_font(HWindowID, 18, "sans", "true", "false");
                                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
                                            disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                                            WriteToPlc.CMDsend[i_image] = true;
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                            #endregion
                                        }
                                    }
                                    else
                                    {

                                        if (FShape == "Circle")
                                        {
                                            #region PASS
                                            set_display_font(HWindowID, 18, "sans", "true", "false");
                                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                            disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                            set_display_font(HWindowID, 14, "sans", "true", "false");
                                            if (addFCT & (CCDName == "A1CCD1" || CCDName == "A2CCD1"))
                                            {
                                                disp_message(HWindowID, Math.Round((double)hv_valueM, 3).ToString(), "", 1780, 150, "blue", "false");
                                                disp_message(HWindowID, Math.Round((double)hv_valueLM, 3).ToString(), "", 1840, 150, "green", "false");
                                            }
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                            #endregion
                                        }
                                        else if (FShape == "Square")
                                        {
                                            #region PASS
                                            HWindowID.ClearWindow();
                                            HWindowID.DispObj(halcon.Image[i_image]);
                                            HWindowID.SetColor("red");
                                            HWindowID.SetLineWidth(1);
                                            HWindowID.DispCross(row, col, width, 0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_ResultContours);
                                            HWindowID.SetColor("red");
                                            //HWindowID.DispObj(ho_RCircle0);
                                            set_display_font(HWindowID, 18, "sans", "true", "false");
                                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                            #endregion
                                        }
                                    }
                                }
                                #endregion
                                #endregion
                            DegreeErr:
                                #region 未抓到角度
                                if (DegreeErrSta)
                                {
                                    DegreeErrSta = false;
                                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                                    if (FShape == "Circle")
                                    {
                                        HWindowID.ClearWindow();
                                        HWindowID.DispObj(halcon.Image[i_image]);
                                        HWindowID.SetColor("red");
                                        HWindowID.SetLineWidth(1);
                                        HWindowID.DispCross(row, col, width, 0);
                                        if (FShape == "Circle")
                                        {
                                            HWindowID.DispObj(ho_RCircle0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_RCircle);
                                        }
                                        else if (FShape == "Square")
                                        {
                                            HWindowID.SetDraw("margin");
                                            HWindowID.DispObj(ho_ResultContours);
                                        }
                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                        try
                                        {
                                            xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                            ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                            disp_message(HWindowID, "T:未抓到角度", "", 450, 150, "green", "false");
                                            if (AMode == "3")
                                                disp_message(HWindowID, "Score:" + Math.Round((double)(hv_Score * 100), 1), "", 600, 150, "red", "false");
                                            disp_message(HWindowID, "NG3", "", 150, 2000, "red", "false");
                                            Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                            Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                        }
                                        catch
                                        {
                                            xnum = 0.00; ynum = 0.00;
                                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                            disp_message(HWindowID, "NG4", "", 150, 2000, "red", "false");
                                        }
                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                        FrmMain.afterDT = System.DateTime.Now;
                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                        WriteToPlc.CMDsend[i_image] = true;
                                        if (saveOPic)
                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                        if (saveRPic)
                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    }
                                    else if (FShape == "Square")
                                    {
                                        #region 找矩形PASS
                                        HWindowID.ClearWindow();
                                        HWindowID.DispObj(halcon.Image[i_image]);
                                        HWindowID.SetColor("red");
                                        HWindowID.SetLineWidth(1);
                                        HWindowID.DispCross(row, col, width, 0);
                                        HWindowID.SetColor("green");
                                        HWindowID.DispObj(ho_ResultContours);
                                        HWindowID.SetColor("red");
                                        if (FShape == "Circle")
                                        {
                                            HWindowID.DispObj(ho_RCircle0);
                                        }
                                        else if (FShape == "Square")
                                        {
                                            HWindowID.SetDraw("margin");
                                            HWindowID.DispObj(ho_ResultContours);
                                        }
                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                        disp_message(HWindowID, "T:未抓到角度", "", 450, 150, "green", "false");
                                        disp_message(HWindowID, "NG3", "", 150, 2000, "green", "false");
                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                        FrmMain.afterDT = System.DateTime.Now;
                                        Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                        Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                        WriteToPlc.CMDsend[i_image] = true;
                                        if (saveOPic)
                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                        if (saveRPic)
                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                        #endregion
                                    }
                                }
                                #endregion
                            }
                            else
                            {
                                #region 不找角度
                                string Mode = iniFile.Read(CCDName, "GlueCIMode", FrmMain.propath);
                                if ((CCDName == "A1CCD2-PickUp" || CCDName == "A2CCD2-PickUp") & HCoatCh & Mode != "5")
                                {
                                    CoatView(CCDName, HWindowID, i_image, hv_RowCenter, hv_ColCenter, hv_Radius);

                                }
                                else if ((CCDName == "A1CCD2-PickUp" || CCDName == "A2CCD2-PickUp") & Mode == "5")
                                {
                                    xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                    ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                   //HOperatorSet.GetImageSize(halcon.ImageOri[i_image])
                                    if (CCDName == "A1CCD2-PickUp")
                                    {

                                        try
                                        {
                                            HObject ho_region = null;
                                            ho_region = Difference(ho_ImageRun, HWindowID, Mode5A1CCD2.OutRangeRadius, Mode5A1CCD2.InRangeRadius, hv_RowCenter, hv_ColCenter, Mode5A1CCD2.DarkLightGray, Mode5A1CCD2.Graythreshold, Mode5A1CCD2.AreaLimitUp, Mode5A1CCD2.AreaLimitDown, Mode5A1CCD2.WidthLimitUp, Mode5A1CCD2.WidthLimitDown, Mode5A1CCD2.HeightLimitUp, Mode5A1CCD2.HeightLimitDown);
                                            HTuple ReasultBeginRows = null;
                                            HTuple ReasultBeginCols = null;
                                            HTuple ReasultEndRows = null;
                                            HTuple ReasultEndCols = null;

                                            GetLine(ho_region, hv_RowCenter, hv_ColCenter, Mode5A1CCD2.DarkLightMeasure, Mode5A1CCD2.MeasureThreshold, Mode5A1CCD2.MeasureLength1, Mode5A1CCD2.MeasureLength2, Mode5A1CCD2.FirstOrLast, ho_ImageRun, HWindowID, out  ReasultBeginRows, out  ReasultBeginCols, out  ReasultEndRows, out  ReasultEndCols);
                                            bool isImageProcess = false;
                                            bool result = false;
                                            HTuple distance = null;
                                            HTuple distance1 = null;
                                            HTuple distance2 = null;
                                            isImageProcess = ImageProcess(A1CCD2.ypm, Mode5A1CCD2.Offset, Mode5A1CCD2.GapOffset, ho_ImageRun, HWindowID, hv_RowCenter, hv_ColCenter, ReasultBeginRows, ReasultBeginCols, ReasultEndRows, ReasultEndCols, out distance, out distance1, out distance2);
                                            if (isImageProcess)
                                            {


                                                result = ResultImProve(Mode5A1CCD2.LimitUp, Mode5A1CCD2.LimitDown, Mode5A1CCD2.LimitUpGap, Mode5A1CCD2.LimitDownGap, distance, distance1, distance2, HWindowID);

                                                //ho_region.DispObj(HWindowID); 
                                                if (result)
                                                {
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = "00000000";
                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                                  + "\\PASS\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                                  + "\\PASS\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());

                                                }
                                                else
                                                {

                                                    string Xnum = "00000000";
                                                    string Ynum = "00000000";
                                                    string Anglenum = "00000000";
                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                                  + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                                  + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                }
                                            }
                                            else
                                            {
                                                string Xnum = "00000000";
                                                string Ynum = "00000000";
                                                string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                              + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                              + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                distance = 0;
                                                distance1 = 0;
                                                distance2 = 0;
                                                result = false;
                                            }
                                                
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;

                                            FrmMain.strresult[FrmMain.t3x, FrmMain.t3y] = result ? "Pass" : "NG";
                                            FrmMain.strDistance[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance, 4).ToString();
                                            FrmMain.strDistance1[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance1, 4).ToString();
                                            FrmMain.strDistance2[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance2, 4).ToString();
                                            IniFile.Write("DResult", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strresult[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance1", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance1[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance2", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance2[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            FrmMain.t3x = 0; FrmMain.t3y = 0;
                                            Mode5A1CCD2.BarcodeRadius = Math.Round((double)distance, 4).ToString();
                                            Mode5A1CCD2.GapD1 = Math.Round((double)distance1, 4).ToString();
                                            Mode5A1CCD2.GapD2 = Math.Round((double)distance2, 4).ToString();
                                            Mode5A1CCD2.Result = result ? "Pass" : "NG";
                                                
                                                
                                        }
                                        catch
                                        {
                                            string Xnum = "00000000";
                                            string Ynum = "00000000";
                                            string Anglenum = "00000000";
                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            Mode5A1CCD2.BarcodeRadius = "";
                                            Mode5A1CCD2.GapD1 = "";
                                            Mode5A1CCD2.GapD2 = "";
                                            Mode5A1CCD2.Result = "Miss";

                                        }
                                    }
                                    if (CCDName == "A2CCD2-PickUp")
                                    {
                                        try
                                        {
                                            HObject ho_region = null;
                                            ho_region = Difference(ho_ImageRun, HWindowID, Mode5A2CCD2.OutRangeRadius, Mode5A2CCD2.InRangeRadius, hv_RowCenter, hv_ColCenter, Mode5A2CCD2.DarkLightGray, Mode5A2CCD2.Graythreshold, Mode5A2CCD2.AreaLimitUp, Mode5A2CCD2.AreaLimitDown, Mode5A2CCD2.WidthLimitUp, Mode5A2CCD2.WidthLimitDown, Mode5A2CCD2.HeightLimitUp, Mode5A2CCD2.HeightLimitDown);
                                            HTuple ReasultBeginRows = null;
                                            HTuple ReasultBeginCols = null;
                                            HTuple ReasultEndRows = null;
                                            HTuple ReasultEndCols = null;
                                            ho_region.DispObj(HWindowID);
                                            GetLine(ho_region, hv_RowCenter, hv_ColCenter, Mode5A2CCD2.DarkLightMeasure, Mode5A2CCD2.MeasureThreshold, Mode5A2CCD2.MeasureLength1, Mode5A2CCD2.MeasureLength2, Mode5A2CCD2.FirstOrLast, ho_ImageRun, HWindowID, out  ReasultBeginRows, out  ReasultBeginCols, out  ReasultEndRows, out  ReasultEndCols);
                                            bool isImageProcess = false;
                                            bool result = false;
                                            HTuple distance = null;
                                            HTuple distance1 = null;
                                            HTuple distance2 = null;
                                            isImageProcess = ImageProcess(A2CCD2.ypm, Mode5A2CCD2.Offset, Mode5A2CCD2.GapOffset, ho_ImageRun, HWindowID, hv_RowCenter, hv_ColCenter, ReasultBeginRows, ReasultBeginCols, ReasultEndRows, ReasultEndCols, out distance, out distance1, out distance2);
                                            if(isImageProcess)
                                            {
                                             result = ResultImProve(Mode5A2CCD2.LimitUp, Mode5A2CCD2.LimitDown, Mode5A2CCD2.LimitUpGap, Mode5A2CCD2.LimitDownGap, distance, distance1, distance2, HWindowID);

                                            if (result)
                                            {
                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                              + "\\PASS\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                              + "\\PASS\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());

                                            }
                                            else
                                            {

                                                string Xnum = "00000000";
                                                string Ynum = "00000000";
                                                string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                              + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                              + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                             }
                                          }
                                               else
                                            {
                                                string Xnum = "00000000";
                                                string Ynum = "00000000";
                                                string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                              + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                              + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                                distance = 0;
                                                distance1 = 0;
                                                distance2 = 0;
                                                result = false;
                                            }
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            FrmMain.strresult[FrmMain.t3x, FrmMain.t3y] = result ? "Pass" : "NG";
                                            FrmMain.strDistance[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance, 4).ToString();
                                            FrmMain.strDistance1[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance1, 4).ToString();
                                            FrmMain.strDistance2[FrmMain.t3x, FrmMain.t3y] = Math.Round((double)distance2, 4).ToString();
                                            IniFile.Write("DResult", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strresult[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance1", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance1[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            IniFile.Write("Ddistance2", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDistance2[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
                                            FrmMain.t3x = 0; FrmMain.t3y = 0;
                                            Mode5A2CCD2.BarcodeRadius = Math.Round((double)distance, 4).ToString();
                                            Mode5A2CCD2.GapD1 = Math.Round((double)distance1, 4).ToString();
                                            Mode5A2CCD2.GapD2 = Math.Round((double)distance2, 4).ToString();
                                            Mode5A2CCD2.Result = result ? "Pass" : "NG";
                                        }
                                        catch
                                        {
                                            string Xnum = "00000000";
                                            string Ynum = "00000000";
                                            string Anglenum = "00000000";
                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            Mode5A2CCD2.BarcodeRadius = "";
                                            Mode5A2CCD2.GapD1 = "";
                                            Mode5A2CCD2.GapD2 = "";
                                            Mode5A2CCD2.Result = "Miss";
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                                          + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                                          + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());



                                        }

                                    }



                                }
                                else if (CCDName == "QCCD" & (QCCD.AVI1IsCheck || QCCD.AVI2IsCheck))
                                {
                                    ImagePro(CCDName, HWindowID, i_image, hv_RowCenter, hv_ColCenter);
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                    string Anglenum = "00000000";
                                    WriteToPlc.CMDOKNG[i_image] = (VisionResult == "OK" ? "0001" : "0002");
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    if (!Sys.NoAutoMatic)
                                        WriteToPlc.CMDsend[i_image] = true;
                                    string pathResult = (VisionResult == "OK" ? "PASS" : "NG");
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\" + pathResult + "\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\" + pathResult + "\\ResultImage\\" + TESTtime);
                                }
                                else
                                {
                                    #region 完整结果
                                    xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                                    ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                                    if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm)
                                    {
                                        #region Waixie
                                        HWindowID.ClearWindow();
                                        HWindowID.DispObj(halcon.Image[i_image]);
                                        HWindowID.SetColor("red");
                                        HWindowID.SetLineWidth(1);
                                        HWindowID.DispCross(row, col, width, 0);
                                        HWindowID.SetColor("green");
                                        if (FShape == "Circle")
                                        {
                                            HWindowID.DispObj(ho_RCircle0);
                                            HWindowID.SetColor("red");
                                            HWindowID.DispObj(ho_RCircle);
                                        }
                                        else if (FShape == "Square")
                                        {
                                            HWindowID.DispObj(ho_ResultContours);
                                        }
                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                        disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
                                        disp_message(HWindowID, "NG(s)", "", 150, 2000, "red", "false");
                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                        FrmMain.afterDT = System.DateTime.Now;
                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                        string Anglenum = "00000000";
                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                        if (i_image != 4)
                                            WriteToPlc.CMDsend[i_image] = true;
                                        if (saveOPic)
                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                        if (saveRPic)
                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                        #endregion
                                    }
                                    else
                                    {
                                        if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2" || CCDName == "GCCD2-3" || CCDName == "GCCD2-4"))
                                        {
                                            hv_CenRadius = hv_Radius;
                                            try
                                            {
                                                GlueIde(halcon.Image[i_image], CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
                                            }
                                            catch
                                            {
                                                #region NG
                                                HWindowID.DispObj(halcon.Image[i_image]);
                                                HWindowID.SetColor("red");
                                                HWindowID.SetLineWidth(1);
                                                HWindowID.DispCross(row, col, width, 0);
                                                HWindowID.SetColor("green");
                                                if (FShape == "Circle")
                                                {
                                                    HWindowID.DispObj(ho_RCircle0);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.DispObj(ho_RCircle);
                                                }
                                                else if (FShape == "Square")
                                                {
                                                    HWindowID.SetDraw("margin");
                                                    HWindowID.DispObj(ho_ResultContours);
                                                }
                                                HWindowID.SetColor("blue");
                                                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                                disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
                                                set_display_font(HWindowID, 14, "sans", "false", "false");
                                                disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
                                                disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                FrmMain.afterDT = System.DateTime.Now;
                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                                                WriteToPlc.CMDsend[i_image] = true;
                                                if (saveOPic)
                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                if (saveRPic)
                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            if (gOutCh && (CCDName == "PCCD2-Platform1" || CCDName == "PCCD2-Platform2" ||
                                                (CCDName == "PCCD2-PickUp" & PCCD2.isPUAVI)))
                                            {
                                                GlueOutIde(CCDName, HWindowID, i_image, (double)hv_RowCenter, (double)hv_ColCenter, (double)hv_Radius, hv_RowCenter, hv_ColCenter, hv_Radius);
                                            }
                                            else
                                            {
                                                #region PASS
                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                if (!(!Sys.NoAutoMatic & i_image == 4))
                                                {
                                                    HWindowID.ClearWindow();
                                                    HWindowID.DispObj(halcon.Image[i_image]);
                                                    HWindowID.SetColor("red");
                                                    HWindowID.SetLineWidth(1);
                                                    HWindowID.DispCross(row, col, width, 0);
                                                    HWindowID.SetColor("green");
                                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                
                                                    if (FShape == "Circle")
                                                    {
                                                        HWindowID.DispObj(ho_RCircle0);
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispObj(ho_RCircle);
                                                        disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
                                                    
                                                    }
                                                    else if (FShape == "Square")
                                                    {
                                                        HWindowID.SetDraw("margin");
                                                        HWindowID.DispObj(ho_ResultContours);
                                                    }

                                                  }
                                                if (i_image == 4 & Sys.AssLocation == "Hold" & !Sys.P1DisMode2)
                                                {
                                                    hv_p1lrow = hv_RowCenter; hv_p1lcol = hv_ColCenter; hv_p1lr = hv_Radius;
                                                }
                                                if (i_image == 4 & Sys.AssLocation == "Lens" & !Sys.P1DisMode2)
                                                {
                                                    hv_p1hrow = hv_RowCenter; hv_p1hcol = hv_ColCenter; hv_p1hr = hv_Radius;
                                                }
                                                Sys.AssX = Math.Round(xnum, 4).ToString();
                                                Sys.AssY = Math.Round(ynum, 4).ToString();
                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                FrmMain.afterDT = System.DateTime.Now;
                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                string Anglenum = "00000000";
                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                if (i_image != 4)
                                                {
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                }
                                                if (i_image == 4 & Sys.P1DisMode2)
                                                {
                                                    hv_HoldRow = hv_RowCenter; hv_HoldCol = hv_ColCenter; hv_HoldRadius = hv_Radius;
                                                    DisView(CCDName, HWindowID, i_image);
                                                }
                                                #endregion
                                            }
                                        }
                                    }
                                    #endregion
                                }
                                #endregion
                            }
                            #endregion
                        Clearvar:
                            if (hv_RowCenter.D == 0.0)
                                hv_RowCenter.D = 0.0;
                        }
                        catch (Exception)
                        {
                            #region NG
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                        #endregion
                }
                catch
                {
                    #region NG
                    HWindowID.ClearWindow();
                    HWindowID.DispObj(halcon.Image[i_image]);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                    disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                    disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0002";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                    #endregion
                }
            theend:
                //if (CCDName == "A1CCD1-2" || CCDName == "A1CCD2-Platform" || CCDName == "A2CCD1-2" || CCDName == "A2CCD2-Platform" || CCDName.Substring(0, 5) == "GCCD2")
                //    XYLogger(CCDName, string.Format("{0:f3}", xnum), string.Format("{0:f3}", ynum));  //记录位置
                #region 释放变量
                //ho_Border1.Dispose();
                //ho_ContoursSplit1.Dispose();
                //ho_SelectedXLD1.Dispose();
                //ho_selectCir.Dispose();
                //ho_selectContour.Dispose();
                //ho_ObjectSelectedM1.Dispose();
                //ho_ObjectSelectedN1.Dispose();
                ho_RCircle.Dispose();
                ho_RCircle0.Dispose();
                ho_CutRegion1.Dispose();
                ho_CutRegion2.Dispose();
                ho_ImageReduced1.Dispose();
                ho_Region.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions1.Dispose();
                ho_SelectedRegionsMax.Dispose();
                ho_ROI_0.Dispose();
                ho_RegionDifference.Dispose();
                ho_Mode.Dispose();
                ho_ImageRun.Dispose();
                ho_RRegions.Dispose();
                ho_RContCircle.Dispose();
                ho_Arrow1.Dispose();
                ho_Contour.Dispose();
                ho_ContoursSplit.Dispose();
                ho_SortedContours.Dispose();
                ho_ObjectSelected2.Dispose();
                ho_Circle.Dispose();
                ho_ModelContour.Dispose();
                ho_MeasureContour.Dispose();
                hv_Deg2 = 720.0;
                hv_MarkRowmax = new HTuple();
                hv_MarkColumnmax = new HTuple();
                ho_circleR.Dispose();
                ho_ImageReducedR.Dispose();
                ho_Rectangle.Dispose();
                ho_EmptyRectangle.Dispose();
                ho_emSelectedRegion.Dispose();
                ho_SelectedRegion.Dispose();
                ho_Cross.Dispose();
                ho_Mode1MeasureContours.Dispose();
                ho_Mode1MeasuredLines.Dispose();
                ho_Mode1DLRContours.Dispose();
                ho_Mode1DLRLines.Dispose();
                ho_MeasureContours.Dispose();
                ho_MeasuredLines.Dispose();
                ho_DLRContours.Dispose();
                ho_DLRLines.Dispose();
                ho_CrossP1.Dispose();
                ho_CrossP2.Dispose();
                ho_CrossP3.Dispose();
                ho_CrossP4.Dispose();
                ho_ARegion.Dispose();
                ho_ArrowLine.Dispose();
                #endregion
            }
            catch (Exception er)
            {
                MessageBox.Show(er.ToString());
            }
        }
        void SquareView(string CCDName, HWindow HWindowID, int i_image)  //方形图像处理
        {
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            try
            {
                if (Sys.CurrentProduction != "")
                {
                    #region 图片处理及效果显示
                    HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
                    HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
                    ho_ImageRun.Dispose();
                    HOperatorSet.CopyImage(halcon.Image[i_image], out ho_ImageRun);
                    HOperatorSet.SetPart(HWindowID, 0, 0, height, width);
                    ho_FModelRegion.Dispose();
                    HOperatorSet.GenRectangle2(out ho_FModelRegion, hv_RowCh, hv_ColumnCh, hv_angle, hv_length1, hv_length2);
                    ho_FModelImage.Dispose();
                    HOperatorSet.ReduceDomain(ho_ImageRun, ho_FModelRegion, out ho_FModelImage);
                    HOperatorSet.CreateShapeModel(ho_FModelImage, "auto", (new HTuple(-90)).TupleRad()
                        , (new HTuple(180)).TupleRad(), "auto", "auto", "use_polarity", "auto", "auto", out hv_FModelID);
                    ho_FModelContours.Dispose();
                    HOperatorSet.GetShapeModelContours(out ho_FModelContours, hv_FModelID, 1);
                    HOperatorSet.AreaCenter(ho_FModelRegion, out Fhv_Area, out hv_FRow, out hv_FCol);
                    HOperatorSet.VectorAngleToRigid(0, 0, 0, hv_FRow, hv_FCol, 0, out hv_HomMat2D);
                    ho_ShowContours.Dispose();
                    HOperatorSet.AffineTransContourXld(ho_FModelContours, out ho_ShowContours, hv_HomMat2D);
                    HOperatorSet.GenRectangle2ContourXld(out ho_ShowContoursRegion, hv_RowCh, hv_ColumnCh, hv_angle, hv_length1, hv_length2);
                    //** 创建2D测量矩形模板 ***
                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                    ho_RectangleIR.Dispose();
                    HOperatorSet.GenRectangle2(out ho_RectangleIR, hv_RowCh, hv_ColumnCh, hv_angle, hv_length1, hv_length2);

                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "rectangle2", ((((((hv_RowCh.TupleConcat(
                        hv_ColumnCh))).TupleConcat(hv_angle))).TupleConcat(hv_length1))).TupleConcat(hv_length2), 25, 5, 1, 30,
                        new HTuple(), new HTuple(), out hv_RectangleIndices);
                    ho_ModelContour.Dispose();
                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                    ho_MeasureContour.Dispose();
                    HOperatorSet.GetMetrologyObjectMeasures(out ho_MeasureContour, hv_MetrologyHandle, "all", "all", out hv_F2DRow, out hv_F2DColumn);

                    HOperatorSet.SetMetrologyModelParam(hv_MetrologyHandle, "reference_system", ((hv_FRow.TupleConcat(hv_FCol))).TupleConcat(0));
                    //设置二维测量参数
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "measure_transition", hv_IRtransition);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "measure_select", hv_Select);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "measure_length1", hv_IRWidth);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "measure_length2", hv_IRdis);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "measure_threshold", hv_IRTH);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_RectangleIndices, "min_score", 0.3);

                    HOperatorSet.GetShapeModelContours(out ho_FModelContours, hv_FModelID, 1);
                    HOperatorSet.FindScaledShapeModel(ho_ImageRun, hv_FModelID, (new HTuple(-90)).TupleRad(), (new HTuple(180)).TupleRad(), 0.9, 1.1, 0.3, 1, 0.5,
                        "least_squares", 0, 0.9, out hv_RowFound, out hv_ColFound, out hv_AngleFound, out hv_ScaleFound, out hv_ScoreFound);
                    HOperatorSet.ClearShapeModel(hv_FModelID);
                    //如果找到模板
                    if ((int)(new HTuple((new HTuple(1)).TupleEqual(new HTuple(hv_RowFound.TupleLength())))) != 0)
                    {
                        HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                        HOperatorSet.HomMat2dScale(hv_HomMat2D, hv_ScaleFound, hv_ScaleFound, 0, 0, out hv_HomMat2D);
                        HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_AngleFound, 0, 0, out hv_HomMat2D);
                        HOperatorSet.HomMat2dTranslate(hv_HomMat2D, hv_RowFound - 0, hv_ColFound - 0, out hv_HomMat2D);
                        ho_ResultContours.Dispose();
                        HOperatorSet.AffineTransContourXld(ho_FModelContours, out ho_ResultContours, hv_HomMat2D);

                        //按照找到的模板位置，移动测量位置
                        HOperatorSet.AlignMetrologyModel(hv_MetrologyHandle, hv_RowFound, hv_ColFound, hv_AngleFound);
                        //应用测量
                        HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_MetrologyHandle);
                        //获取结果
                        ho_Contour.Dispose();
                        HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle, "all", "all", out hv_Row, out hv_Column);
                        ho_Cross.Dispose();
                        HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row, hv_Column, 6, hv_AngleFound);
                        if (hv_Row.Length != 0)
                        {
                            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_RectangleIndices, "all", "result_type", "all_param", out hv_FRectangleParameter);
                            ho_CrossCenter.Dispose();
                            HOperatorSet.GenCrossContourXld(out ho_CrossCenter, hv_FRectangleParameter.TupleSelect(0), hv_FRectangleParameter.TupleSelect(1), 20, 0.785398);
                            ho_Contours.Dispose();
                            HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle, "all", "all", 1.5);
                            ho_Contour.Dispose();
                            HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour, hv_MetrologyHandle, "all", "all", out hv_Row1, out hv_Column1);
                            ho_Cross.Dispose();
                            HOperatorSet.GenCrossContourXld(out ho_Cross, hv_Row1, hv_Column1, 6, 0.785398);
                            HOperatorSet.TupleDeg(hv_FRectangleParameter.TupleSelect(2), out hv_FDeg);
                            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", "row", out hv_UsedRow);
                            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "used_edges", "column", out hv_UsedColumn);
                            ho_UsedEdges.Dispose();
                            HOperatorSet.GenCrossContourXld(out ho_UsedEdges, hv_UsedRow, hv_UsedColumn, 10, (new HTuple(45)).TupleRad());
                            ho_ResultContours.Dispose();
                            HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours, hv_MetrologyHandle, "all", "all", 1.5);
                            hv_RowCenter = hv_FRectangleParameter.TupleSelect(0);
                            hv_ColCenter = hv_FRectangleParameter.TupleSelect(1);
                            HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                            hv_Deg2 = hv_FDeg;
                            ho_RCircle0.Dispose();
                            HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                            double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                            double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                            #region PASS
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            HWindowID.SetColor("red");
                            HWindowID.SetLineWidth(1);
                            HWindowID.DispCross(row, col, width, 0);
                            HWindowID.SetColor("green");
                            HWindowID.DispObj(ho_ResultContours);
                            HWindowID.SetColor("red");
                            if (FShape == "Circle")
                            {
                                HWindowID.DispObj(ho_RCircle0);
                            }
                            else if (FShape == "Square")
                            {
                                HWindowID.SetDraw("margin");
                                HWindowID.DispObj(ho_ResultContours);
                            }
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
                            WriteToPlc.CMDOKNG[i_image] = "0001";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                        else
                        {
                            #region NG
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                    }
                    else
                    {
                        disp_message(HWindowID, "没有找到模板", "window", 24, 24, "black", "true");
                    }
                    #endregion
                }
                else
                    MessageBox.Show("未选择机种");
            }
            catch
            {
                #region NG
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                set_display_font(HWindowID, 18, "sans", "true", "false");
                disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                string TESTtime = DateTime.Now.ToString("HHmmss");
                FrmMain.afterDT = System.DateTime.Now;
                string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                WriteToPlc.CMDOKNG[i_image] = "0002";
                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                WriteToPlc.CMDsend[i_image] = true;
                if (saveOPic)
                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                if (saveRPic)
                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                #endregion
            }
        }
        public void GenAngleMode6(HObject ho_Image, out HObject ho_UsedEdges, out HObject ho_Contour, out HObject ho_ResultContours, out HObject ho_CrossCenter, out HTuple hv_ResultRow, out HTuple hv_ResultColumn, out HTuple hv_ResultRadius)
        {
            hv_ResultRow = 0;
            hv_ResultColumn = 0;
            hv_ResultRadius = 0;
            ho_UsedEdges = new HObject();
            ho_Contour = new HObject();
            ho_ResultContours = new HObject();
            ho_CrossCenter = new HObject();
            if (halcon.hv_FirstRow == null || halcon.hv_FirstColumn == null)
                return;

            HObject ho_Circle = new HObject(), ho_ReducedImage = new HObject(), ho_ImageMedian = new HObject();
            HObject ho_ImageEmphasize = new HObject();

            ho_ImageMedian.Dispose();
            HOperatorSet.MedianRect(ho_Image, out ho_ImageMedian, 50, 50);
            ho_ImageEmphasize.Dispose();
            HOperatorSet.Emphasize(ho_ImageMedian, out ho_ImageEmphasize, 100, 100, 1);
            try
            {
                gen_circle_center(ho_ImageEmphasize, out ho_UsedEdges, out ho_Contour, out ho_ResultContours, out ho_CrossCenter, halcon.hv_FirstRow[0], halcon.hv_FirstColumn[0], halcon.CircleRadius, halcon.CircleLength, halcon.CircleMeasureThreshold, halcon.CircleMeasureTransition, halcon.CircleMeasureSelect, out hv_ResultRow, out hv_ResultColumn, out hv_ResultRadius);
            }
            catch
            {
            }
        }


        void BarrelViewMode2add(string CCDName, HWindow HWindowID, int i_image)//未实际应用且debug未通过
        {
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            try
            {
                #region 图片处理及效果显示
                HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
                HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
                HOperatorSet.SetPart(HWindowID, 0, 0, height, width);
                #region Region
                if (regionR != "0" && regionR != "")
                {
                    ho_circleR.Dispose();
                    HOperatorSet.GenCircle(out ho_circleR, row, col, RegionRadius);
                    ho_ImageReducedR.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_circleR, out ho_ImageReducedR);
                    ho_ImageRun.Dispose();
                    HOperatorSet.CopyImage(ho_ImageReducedR, out ho_ImageRun);
                }
                else
                {
                    ho_ImageRun.Dispose();
                    HOperatorSet.CopyImage(halcon.Image[i_image], out ho_ImageRun);
                }
                #endregion
                if (Sys.CurrentProduction == "")
                {
                    #region NG
                    HWindowID.ClearWindow();
                    HWindowID.DispObj(halcon.Image[i_image]);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                    disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                    if (Sys.CurrentProduction == "")
                        disp_message(HWindowID, "未选择机种！", "", 450, 150, "red", "false");

                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = "00000000"; string Ynum = "00000000"; string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0002";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                    return;
                    #endregion
                }
                try
                {
                    #region 粗找圆
                    ho_Border1.Dispose();
                    HOperatorSet.ThresholdSubPix(ho_ImageRun, out ho_Border1, binBvi);
                    ho_ContoursSplit1.Dispose();
                    HOperatorSet.SegmentContoursXld(ho_Border1, out ho_ContoursSplit1, "lines_circles", 5, 4, 2);
                    ho_SelectedXLD1.Dispose();
                    HOperatorSet.SelectShapeXld(ho_ContoursSplit1, out ho_SelectedXLD1, "contlength", "and", 50, 99999);
                    HOperatorSet.CountObj(ho_SelectedXLD1, out hv_Number1);
                    HOperatorSet.GenEmptyObj(out ho_selectCir);
                    for (int i = 1; i <= (int)hv_Number1; i++)
                    {
                        ho_selectContour.Dispose();
                        HOperatorSet.SelectObj(ho_SelectedXLD1, out ho_selectContour, i);
                        HTuple hv_attrib;
                        HOperatorSet.GetContourGlobalAttribXld(ho_selectContour, "cont_approx", out hv_attrib);
                        if (hv_attrib.D == 1)
                            HOperatorSet.ConcatObj(ho_selectCir, ho_selectContour, out ho_selectCir);
                    }
                    HOperatorSet.CountObj(ho_selectCir, out hv_Number1);
                    ho_ObjectSelectedM1.Dispose();
                    HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedM1, 1);
                    HOperatorSet.LengthXld(ho_ObjectSelectedM1, out hv_LengthMax1);
                    HTuple hv_max_L = 0.0;
                    hv_max_L = hv_LengthMax1.Clone();
                    for (int i = 1; i < (int)hv_Number1 - 1; i++)
                    {
                        ho_ObjectSelectedN1.Dispose();
                        HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedN1, i);
                        HOperatorSet.LengthXld(ho_ObjectSelectedN1, out hv_Length1);
                        if ((int)(new HTuple(hv_Length1.TupleGreater(hv_max_L))) != 0)
                        {
                            hv_max_L = hv_Length1.Clone();
                            ho_ObjectSelectedM1.Dispose();
                            HOperatorSet.SelectObj(ho_selectCir, out ho_ObjectSelectedM1, i);
                        }
                    }
                    HOperatorSet.FitCircleContourXld(ho_ObjectSelectedM1, "algebraic", -1, 0, 0, 3, 2,
                        out hv_Row2, out hv_Column2, out hv_Radius, out hv_StartPhi, out hv_EndPhi, out hv_PointOrder);
                    RingCrow = hv_Row2; RingCcolumn = hv_Column2;
                    #endregion
                    #region 找圆心 new
                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((RingCrow.TupleConcat(
                        RingCcolumn))).TupleConcat(ringR), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", hv_transition);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", ringWidth);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", ringTh);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                    //应用测量
                    HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_MetrologyHandle);
                    //获取结果
                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                    ho_RCircle.Dispose();
                    HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_MetrologyHandle, "all", "all", 1.5);
                    hv_RowCenter = hv_circleParameter.TupleSelect(0);
                    hv_ColCenter = hv_circleParameter.TupleSelect(1);
                    hv_Radius = hv_circleParameter.TupleSelect(2);
                    ho_RCircle0.Dispose();
                    HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                    #endregion
                    if (hv_RowCenter.D != 0.0)
                    {
                        if (hv_Radius.D > Prmin & hv_Radius.D < Prmax)
                        {
                            double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                            double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                            if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm)
                            {
                                #region Waixie
                                HWindowID.ClearWindow();
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("red");
                                HWindowID.SetLineWidth(1);
                                HWindowID.DispCross(row, col, width, 0);
                                HWindowID.SetColor("red");
                                if (FShape == "Circle")
                                {
                                    HWindowID.DispObj(ho_RCircle0);
                                    HWindowID.SetColor("green");
                                    HWindowID.DispObj(ho_RCircle);
                                }
                                else if (FShape == "Square")
                                {
                                    HWindowID.SetDraw("margin");
                                    HWindowID.DispObj(ho_ResultContours);
                                }
                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
                                disp_message(HWindowID, "NG(s)", "", 150, 2000, "red", "false");
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                            else
                            {
                                #region PASS
                                HWindowID.ClearWindow();
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("red");
                                HWindowID.SetLineWidth(1);
                                HWindowID.DispCross(row, col, width, 0);
                                HWindowID.SetColor("green");
                                HWindowID.DispObj(ho_RCircle);
                                HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_RCircle0);
                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                Sys.AssX = Math.Round(xnum, 4).ToString();
                                Sys.AssY = Math.Round(ynum, 4).ToString();
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                        }
                        else
                        {
                            #region NG
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            HWindowID.SetColor("red");
                            HWindowID.SetLineWidth(1);
                            HWindowID.DispCross(row, col, width, 0);
                            if (FShape == "Circle")
                            {
                                HWindowID.DispObj(ho_RCircle0);
                                HWindowID.SetColor("green");
                                HWindowID.DispObj(ho_RCircle);
                            }
                            else if (FShape == "Square")
                            {
                                HWindowID.SetDraw("margin");
                                HWindowID.DispObj(ho_ResultContours);
                            }
                            double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                            double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "red", "false");
                            disp_message(HWindowID, "NG(r)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                    }
                    else
                    {
                        #region NG
                        HWindowID.ClearWindow();
                        HWindowID.DispObj(halcon.Image[i_image]);
                        set_display_font(HWindowID, 18, "sans", "true", "false");
                        disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                        disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                        disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                        disp_message(HWindowID, "NG(c)", "", 150, 2000, "red", "false");
                        string TESTtime = DateTime.Now.ToString("HHmmss");
                        FrmMain.afterDT = System.DateTime.Now;
                        if (saveOPic)
                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                        if (saveRPic)
                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                        #endregion
                    }
                }
                catch (Exception)
                {
                    #region NG
                    HWindowID.ClearWindow();
                    HWindowID.DispObj(halcon.Image[i_image]);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                    disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                    disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                    #endregion
                }
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                #endregion
                #region 释放变量
                ho_ImageRun.Dispose();
                ho_RRegions.Dispose();
                ho_RContCircle.Dispose();
                ho_Arrow1.Dispose();
                ho_RCircle.Dispose();
                ho_Contour.Dispose();
                ho_ContoursSplit.Dispose();
                ho_SortedContours.Dispose();
                ho_SelectedXLD1.Dispose();
                ho_ObjectSelected2.Dispose();
                ho_Circle.Dispose();
                ho_ModelContour.Dispose();
                ho_MeasureContour.Dispose();
                ho_RCircle0.Dispose();
                hv_Deg2 = null;
                #endregion
            }
            catch
            {
                #region NG
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                set_display_font(HWindowID, 18, "sans", "true", "false");
                disp_message(HWindowID, "X:0mm", "", 150, 150, "red", "false");
                disp_message(HWindowID, "Y:0mm", "", 300, 150, "red", "false");
                disp_message(HWindowID, "T:0°", "", 450, 150, "red", "false");
                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                string TESTtime = DateTime.Now.ToString("HHmmss");
                FrmMain.afterDT = System.DateTime.Now;
                if (saveOPic)
                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                if (saveRPic)
                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                #endregion
            }
        }
        void DegreeAdd(string CCDName, HWindow HWindowID, int i_image)
        {
            #region 校正
            if (DegLChecked)
            {
                Degline(CCDName, HWindowID, i_image);
                double dd = Math.Abs((double)hv_AngleDeg - (double)hv_Deg2);
                if (dd < 90.0 & (double)hv_AngleDeg != 720.0)
                {
                    hv_Deg2 = hv_AngleDeg;
                    gen_arrow_contour_xld(out ho_ArrowLine, hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 18, 18);
                }
                if (dd > 90.0 & (double)hv_AngleDeg != 720.0)
                {
                    hv_Deg2 = hv_AngleDeg - 180;
                    gen_arrow_contour_xld(out ho_ArrowLine, hv_RowEnd, hv_ColEnd, hv_RowBegin, hv_ColBegin, 18, 18);
                }
            }
            #endregion
            #region 校正Mode3
            if (Deg3RChecked)
            {
                hv_AddDeg = hv_Deg2;
                Deg3Region(CCDName, HWindowID, i_image);
                if ((double)hv_AngleDeg != 720.0)
                {
                    hv_Deg2 = hv_AngleDeg;
                    hv_RowCut = hv_deg3row;
                    hv_ColumnCut = hv_deg3col;
                }
            }
            #endregion
            #region 辅助4
            if (MarkDegChecked)
            {
                hv_AddDeg = hv_Deg2;
                Mark4(CCDName, HWindowID, i_image);
                if (new HTuple(hv_MarkRowmax.TupleLength()) >= 1)
                {
                    hv_RowCut = hv_MarkRowmax;
                    hv_ColumnCut = hv_MarkColumnmax;
                    SubRow = hv_MarkRowmax - hv_RowCenter;
                    SubCol = hv_MarkColumnmax - hv_ColCenter;
                    hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                    if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                        hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
                    else
                        hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
                }
                else
                    hv_Deg2 = 720.0;
            }
            #endregion
        }
        void GlueIde(HObject ho_Image,string CCDName, int Order, HWindow HWindowID, int i_image, double xnum, double ynum, HTuple hv_Deg2)
        {
            HObject ho_ImageRun = new HObject();
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            double xpmi = 0.00441, ypmi = 0.00441;
            switch (i_image)
            {
                case 0: xpmi = A1CCD1.xpm; ypmi = A1CCD1.ypm; break;
                case 1: xpmi = A1CCD2.xpm; ypmi = A1CCD2.ypm; break;
                case 2: xpmi = A2CCD1.xpm; ypmi = A2CCD1.ypm; break;
                case 3: xpmi = A2CCD2.xpm; ypmi = A2CCD2.ypm; break;
                case 4: xpmi = PCCD1.xpm; ypmi = PCCD1.ypm; break;
                case 5: xpmi = PCCD2.xpm; ypmi = PCCD2.ypm; break;
                case 6: xpmi = GCCD1.xpm; ypmi = GCCD1.ypm; break;
                case 7: xpmi = GCCD2.xpm; ypmi = GCCD2.ypm; break;
                case 8: xpmi = QCCD.xpm; ypmi = QCCD.ypm; break;
            }
            HOperatorSet.GetImageSize(ho_Image, out width, out height);
            HOperatorSet.AreaCenter(ho_Image, out area, out row, out col);

            #region Region
            if (regionR != "0" && regionR != "")
            {
                ho_circleR.Dispose();
                HOperatorSet.GenCircle(out ho_circleR, row, col, RegionRadius);
                ho_ImageReducedR.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_circleR, out ho_ImageReducedR);
                ho_ImageRun.Dispose();
                HOperatorSet.CopyImage(ho_ImageReducedR, out ho_ImageRun);
            }
            else
            {
                ho_ImageRun.Dispose();
                HOperatorSet.CopyImage(ho_Image, out ho_ImageRun);
            }
            #endregion
            if (!Sys.NoAutoMatic)
            {
                if (Order == 1)
                {
                    #region 胶前取像
                    //拷貝膠前圖
                    HOperatorSet.GenEmptyObj(out ho_GlueImage_Befort);
                    ho_GlueImage_Befort.Dispose();
                    HOperatorSet.CopyImage(ho_ImageRun, out ho_GlueImage_Befort);
                    #region 方形
                    if (gMode == "0")
                    {
                        HOperatorSet.GetImageSize(ho_ImageRun, out width, out height);
                        HOperatorSet.AreaCenter(ho_ImageRun, out area, out row, out col);
                        GlueView();
                        ho_GlueQ1.Dispose();
                        HOperatorSet.CopyImage(ho_g1Reduced, out ho_GlueQ1);
                        ho_GlueQ2.Dispose();
                        HOperatorSet.CopyImage(ho_g2Reduced, out ho_GlueQ2);
                        ho_GlueQ3.Dispose();
                        HOperatorSet.CopyImage(ho_g3Reduced, out ho_GlueQ3);
                        ho_GlueQ4.Dispose();
                        HOperatorSet.CopyImage(ho_g4Reduced, out ho_GlueQ4);
                        g1Area1 = hv_g1area; g2Area1 = hv_g2area; g3Area1 = hv_g3area; g4Area1 = hv_g4area;
                        if (g1Area1 == 0 && g2Area1 == 0 && g3Area1 == 0 && g4Area1 == 0)
                        {
                            #region NG
                            HWindowID.DispObj(halcon.Image[i_image]);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                            disp_message(HWindowID, "NG(glueb)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                        else
                        {
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            HWindowID.SetColor("red");
                            HWindowID.SetLineWidth(1);
                            HWindowID.DispCross(row, col, width, 0);
                            if (FShape == "Circle")
                            {
                                HWindowID.DispObj(ho_RCircle0);
                                HWindowID.SetColor("green");
                                HWindowID.DispObj(ho_RCircle);
                            }
                            else if (FShape == "Square")
                            {
                                HWindowID.SetColor("green");
                                HWindowID.SetDraw("margin");
                                HWindowID.DispObj(ho_ResultContours);
                            }
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                            WriteToPlc.CMDOKNG[i_image] = "0001";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            if (GCCD2.Deg4Checked)
                            {
                                Deg4Plus();
                                #region show
                                HWindowID.SetColor("blue");
                                if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                    HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                #endregion
                                if (hv_P1RowCh.Length != 0)
                                {
                                    #region PASS
                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                    HWindowID.SetColor("green");
                                    HWindowID.SetLineWidth(2);
                                    HWindowID.DispObj(ho_CrossP1);
                                    HWindowID.DispObj(ho_CrossP2);
                                    HWindowID.DispObj(ho_CrossP3);
                                    HWindowID.DispObj(ho_CrossP4);
                                    disp_message(HWindowID, "1", "", hv_P1RowCh, hv_P1ColumnCh, "blue", "false");
                                    disp_message(HWindowID, "2", "", hv_P2RowCh, hv_P2ColumnCh, "blue", "false");
                                    disp_message(HWindowID, "3", "", hv_P3RowCh, hv_P3ColumnCh, "blue", "false");
                                    disp_message(HWindowID, "4", "", hv_P4RowCh, hv_P4ColumnCh, "blue", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                    double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                    double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                    double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                    double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                    double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                    double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                    double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                    string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                    string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                    string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                    string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                    string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                    string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                    string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                    string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                    WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                                else
                                {
                                    #region NG
                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                            }
                            else
                            {
                                #region PASS
                                HWindowID.SetColor("blue");
                                if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                    HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                WriteToPlc.CMDsend[i_image] = true;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                        }
                    }
                    #endregion
                    #region 环形
                    if (gMode == "1")
                    {
                        hv_rowFCenter = hv_RowCenter; hv_colFCenter = hv_ColCenter;
                        GlueView1();
                        ho_GlueQ1.Dispose();
                        HOperatorSet.CopyImage(ho_g1Reduced, out ho_GlueQ1);
                        ho_GlueQ2.Dispose();
                        HOperatorSet.CopyImage(ho_g2Reduced, out ho_GlueQ2);
                        if (Glue.Glue_Circle_2)
                        {
                            GlueView2(Glue.Glue_Circle_OuterRadius_2, Glue.Glue_Circle_InnerRadius_2, Glue.Glue_Circle_StartAngle_2, Glue.Glue_Circle_EndAngle_2);
                            ho_GlueQ1_2.Dispose();
                            HOperatorSet.CopyImage(ho_g1Reduced_2, out ho_GlueQ1_2);
                            ho_GlueQ2_2.Dispose();
                            HOperatorSet.CopyImage(ho_g2Reduced_2, out ho_GlueQ2_2);
                        }
                        #region huan
                        ho_CutRegion1.Dispose();
                        HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, MidCirRadius - RegionWidth / 2);
                        ho_CutRegion2.Dispose();
                        HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, MidCirRadius + RegionWidth / 2);
                        OTemp[SP_O] = ho_CutRegion2.CopyObj(1, -1);
                        SP_O++;
                        ho_CutRegion2.Dispose();
                        HOperatorSet.Difference(OTemp[SP_O - 1], ho_CutRegion1, out ho_CutRegion2);
                        OTemp[SP_O - 1].Dispose();
                        SP_O = 0;
                        ho_ImageReduced1.Dispose();
                        HOperatorSet.ReduceDomain(ho_ImageRun, ho_CutRegion2, out ho_ImageReduced1);
                        ho_GlueQ.Dispose();
                        HOperatorSet.CopyImage(ho_ImageReduced1, out ho_GlueQ);
                        #endregion
                        g1Area1 = hv_g1area; g2Area1 = hv_g2area;
                        if (g1Area1 == 0 && g2Area1 == 0)
                        {
                            #region NG
                            HWindowID.DispObj(halcon.Image[i_image]);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                            disp_message(HWindowID, "NG(glueb)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                        else
                        {
                            #region Show
                            hv_AddDeg = hv_Deg2;
                            HWindowID.ClearWindow();
                            HWindowID.DispObj(halcon.Image[i_image]);
                            HWindowID.SetColor("red");
                            HWindowID.SetLineWidth(1);
                            HWindowID.DispCross(row, col, width, 0);
                            if (FShape == "Circle")
                            {
                                HWindowID.DispObj(ho_RCircle0);
                                HWindowID.SetColor("green");
                                HWindowID.DispObj(ho_RCircle);
                            }
                            else if (FShape == "Square")
                            {
                                HWindowID.SetColor("green");
                                HWindowID.SetDraw("margin");
                                HWindowID.DispObj(ho_ResultContours);
                            }
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            if (AMode == "5")
                            {
                                disp_message(HWindowID, Math.Round((double)hv_Aarea[0], 3), "", hv_Arow[0], hv_Acol[0], "green", "false");
                                disp_message(HWindowID, Math.Round((double)hv_Aarea[1], 3), "", hv_Arow[1], hv_Acol[1], "green", "false");
                                disp_message(HWindowID, Math.Round((double)hv_Aarea[2], 3), "", hv_Arow[2], hv_Acol[2], "green", "false");
                                disp_message(HWindowID, Math.Round((double)hv_Aarea[3], 3), "", hv_Arow[3], hv_Acol[3], "green", "false");
                            }
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                            string Anglenum = "00000000";
                            if (GlueOrder == 1 & GQCutIsChecked)
                            {
                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                            }
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            WriteToPlc.CMDOKNG[i_image] = "0001";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            #endregion
                            if (GCCD2.Deg4Checked)
                            {
                                Deg4Plus();
                                #region show
                                HWindowID.SetColor("blue");
                                if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                    HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                #endregion
                                if (hv_P1RowCh.Length != 0)
                                {
                                    #region PASS
                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                    HWindowID.SetColor("green");
                                    HWindowID.SetLineWidth(2);
                                    HWindowID.DispObj(ho_CrossP1);
                                    HWindowID.DispObj(ho_CrossP2);
                                    HWindowID.DispObj(ho_CrossP3);
                                    HWindowID.DispObj(ho_CrossP4);
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                    double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                    double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                    double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                    double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                    double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                    double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                    double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                    string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                    string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                    string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                    string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                    string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                    string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                    string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                    string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                    WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                                else
                                {
                                    #region NG
                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                    WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                            }
                            else
                            {
                                #region PASS

                                HWindowID.SetColor("blue");
                                if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                    HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                WriteToPlc.CMDsend[i_image] = true;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                        }
                    }
                    #endregion
                    #endregion
                }
                if (Order == 2)
                {
                    #region 胶后取像

                    if (!GQCutIsChecked && ! GHCutIsChecked)
                    {
                        hv_RowCut_Befort = hv_RowCenter_Befort;
                        hv_ColumnCut_Befort = hv_ColumnCenter_Befort;
                        hv_RowCut_After = hv_RowCenter_After;
                        hv_ColumnCut_After = hv_ColumnCenter_After;
                    }
                    else if (GQCutIsChecked && ! GHCutIsChecked)
                    {
                        hv_RowCut_After = hv_RowCut_Befort;
                        hv_ColumnCut_After = hv_ColumnCut_Befort;
                    }
                    else if (!GQCutIsChecked &&  GHCutIsChecked)
                    {
                        hv_RowCut_Befort = hv_RowCut_After;
                        hv_ColumnCut_Befort = hv_ColumnCut_After;
                    }
                    //拷貝膠後圖
                    HOperatorSet.GenEmptyObj(out ho_GlueImage_After);


                    ho_GlueImage_After.Dispose();
                    HOperatorSet.CopyImage(ho_ImageRun, out ho_GlueImage_After);
                    switch (CCDName)
                    {
                        case "GCCD2-1": Glue.P1GlueDis1 = "null"; Glue.P1GlueDis2 = "null"; Glue.P1GlueDisR = ""; break;
                        case "GCCD2-2": Glue.P2GlueDis1 = "null"; Glue.P2GlueDis2 = "null"; Glue.P2GlueDisR = ""; break;
                        case "GCCD2-3": Glue.P1GlueDis1 = "null"; Glue.P1GlueDis2 = "null"; Glue.P1GlueDisR = ""; break;
                        case "GCCD2-4": Glue.P2GlueDis1 = "null"; Glue.P2GlueDis2 = "null"; Glue.P2GlueDisR = ""; break;
                    }
                    #region 方形
                    if (gMode == "0")
                    {
                        if (g1Area1 != 0)
                        {
                            GlueView();
                            #region  灰度值对比
                            ho_GlueH1.Dispose();
                            HOperatorSet.CopyImage(ho_g1Reduced, out ho_GlueH1);
                            ho_GlueDiff1.Dispose();
                            HOperatorSet.AbsDiffImage(ho_GlueH1, ho_GlueQ1, out ho_GlueDiff1, 4);
                            ho_g1Grey.Dispose();
                            HOperatorSet.Threshold(ho_GlueDiff1, out ho_g1Grey, glueGray, 255);
                            HOperatorSet.AreaCenter(ho_g1Grey, out hv_g1area, out hv_g1row, out hv_g1col);

                            ho_GlueH2.Dispose();
                            HOperatorSet.CopyImage(ho_g2Reduced, out ho_GlueH2);
                            ho_GlueDiff2.Dispose();
                            HOperatorSet.AbsDiffImage(ho_GlueH2, ho_GlueQ2, out ho_GlueDiff2, 4);
                            ho_g2Grey.Dispose();
                            HOperatorSet.Threshold(ho_GlueDiff2, out ho_g2Grey, glueGray, 255);
                            HOperatorSet.AreaCenter(ho_g2Grey, out hv_g2area, out hv_g2row, out hv_g2col);

                            ho_GlueH3.Dispose();
                            HOperatorSet.CopyImage(ho_g3Reduced, out ho_GlueH3);
                            ho_GlueDiff3.Dispose();
                            HOperatorSet.AbsDiffImage(ho_GlueH3, ho_GlueQ3, out ho_GlueDiff3, 4);
                            ho_g3Grey.Dispose();
                            HOperatorSet.Threshold(ho_GlueDiff3, out ho_g3Grey, glueGray, 255);
                            HOperatorSet.AreaCenter(ho_g3Grey, out hv_g3area, out hv_g3row, out hv_g3col);

                            ho_GlueH4.Dispose();
                            HOperatorSet.CopyImage(ho_g4Reduced, out ho_GlueH4);
                            ho_GlueDiff4.Dispose();
                            HOperatorSet.AbsDiffImage(ho_GlueH4, ho_GlueQ4, out ho_GlueDiff4, 4);
                            ho_g4Grey.Dispose();
                            HOperatorSet.Threshold(ho_GlueDiff4, out ho_g4Grey, glueGray, 255);
                            HOperatorSet.AreaCenter(ho_g4Grey, out hv_g4area, out hv_g4row, out hv_g4col);
                            #endregion
                            g1Area2 = hv_g1area; g2Area2 = hv_g2area; g3Area2 = hv_g3area; g4Area2 = hv_g4area;
                            if ((g1Area2 >= permin) && (g2Area2 >= permin) &&
                                (g3Area2 >= permin) && (g4Area2 >= permin))
                            {
                                #region PASS
                                HWindowID.ClearWindow();
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("red");
                                HWindowID.SetLineWidth(1);
                                HWindowID.DispCross(row, col, width, 0);
                                if (FShape == "Circle")
                                {
                                    HWindowID.DispObj(ho_RCircle0);
                                    HWindowID.SetColor("green");
                                    HWindowID.DispObj(ho_RCircle);
                                }
                                else if (FShape == "Square")
                                {
                                    HWindowID.SetColor("green");
                                    HWindowID.SetDraw("margin");
                                    HWindowID.DispObj(ho_ResultContours);
                                }
                                HWindowID.SetColor("blue");
                                if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                    HWindowID.DispObj(ho_ArrowLine);
                                else
                                    HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                HWindowID.DispObj(ho_g1Grey);
                                HWindowID.DispObj(ho_g2Grey);
                                HWindowID.DispObj(ho_g3Grey);
                                HWindowID.DispObj(ho_g4Grey);
                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                set_display_font(HWindowID, 14, "sans", "false", "false");
                                disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1600, 150, "green", "false");
                                disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1660, 150, "green", "false");
                                disp_message(HWindowID, Math.Round((double)g3Area2).ToString(), "", 1720, 150, "green", "false");
                                disp_message(HWindowID, Math.Round((double)g4Area2).ToString(), "", 1780, 150, "green", "false");
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                WriteToPlc.CMDsend[i_image] = true;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                            else
                            {
                                #region NG
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("blue");
                                if (g1Area2 < permin)
                                    HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_g1Grey);
                                HWindowID.SetColor("blue");
                                if (g2Area2 < permin)
                                    HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_g2Grey);
                                HWindowID.SetColor("blue");
                                if (g3Area2 < permin)
                                    HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_g3Grey);
                                HWindowID.SetColor("blue");
                                if (g4Area2 < permin)
                                    HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_g4Grey);
                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                disp_message(HWindowID, "NG(gluea)", "", 150, 2000, "red", "false");
                                set_display_font(HWindowID, 14, "sans", "false", "false");
                                disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1600, 150, "red", "false");
                                disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1660, 150, "red", "false");
                                disp_message(HWindowID, Math.Round((double)g3Area2).ToString(), "", 1720, 150, "red", "false");
                                disp_message(HWindowID, Math.Round((double)g4Area2).ToString(), "", 1780, 150, "red", "false");
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                                WriteToPlc.CMDsend[i_image] = true;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                        }
                        else
                        {
                            #region NG
                            HWindowID.DispObj(halcon.Image[i_image]);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                            disp_message(HWindowID, "NG(gluea)", "", 150, 2000, "red", "false");
                            set_display_font(HWindowID, 14, "sans", "false", "false");
                            disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1600, 150, "red", "false");
                            disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1660, 150, "red", "false");
                            disp_message(HWindowID, Math.Round((double)g3Area2).ToString(), "", 1720, 150, "red", "false");
                            disp_message(HWindowID, Math.Round((double)g4Area2).ToString(), "", 1780, 150, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            WriteToPlc.CMDOKNG[i_image] = "0003";
                            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                    }
                    #endregion
                    #region 环形
                    if (gMode == "1")
                    {
                        if (g1Area1.Length != 0)
                        {
                            hv_rowFCenter = hv_RowCenter; hv_colFCenter = hv_ColCenter;
                            GlueView1();
                            ho_gGreyUnion = null;
                            HOperatorSet.GenEmptyObj(out ho_gGreyUnion);
                            #region  灰度值对比
                            if (Glue.Glue_Follow)
                            {
                                HOperatorSet.GenEmptyObj(out ho_GlueImage_Befort_2);
                                HOperatorSet.GenEmptyObj(out ho_gGreyUnion);
                                //旋轉膠前圖
                                ho_GlueImage_Befort_2.Dispose();
                                RotateImage(ho_GlueImage_Befort, out ho_GlueImage_Befort_2, hv_RowCut_Befort, hv_ColumnCut_Befort, hv_RowCenter_Befort, hv_ColumnCenter_Befort,
                                    hv_RowCut_After, hv_ColumnCut_After, hv_RowCenter_After, hv_ColumnCenter_After, ringR, ringWidth, ringTh, hv_transition, out hv_RowCenter_Befort_2, out hv_ColumnCenter_Befort_2);
                                //檢測膠水
                                //ho_gGreyUnion.Dispose();
                                //GlueTest(ho_GlueImage_Befort, ho_GlueImage_After, out ho_gGreyUnion,
                                //   hv_RowCenter_Befort, hv_ColumnCenter_Befort, hv_RowCenter_After, hv_ColumnCenter_After, MidCirRadius + RegionWidth / 2, MidCirRadius - RegionWidth / 2, glueGray);

                                GlueTest(ho_GlueImage_Befort_2, ho_GlueImage_After, out ho_gGreyUnion,
                                    hv_RowCenter_Befort_2, hv_ColumnCenter_Befort_2, hv_RowCenter_After, hv_ColumnCenter_After, MidCirRadius + RegionWidth / 2, MidCirRadius - RegionWidth / 2, glueGray);
                                HOperatorSet.AreaCenter(ho_gGreyUnion, out hv_GlueArea, out hv_g2row, out hv_g2col);
                            }
                            else
                            {
                                ho_GlueH1.Dispose();
                                HOperatorSet.CopyImage(ho_g1Reduced, out ho_GlueH1);
                                ho_GlueDiff1.Dispose();
                                HOperatorSet.AbsDiffImage(ho_GlueH1, ho_GlueQ1, out ho_GlueDiff1, 4);
                                ho_g1Grey.Dispose();
                                HOperatorSet.Threshold(ho_GlueDiff1, out ho_g1Grey, glueGray, 255);
                                HOperatorSet.AreaCenter(ho_g1Grey, out hv_g1area, out hv_g1row, out hv_g1col);

                                ho_GlueH2.Dispose();
                                HOperatorSet.CopyImage(ho_g2Reduced, out ho_GlueH2);
                                ho_GlueDiff2.Dispose();
                                HOperatorSet.AbsDiffImage(ho_GlueH2, ho_GlueQ2, out ho_GlueDiff2, 4);
                                ho_g2Grey.Dispose();
                                HOperatorSet.Threshold(ho_GlueDiff2, out ho_g2Grey, glueGray, 255);
                                HOperatorSet.AreaCenter(ho_g2Grey, out hv_g2area, out hv_g2row, out hv_g2col);

                                ho_gGreyUnion.Dispose();
                                HOperatorSet.Union2(ho_g2Grey, ho_g1Grey, out ho_gGreyUnion);
                                hv_GlueArea = hv_g2area + hv_g1area;
                            }
                            //20200522 NAIYUAN genAngle
                            HObject ho_AllRegionXLDPF = null, ho_SelectRegionPF = null, ho_IgnoreRegionPF = null;
                            HOperatorSet.GenEmptyObj(out ho_AllRegionXLDPF);
                            HOperatorSet.GenEmptyObj(out ho_SelectRegionPF);
                            HOperatorSet.GenEmptyObj(out ho_IgnoreRegionPF);
                            hv_TotalAnglePF = 0;
                            ho_AllRegionXLDPF.Dispose(); ho_SelectRegionPF.Dispose(); ho_IgnoreRegionPF.Dispose();
                            find_ring_angle(ho_gGreyUnion, out ho_AllRegionXLDPF, out ho_SelectRegionPF, out ho_IgnoreRegionPF, hv_RowCenter, hv_ColCenter, MidCirRadius + RegionWidth / 2,
                        MidCirRadius - RegionWidth / 2, 2, 0, 360, 1, out hv_TotalAnglePF);

                            HObject ho_gGreyUnion_2 = new HObject(), ho_AllRegionXLDPF_2 = new HObject(), ho_SelectRegionPF_2 = new HObject(), ho_IgnoreRegionPF_2 = new HObject();
                            hv_TotalAnglePF_2 = 0;
                            //區域二 灰度值檢測
                            if (Glue.Glue_Circle_2)
                            {
                                GlueView2(Glue.Glue_Circle_OuterRadius_2, Glue.Glue_Circle_InnerRadius_2, Glue.Glue_Circle_StartAngle_2, Glue.Glue_Circle_EndAngle_2);
                                if (Glue.Glue_Follow)
                                {
                                    //HOperatorSet.GenEmptyObj(out ho_GlueImage_Befort_2);
                                    HOperatorSet.GenEmptyObj(out ho_gGreyUnion_2);
                                    //旋轉膠前圖前面轉過這次就不用轉了
                                    //ho_GlueImage_Befort_2.Dispose();
                                    //RotateImage(ho_GlueImage_Befort, out ho_GlueImage_Befort_2, hv_RowCut_Befort, hv_ColumnCut_Befort, hv_RowCenter_Befort, hv_ColumnCenter_Befort,
                                    //    hv_RowCut_After, hv_ColumnCut_After, hv_RowCenter_After, hv_ColumnCenter_After, out hv_RowCenter_Befort_2, out hv_ColumnCenter_Befort_2);
                                    //檢測膠水
                                    //ho_gGreyUnion_2.Dispose();
                                    //GlueTest(ho_GlueImage_Befort, ho_GlueImage_After, out ho_gGreyUnion_2,
                                    //   hv_RowCenter_Befort, hv_ColumnCenter_Befort, hv_RowCenter_After, hv_ColumnCenter_After, Glue.Glue_Circle_OuterRadius_2, Glue.Glue_Circle_InnerRadius_2, Glue.Glue_Circle_Gray_2);

                                    GlueTest(ho_GlueImage_Befort_2, ho_GlueImage_After, out ho_gGreyUnion_2,
                                        hv_RowCenter_Befort_2, hv_ColumnCenter_Befort_2, hv_RowCenter_After, hv_ColumnCenter_After, Glue.Glue_Circle_OuterRadius_2, Glue.Glue_Circle_InnerRadius_2, Glue.Glue_Circle_Gray_2);
                                    //HOperatorSet.AreaCenter(ho_gGreyUnion, out hv_GlueArea_2, out hv_g2row, out hv_g2col);
                                }
                                else
                                {
                                    ho_GlueH1_2.Dispose();
                                    HOperatorSet.CopyImage(ho_g1Reduced_2, out ho_GlueH1_2);
                                    ho_GlueDiff1.Dispose();
                                    HOperatorSet.AbsDiffImage(ho_GlueH1_2, ho_GlueQ1_2, out ho_GlueDiff1, 4);
                                    ho_g1Grey_2.Dispose();
                                    HOperatorSet.Threshold(ho_GlueDiff1, out ho_g1Grey_2, Glue.Glue_Circle_Gray_2, 255);
                                    HOperatorSet.AreaCenter(ho_g1Grey_2, out hv_g1area, out hv_g1row, out hv_g1col);

                                    ho_GlueH2_2.Dispose();
                                    HOperatorSet.CopyImage(ho_g2Reduced_2, out ho_GlueH2_2);
                                    ho_GlueDiff2.Dispose();
                                    HOperatorSet.AbsDiffImage(ho_GlueH2_2, ho_GlueQ2_2, out ho_GlueDiff2, 4);
                                    ho_g2Grey_2.Dispose();
                                    HOperatorSet.Threshold(ho_GlueDiff2, out ho_g2Grey_2, Glue.Glue_Circle_Gray_2, 255);
                                    HOperatorSet.AreaCenter(ho_g2Grey_2, out hv_g2area, out hv_g2row, out hv_g2col);

                                    ho_gGreyUnion.Dispose();
                                    HOperatorSet.Union2(ho_g2Grey_2, ho_g1Grey_2, out ho_gGreyUnion_2);
                                }
                                ho_AllRegionXLDPF_2.Dispose(); ho_SelectRegionPF_2.Dispose(); ho_IgnoreRegionPF_2.Dispose();
                                find_ring_angle(ho_gGreyUnion_2, out ho_AllRegionXLDPF_2, out ho_SelectRegionPF_2, out ho_IgnoreRegionPF_2, hv_RowCenter, hv_ColCenter, Glue.Glue_Circle_OuterRadius_2,
                            Glue.Glue_Circle_InnerRadius_2, 2, 0, 360, 1, out hv_TotalAnglePF_2);

                            }
                            switch (CCDName)
                            {
                                case "GCCD2-1":
                                    Glue.ResultGlueArea_CCD1 = 0;
                                    Glue.ResultGlueAngle_CCD1 = 0;
                                    Glue.ResultGlueArea_CCD1 = hv_GlueArea.D;
                                    Glue.ResultGlueAngle_CCD1 = hv_TotalAnglePF.D;
                                    Glue.ResultGlueAngle_2_CCD1 = hv_TotalAnglePF_2.D;
                                    break;
                                case "GCCD2-2":
                                    Glue.ResultGlueArea_CCD2 = 0;
                                    Glue.ResultGlueAngle_CCD2 = 0;
                                    Glue.ResultGlueArea_CCD2 = hv_GlueArea.D;
                                    Glue.ResultGlueAngle_CCD2 = hv_TotalAnglePF.D;
                                    Glue.ResultGlueAngle_2_CCD2 = hv_TotalAnglePF_2.D;
                                    break;
                                case "GCCD2-3":
                                    Glue.ResultGlueArea_CCD1 = 0;
                                    Glue.ResultGlueAngle_CCD1 = 0;
                                    Glue.ResultGlueArea_CCD1 = hv_GlueArea.D;
                                    Glue.ResultGlueAngle_CCD1 = hv_TotalAnglePF.D;
                                    Glue.ResultGlueAngle_2_CCD1 = hv_TotalAnglePF_2.D;
                                    break;
                                case "GCCD2-4":
                                    Glue.ResultGlueArea_CCD2 = 0;
                                    Glue.ResultGlueAngle_CCD2 = 0;
                                    Glue.ResultGlueArea_CCD2 = hv_GlueArea.D;
                                    Glue.ResultGlueAngle_CCD2 = hv_TotalAnglePF.D;
                                    Glue.ResultGlueAngle_2_CCD2 = hv_TotalAnglePF_2.D;
                                    break;
                            }
                            #region huan
                            ho_CutRegion1.Dispose();
                            HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, MidCirRadius - RegionWidth / 2);
                            ho_CutRegion2.Dispose();
                            HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, MidCirRadius + RegionWidth / 2);
                            OTemp[SP_O] = ho_CutRegion2.CopyObj(1, -1);
                            SP_O++;
                            ho_CutRegion2.Dispose();
                            HOperatorSet.Difference(OTemp[SP_O - 1], ho_CutRegion1, out ho_CutRegion2);
                            OTemp[SP_O - 1].Dispose();
                            SP_O = 0;
                            ho_ImageReduced1.Dispose();
                            HOperatorSet.ReduceDomain(ho_ImageRun, ho_CutRegion2, out ho_ImageReduced1);
                            ho_GlueH.Dispose();
                            HOperatorSet.CopyImage(ho_ImageReduced1, out ho_GlueH);
                            #endregion
                            ho_GlueDiff2.Dispose();
                            HOperatorSet.AbsDiffImage(ho_GlueH, ho_GlueQ, out ho_GlueDiff2, 4);
                            ho_AddGrey.Dispose();
                            HOperatorSet.Threshold(ho_GlueDiff2, out ho_AddGrey, glueGray, 255);
                            HOperatorSet.AreaCenter(ho_AddGrey, out hv_Addarea, out hv_Addrow, out hv_Addcol);
                            #endregion
                            bool Glue_Circle_2 = true;
                            if (Glue.Glue_Circle_2 && hv_TotalAnglePF_2.D < Glue.GlueAngleRatio_2)
                                Glue_Circle_2 = false;
                            g1Area2 = hv_g1area; g2Area2 = hv_g2area;
                            //膠水OKNG判定
                            if ((hv_GlueArea <= permax) && (hv_GlueArea >= permin) && hv_TotalAnglePF.D >= Glue.GlueAngleRatio && Glue_Circle_2/*&&(g1Area2 <= permax) && (g1Area2 >= permin) && (g2Area2 <= permax) && (g2Area2 >= permin)*/)
                            {
                                if (!(GlueOrder == 2 & GHCutIsChecked))
                                    hv_Deg2 = 0.000;
                                hv_AddDeg = hv_Deg2;
                                hv_gapRegionCount = 2;
                                //輔助-斷膠檢測
                                if (GlueBreakch)
                                {
                                    #region  break
                                    //ho_gGreyUnion.Dispose();
                                    //HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                    ho_RegionFillUp.Dispose();
                                    HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                    ho_BinImage.Dispose();
                                    HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 0, 255, width, height);
                                    ho_BreakIn.Dispose();
                                    HOperatorSet.GenCircle(out ho_BreakIn, hv_RowCenter, hv_ColCenter, MidCirRadius - 15);
                                    ho_BreakOut.Dispose();
                                    HOperatorSet.GenCircle(out ho_BreakOut, hv_RowCenter, hv_ColCenter, MidCirRadius + 15);
                                    ho_BreakDiff.Dispose();
                                    HOperatorSet.Difference(ho_BreakOut, ho_BreakIn, out ho_BreakDiff);
                                    ho_BreakReduced.Dispose();
                                    HOperatorSet.ReduceDomain(ho_BinImage, ho_BreakDiff, out ho_BreakReduced);
                                    ho_BreakLregion.Dispose();
                                    HOperatorSet.Threshold(ho_BreakReduced, out ho_BreakLregion, 128, 255);

                                    ho_MSERLight.Dispose();
                                    HOperatorSet.SegmentImageMser(ho_BreakReduced, out ho_MSERDark, out ho_MSERLight,
                                        "light", 50 * 8, new HTuple(), 15, new HTuple(), new HTuple());
                                    ho_Skeleton.Dispose();
                                    HOperatorSet.Skeleton(ho_MSERLight, out ho_Skeleton);
                                    HOperatorSet.CountObj(ho_Skeleton, out hv_count);
                                    HOperatorSet.TupleGenConst(hv_count, 0, out hv_gap_select_maskall);
                                    hv_gap_width_max_offset = 5;
                                    hv_ideal_gap_width = 30;
                                    hv_min_gap_width = hv_ideal_gap_width - hv_gap_width_max_offset;
                                    for (int i_b = 1; i_b <= hv_count; i_b++)
                                    {
                                        ho_gapRegion_candidate.Dispose();
                                        HOperatorSet.SelectObj(ho_MSERLight, out ho_gapRegion_candidate, i_b);
                                        ho_ObjectSelected2.Dispose();
                                        HOperatorSet.SelectObj(ho_Skeleton, out ho_ObjectSelected2, i_b);
                                        HOperatorSet.GetRegionPoints(ho_ObjectSelected2, out hv_Rows2, out hv_Columns2);
                                        HOperatorSet.TupleLength(hv_Rows2, out hv_Length4);
                                        hv_gap_select_mask1 = 0;
                                        HTuple end_val = hv_Length4 - 5;
                                        HTuple step_val = 5;
                                        for (hv_n = 1; hv_n.Continue(end_val, step_val); hv_n = hv_n.TupleAdd(step_val))
                                        {
                                            hv_end_row = (hv_Rows2.TupleSelect(hv_n)) + (((hv_Rows2.TupleSelect(hv_n)) - (hv_RowCenter)) * 0.2);
                                            hv_end_col = (hv_Columns2.TupleSelect(hv_n)) + (((hv_Columns2.TupleSelect(hv_n)) - (hv_ColCenter)) * 0.2);
                                            #region LineMeasure
                                            //Measure 03: Code generated by Measure 03
                                            //Measure 03: Prepare measurement
                                            hv_AmplitudeThreshold = 40;
                                            hv_RoiWidthLen2 = 5;
                                            HOperatorSet.SetSystem("int_zooming", "true");
                                            //Measure 03: Coordinates for line Measure 03 [0]
                                            hv_LineRowStart_Measure_03_0 = hv_circleParameter.TupleSelect(0);
                                            hv_LineColumnStart_Measure_03_0 = hv_circleParameter.TupleSelect(1);
                                            hv_LineRowEnd_Measure_03_0 = hv_end_row.Clone();
                                            hv_LineColumnEnd_Measure_03_0 = hv_end_col.Clone();
                                            //Measure 03: Convert coordinates to rectangle2 type
                                            hv_TmpCtrl_Row = 0.5 * (hv_LineRowStart_Measure_03_0 + hv_LineRowEnd_Measure_03_0);
                                            hv_TmpCtrl_Column = 0.5 * (hv_LineColumnStart_Measure_03_0 + hv_LineColumnEnd_Measure_03_0);
                                            hv_TmpCtrl_Dr = hv_LineRowStart_Measure_03_0 - hv_LineRowEnd_Measure_03_0;
                                            hv_TmpCtrl_Dc = hv_LineColumnEnd_Measure_03_0 - hv_LineColumnStart_Measure_03_0;
                                            hv_TmpCtrl_Phi = hv_TmpCtrl_Dr.TupleAtan2(hv_TmpCtrl_Dc);
                                            hv_TmpCtrl_Len1 = 0.5 * ((((hv_TmpCtrl_Dr * hv_TmpCtrl_Dr) + (hv_TmpCtrl_Dc * hv_TmpCtrl_Dc))).TupleSqrt());
                                            hv_TmpCtrl_Len2 = hv_RoiWidthLen2.Clone();
                                            //Measure 03: Create measure for line Measure 03 [0]
                                            //Measure 03: Attention: This assumes all images have the same size!
                                            HOperatorSet.GenMeasureRectangle2(hv_TmpCtrl_Row, hv_TmpCtrl_Column,
                                                hv_TmpCtrl_Phi, hv_TmpCtrl_Len1, hv_TmpCtrl_Len2, 2592, 1944, "nearest_neighbor",
                                                out hv_MsrHandle_Measure_03_0);
                                            //Measure 03: ***************************************************************
                                            //Measure 03: * The code which follows is to be executed once / measurement *
                                            //Measure 03: ***************************************************************
                                            //Measure 03: The image is assumed to be made available in the
                                            //Measure 03: variable last displayed in the graphics window
                                            //Measure 03: Execute measurements
                                            HOperatorSet.MeasurePos(ho_BinImage, hv_MsrHandle_Measure_03_0, 1, hv_AmplitudeThreshold,
                                                "all", "all", out hv_Row_Measure_03_0, out hv_Column_Measure_03_0,
                                                out hv_Amplitude_Measure_03_0, out hv_Distance_Measure_03_0);
                                            //Measure 03: Do something with the results
                                            //Measure 03: Clear measure when done
                                            HOperatorSet.CloseMeasure(hv_MsrHandle_Measure_03_0);
                                            #endregion
                                            HOperatorSet.TupleLength(hv_Row_Measure_03_0, out hv_Length5);
                                            if ((int)(new HTuple(hv_Length5.TupleEqual(0))) != 0)
                                            {
                                                hv_gap_select_mask1 = hv_gap_select_mask1 + 1;
                                            }
                                        }
                                        if ((int)(new HTuple(hv_gap_select_mask1.TupleNotEqual(0))) != 0)
                                        {
                                            if (hv_gap_select_maskall == null)
                                                hv_gap_select_maskall = new HTuple();
                                            hv_gap_select_maskall[i_b - 1] = 1;
                                        }
                                    }
                                    ho_gapRegion.Dispose();
                                    select_mask_obj(ho_MSERLight, out ho_gapRegion, hv_gap_select_maskall);
                                    HOperatorSet.CountObj(ho_gapRegion, out hv_gapRegionCount);
                                    #endregion
                                }
                                //斷膠檢測判定
                                if (hv_gapRegionCount <= 2)
                                {
                                    if (gblimitCheck)
                                    {
                                        #region 内外溢胶
                                        #region  圆环
                                        ho_CutRegion1.Dispose();
                                        HOperatorSet.GenCircle(out ho_CutRegion1, hv_RowCenter, hv_ColCenter, GERadiusMin);
                                        ho_CutRegion2.Dispose();
                                        HOperatorSet.GenCircle(out ho_CutRegion2, hv_RowCenter, hv_ColCenter, GERadiusMax);
                                        ho_ImageReduced1.Dispose();
                                        HOperatorSet.Difference(ho_CutRegion2, ho_CutRegion1, out ho_ImageReduced1);
                                        #endregion
                                        #region  内圆环
                                        ho_CutRegion10.Dispose();
                                        HOperatorSet.GenCircle(out ho_CutRegion10, hv_RowCenter, hv_ColCenter, GERadiusMin - 50);
                                        ho_ImageReducedI.Dispose();
                                        HOperatorSet.Difference(ho_CutRegion1, ho_CutRegion10, out ho_ImageReducedI);
                                        #endregion
                                        #region  外圆环
                                        ho_CutRegion20.Dispose();
                                        HOperatorSet.GenCircle(out ho_CutRegion20, hv_RowCenter, hv_ColCenter, GERadiusMax + 50);
                                        ho_ImageReducedO.Dispose();
                                        HOperatorSet.Difference(ho_CutRegion20, ho_CutRegion2, out ho_ImageReducedO);
                                        #endregion
                                        #region 溢胶
                                        ho_GlueUnion.Dispose();
                                        HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_GlueUnion);
                                        ho_GrayDiff.Dispose();
                                        HOperatorSet.Difference(ho_GlueUnion, ho_ImageReduced1, out ho_GrayDiff);
                                        ho_GrayDiffSelect.Dispose();
                                        HOperatorSet.SelectShape(ho_GrayDiff, out ho_GrayDiffSelect, "area", "and", 20, 99999);
                                        ho_GrayDiffSelectIn.Dispose(); //内溢
                                        HOperatorSet.Difference(ho_GrayDiffSelect, ho_ImageReducedO, out ho_GrayDiffSelectIn);
                                        HOperatorSet.AreaCenter(ho_GrayDiffSelectIn, out hv_diffIArea, out hv_diffRow, out hv_diffCol);
                                        ho_GrayDiffSelectOut.Dispose(); //外溢
                                        HOperatorSet.Difference(ho_GrayDiffSelect, ho_ImageReducedI, out ho_GrayDiffSelectOut);
                                        HOperatorSet.AreaCenter(ho_GrayDiffSelectOut, out hv_diffOArea, out hv_diffRow, out hv_diffCol);
                                        if (hv_diffIArea.Length == 0)
                                            hv_diffIArea = 0;
                                        if (hv_diffOArea.Length == 0)
                                            hv_diffOArea = 0;
                                        #endregion
                                        #region Show
                                        HWindowID.ClearWindow();
                                        HWindowID.DispObj(halcon.Image[i_image]);
                                        HWindowID.SetColor("red");
                                        HWindowID.SetLineWidth(1);
                                        HWindowID.DispCross(row, col, width, 0);
                                        if (FShape == "Circle")
                                        {
                                            HWindowID.DispObj(ho_RCircle0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_RCircle);
                                        }
                                        else if (FShape == "Square")
                                        {
                                            HWindowID.SetColor("green");
                                            HWindowID.SetDraw("margin");
                                            HWindowID.DispObj(ho_ResultContours);
                                        }
                                        HWindowID.SetColor("blue");
                                        if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                            HWindowID.DispObj(ho_ArrowLine);
                                        else
                                            HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                        if (IsGlueColorChecked)
                                        {
                                            HWindowID.SetColor("yellow");
                                            HWindowID.SetDraw("fill");
                                            HWindowID.DispObj(ho_g1Grey);
                                            HWindowID.DispObj(ho_g2Grey);
                                            if (Glue.Glue_Circle_2)
                                            {
                                                HWindowID.SetColor("orange");
                                                HWindowID.DispObj(ho_gGreyUnion_2);
                                            }
                                        }
                                        HWindowID.SetColor("cyan");
                                        HWindowID.DispObj(ho_GrayDiffSelectIn);
                                        HWindowID.DispObj(ho_GrayDiffSelectOut);
                                        HWindowID.SetColor("yellow");
                                        ho_DiffCirIn.Dispose();
                                        HOperatorSet.GenCircleContourXld(out ho_DiffCirIn, hv_RowCenter, hv_ColCenter, GERadiusMin, 0, 6.28318, "positive", 1);
                                        HWindowID.DispObj(ho_DiffCirIn);
                                        HWindowID.SetLineWidth(2);
                                        ho_DiffCirOut.Dispose();
                                        HOperatorSet.GenCircleContourXld(out ho_DiffCirOut, hv_RowCenter, hv_ColCenter, GERadiusMax, 0, 6.28318, "positive", 1);
                                        HWindowID.DispObj(ho_DiffCirOut);
                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                        disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1440, 150, "blue", "false");
                                        disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1520, 150, "blue", "false");
                                        disp_message(HWindowID, "GlueAngle:" + Math.Round((hv_TotalAnglePF.D)).ToString(), "", 1600, 150, "green", "false");

                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                        if (GlueOrder == 2 & GHCutIsChecked)
                                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                        #endregion
                                        if (Math.Round((double)hv_diffIArea.D) <= limitAreaminIn && Math.Round((double)hv_diffOArea.D) <= limitAreaminOut)
                                        {
                                            if (Glue.WidthIsChecked || Glue.InOutIsChecked)
                                            {
                                                if (Glue.WidthIsChecked & !Glue.InOutIsChecked)
                                                {
                                                    #region 胶宽
                                                    double WidthMax = 0;
                                                    try
                                                    {
                                                        #region
                                                        Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                        ho_gGreyUnion.Dispose();
                                                        HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                        ho_RegionFillUp.Dispose();
                                                        HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                        ho_BinImage.Dispose();
                                                        HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                        hv_SpaceDis = 2 * Math.PI * hv_Radius / 30;
                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        ho_ContourIn.Dispose();
                                                        HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourIn, hv_MetrologyHandle, "all", "all", out hv_RowIn, out hv_ColumnIn);
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        ho_ContourOut.Dispose();
                                                        HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourOut, hv_MetrologyHandle, "all", "all", out hv_RowOut, out hv_ColumnOut);

                                                        HOperatorSet.DistancePp(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut, out hv_Distance);
                                                        HOperatorSet.TupleMax(hv_Distance, out hv_Max);
                                                        HOperatorSet.TupleLength(hv_Distance, out hv_Length);
                                                        hv_k_m = 0;
                                                        HTuple end_val187 = hv_Length - 1;
                                                        HTuple step_val187 = 1;
                                                        for (hv_m = 0; hv_m.Continue(end_val187, step_val187); hv_m = hv_m.TupleAdd(step_val187))
                                                        {
                                                            if ((int)(new HTuple(((hv_Distance.TupleSelect(hv_m))).TupleEqual(hv_Max))) != 0)
                                                            {
                                                                hv_k_m = hv_m.Clone();
                                                            }
                                                        }
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                        #endregion
                                                        WidthMax = Math.Round((double)hv_Max * Glue.Gxpm, 3);
                                                        Glue.GlueWidth = WidthMax;
                                                        if (WidthMax < Glue.WidthMaxSet)
                                                        {
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                            HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                            HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                            HWindowID.SetColor("red");
                                                            HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "green", "false");
                                                            if (DisAddCh)
                                                            {
                                                                #region jianxi
                                                                hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                                double distance = hv_grayDistance;
                                                                double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                                cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                                FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                                hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                                hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                                ho_BinImage.Dispose();
                                                                HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                                #region 区域1
                                                                ho_g1Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                                HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                                if (hv_AddArea1.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                int max1, max2;
                                                                if (hv_AddArea1[0] > hv_AddArea1[1])
                                                                {
                                                                    max1 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                    max2 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                    max2 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea1.Length; i++)
                                                                {
                                                                    if (hv_AddArea1[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR12 = ho_AR11;
                                                                        max1 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                    }
                                                                    else if (hv_AddArea1[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                                 out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                                #region jisuan2
                                                                a11.X = (float)((double)hv_Add1Col1);
                                                                a11.Y = (float)((double)hv_Add1Row1);
                                                                a12.X = (float)((double)hv_Add1Col2);
                                                                a12.Y = (float)((double)hv_Add1Row2);

                                                                b11.X = (float)((double)hv_ColCenter);
                                                                b11.Y = (float)((double)hv_RowCenter);
                                                                b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                                b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                                var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                                var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                                var C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                                double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                                hv_DisMin1 = am1 * GCCD2.xpm;
                                                                #endregion
                                                                #region 区域2
                                                                ho_g2Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                                HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                                if (hv_AddArea2.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                if (hv_AddArea2[0] > hv_AddArea2[1])
                                                                {
                                                                    max1 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                    max2 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                    max2 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea2.Length; i++)
                                                                {
                                                                    if (hv_AddArea2[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR22 = ho_AR21;
                                                                        max1 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                    }
                                                                    else if (hv_AddArea2[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                                 out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                                #region jisuan2
                                                                a21.X = (float)((double)hv_Add2Col1);
                                                                a21.Y = (float)((double)hv_Add2Row1);
                                                                a22.X = (float)((double)hv_Add2Col2);
                                                                a22.Y = (float)((double)hv_Add2Row2);

                                                                b21.X = (float)((double)hv_ColCenter);
                                                                b21.Y = (float)((double)hv_RowCenter);
                                                                b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                                b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                                A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                                B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                                C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                                double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                                hv_DisMin2 = am2 * GCCD2.xpm;
                                                                #endregion
                                                                string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                                string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                                switch (CCDName)
                                                                {
                                                                    case "GCCD2-1": Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2; break;
                                                                    case "GCCD2-2": Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2; break;
                                                                    case "GCCD2-3": Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2; break;
                                                                    case "GCCD2-4": Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2; break;
                                                                }
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                {
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    if (GCCD2.Deg4Checked)
                                                                    {
                                                                        #region 4点
                                                                        Deg4Plus();
                                                                        if (hv_P1RowCh.Length != 0)
                                                                        {
                                                                            #region PASS
                                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                            HWindowID.SetColor("green");
                                                                            HWindowID.SetLineWidth(2);
                                                                            HWindowID.DispObj(ho_CrossP1);
                                                                            HWindowID.DispObj(ho_CrossP2);
                                                                            HWindowID.DispObj(ho_CrossP3);
                                                                            HWindowID.DispObj(ho_CrossP4);
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                            double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                            double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                            double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                            double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                            double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                            double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                            double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                            string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                            string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                            string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                            string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                            string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                            string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                            string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                            string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                            WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            #region NG
                                                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                            WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        //string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                        //string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                        //string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                        //WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        //WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    switch (CCDName)
                                                                    {
                                                                        case "GCCD2-1": Glue.P1GlueDisR = "PASS"; break;
                                                                        case "GCCD2-2": Glue.P2GlueDisR = "PASS"; break;
                                                                        case "GCCD2-3": Glue.P1GlueDisR = "PASS"; break;
                                                                        case "GCCD2-4": Glue.P2GlueDisR = "PASS"; break;
                                                                    }
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                    if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                    switch (CCDName)
                                                                    {
                                                                        case "GCCD2-1": Glue.P1GlueDisR = "NG"; break;
                                                                        case "GCCD2-2": Glue.P2GlueDisR = "NG"; break;
                                                                        case "GCCD2-3": Glue.P1GlueDisR = "NG"; break;
                                                                        case "GCCD2-4": Glue.P2GlueDisR = "NG"; break;
                                                                    }
                                                                }
                                                            DisNG:
                                                                if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                                {
                                                                    #region NG
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_AddArea1.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b12.Y, b12.X, "cyan", "false");
                                                                    if (hv_AddArea2.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b22.Y, b22.X, "cyan", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                    #endregion
                                                                    switch (CCDName)
                                                                    {
                                                                        case "GCCD2-1": Glue.P1GlueDisR = "NG"; break;
                                                                        case "GCCD2-2": Glue.P2GlueDisR = "NG"; break;
                                                                        case "GCCD2-3": Glue.P1GlueDisR = "NG"; break;
                                                                        case "GCCD2-4": Glue.P2GlueDisR = "NG"; break;
                                                                    }
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            #region NG
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                            HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                            HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                            HWindowID.SetColor("red");
                                                            HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                            disp_message(HWindowID, "NG", "", 150, 2000, "green", "false");
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "GlueWidth_Max:" + hv_Max + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0003";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        #region NG
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                        disp_message(HWindowID, "GlueWidth_Max:" + hv_Max + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                if (!Glue.WidthIsChecked & Glue.InOutIsChecked)
                                                {
                                                    #region 内外径
                                                    try
                                                    {
                                                        #region 处理
                                                        Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                        ho_gGreyUnion.Dispose();
                                                        HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                        ho_RegionFillUp.Dispose();
                                                        HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                        ho_BinImage.Dispose();
                                                        HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);

                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                        ho_ROutCir.Dispose();
                                                        HOperatorSet.GetMetrologyObjectResultContour(out ho_ROutCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                        Thread.Sleep(5);
                                                        hv_RowOutCenter = hv_circleParameter.TupleSelect(0);
                                                        hv_ColOutCenter = hv_circleParameter.TupleSelect(1);
                                                        hv_RadiusOutCenter = hv_circleParameter.TupleSelect(2);
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);

                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                        ho_RInCir.Dispose();
                                                        HOperatorSet.GetMetrologyObjectResultContour(out ho_RInCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                        Thread.Sleep(5);
                                                        hv_RowInCenter = hv_circleParameter.TupleSelect(0);
                                                        hv_ColInCenter = hv_circleParameter.TupleSelect(1);
                                                        hv_RadiusInCenter = hv_circleParameter.TupleSelect(2);
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                        #endregion
                                                        Glue.ID = Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3) + Glue.Offset_InnerRadius;
                                                        Glue.OD = Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3) + Glue.Offset_OuterRadius;
                                                        double DIO = Glue.ID + (Glue.OD - Glue.ID) / 2;
                                                        Glue.GlueD = DIO;
                                                        if ((double)hv_RadiusInCenter > Glue.InRMin & (double)hv_RadiusOutCenter < Glue.OutRMax)
                                                        {
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispObj(ho_RInCir);
                                                            HWindowID.DispObj(ho_ROutCir);
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "DI:" + Math.Round((double)hv_RadiusInCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + Math.Round((double)hv_RadiusOutCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "green", "false");
                                                            if (DisAddCh)
                                                            {
                                                                #region jianxi
                                                                hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                                double distance = hv_grayDistance;
                                                                double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                                cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                                FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                                hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                                hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                                ho_BinImage.Dispose();
                                                                HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                                #region 区域1
                                                                ho_g1Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                                HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                                if (hv_AddArea1.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                int max1, max2;
                                                                if (hv_AddArea1[0] > hv_AddArea1[1])
                                                                {
                                                                    max1 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                    max2 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                    max2 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea1.Length; i++)
                                                                {
                                                                    if (hv_AddArea1[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR12 = ho_AR11;
                                                                        max1 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                    }
                                                                    else if (hv_AddArea1[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                                 out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                                #region jisuan2
                                                                a11.X = (float)((double)hv_Add1Col1);
                                                                a11.Y = (float)((double)hv_Add1Row1);
                                                                a12.X = (float)((double)hv_Add1Col2);
                                                                a12.Y = (float)((double)hv_Add1Row2);

                                                                b11.X = (float)((double)hv_ColCenter);
                                                                b11.Y = (float)((double)hv_RowCenter);
                                                                b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                                b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                                var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                                var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                                var C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                                double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                                hv_DisMin1 = am1 * GCCD2.xpm;
                                                                #endregion
                                                                #region 区域2
                                                                ho_g2Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                                HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                                if (hv_AddArea2.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                if (hv_AddArea2[0] > hv_AddArea2[1])
                                                                {
                                                                    max1 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                    max2 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                    max2 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea2.Length; i++)
                                                                {
                                                                    if (hv_AddArea2[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR22 = ho_AR21;
                                                                        max1 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                    }
                                                                    else if (hv_AddArea2[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                                 out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                                #region jisuan2
                                                                a21.X = (float)((double)hv_Add2Col1);
                                                                a21.Y = (float)((double)hv_Add2Row1);
                                                                a22.X = (float)((double)hv_Add2Col2);
                                                                a22.Y = (float)((double)hv_Add2Row2);

                                                                b21.X = (float)((double)hv_ColCenter);
                                                                b21.Y = (float)((double)hv_RowCenter);
                                                                b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                                b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                                A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                                B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                                C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                                double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                                hv_DisMin2 = am2 * GCCD2.xpm;
                                                                #endregion
                                                                //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                                //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                                string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                                string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                                if (CCDName == "GCCD2-1"||CCDName == "GCCD2-3")
                                                                {
                                                                    Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                                }
                                                                if (CCDName == "GCCD2-2" || CCDName == "GCCD2-4")
                                                                {
                                                                    Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                                }
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                {
                                                                    //HWindowID.SetColor("cyan");
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    if (GCCD2.Deg4Checked)
                                                                    {
                                                                        #region 4点
                                                                        Deg4Plus();
                                                                        if (hv_P1RowCh.Length != 0)
                                                                        {
                                                                            #region PASS
                                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                            HWindowID.SetColor("green");
                                                                            HWindowID.SetLineWidth(2);
                                                                            HWindowID.DispObj(ho_CrossP1);
                                                                            HWindowID.DispObj(ho_CrossP2);
                                                                            HWindowID.DispObj(ho_CrossP3);
                                                                            HWindowID.DispObj(ho_CrossP4);
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                            double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                            double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                            double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                            double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                            double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                            double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                            double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                            string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                            string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                            string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                            string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                            string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                            string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                            string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                            string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                            WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            #region NG
                                                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                            WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "PASS";
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    //HWindowID.SetColor("cyan");
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                    if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "NG";
                                                                }
                                                            DisNG:
                                                                if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                                {
                                                                    #region NG
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_AddArea1.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b12.Y, b12.X, "cyan", "false");
                                                                    if (hv_AddArea2.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b22.Y, b22.X, "cyan", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                    #endregion
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "NG";
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            #region NG
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispObj(ho_RInCir);
                                                            HWindowID.DispObj(ho_ROutCir);
                                                            disp_message(HWindowID, "NG", "", 150, 2000, "green", "false");
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "DI:" + Math.Round((double)hv_RadiusInCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + Math.Round((double)hv_RadiusOutCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "green", "false"); string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0003";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        #region NG
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "green", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                        disp_message(HWindowID, "InRadius&OutRadius:" + "NG", "", 1840, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                if (Glue.WidthIsChecked & Glue.InOutIsChecked)
                                                {
                                                    #region 胶宽+内外径
                                                    double WidthMax = 0;
                                                    try
                                                    {
                                                        #region
                                                        Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                        ho_gGreyUnion.Dispose();
                                                        HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                        ho_RegionFillUp.Dispose();
                                                        HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                        ho_BinImage.Dispose();
                                                        HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                        hv_SpaceDis = 2 * Math.PI * hv_Radius / 30;
                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        ho_ContourIn.Dispose();
                                                        HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourIn, hv_MetrologyHandle, "all", "all", out hv_RowIn, out hv_ColumnIn);
                                                        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                        ho_ROutCir.Dispose();
                                                        HOperatorSet.GetMetrologyObjectResultContour(out ho_ROutCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                        Thread.Sleep(5);
                                                        hv_RowOutCenter = hv_circleParameter.TupleSelect(0);
                                                        hv_ColOutCenter = hv_circleParameter.TupleSelect(1);
                                                        hv_RadiusOutCenter = hv_circleParameter.TupleSelect(2);
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                        HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                        HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                        HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                        HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                            hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                        HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                        HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                        //应用测量
                                                        HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                        ho_ContourOut.Dispose();
                                                        HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourOut, hv_MetrologyHandle, "all", "all", out hv_RowOut, out hv_ColumnOut);
                                                        HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                        ho_RInCir.Dispose();
                                                        HOperatorSet.GetMetrologyObjectResultContour(out ho_RInCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                        Thread.Sleep(5);
                                                        hv_RowInCenter = hv_circleParameter.TupleSelect(0);
                                                        hv_ColInCenter = hv_circleParameter.TupleSelect(1);
                                                        hv_RadiusInCenter = hv_circleParameter.TupleSelect(2);

                                                        HOperatorSet.DistancePp(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut, out hv_Distance);
                                                        HOperatorSet.TupleMax(hv_Distance, out hv_Max);
                                                        HOperatorSet.TupleLength(hv_Distance, out hv_Length);
                                                        hv_k_m = 0;
                                                        HTuple end_val187 = hv_Length - 1;
                                                        HTuple step_val187 = 1;
                                                        for (hv_m = 0; hv_m.Continue(end_val187, step_val187); hv_m = hv_m.TupleAdd(step_val187))
                                                        {
                                                            if ((int)(new HTuple(((hv_Distance.TupleSelect(hv_m))).TupleEqual(hv_Max))) != 0)
                                                            {
                                                                hv_k_m = hv_m.Clone();
                                                            }
                                                        }
                                                        HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                        #endregion
                                                        WidthMax = Math.Round((double)hv_Max * Glue.Gxpm, 3);
                                                        Glue.GlueWidth = WidthMax;
                                                        Glue.ID = Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3) + Glue.Offset_InnerRadius;
                                                        Glue.OD = Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3) + Glue.Offset_OuterRadius;
                                                        double DIO = Glue.ID + (Glue.OD - Glue.ID) / 2;
                                                        Glue.GlueD = DIO;
                                                        if (WidthMax < Glue.WidthMaxSet & (double)hv_RadiusInCenter > Glue.InRMin & (double)hv_RadiusOutCenter < Glue.OutRMax)
                                                        {
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                            HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                            HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                            HWindowID.SetColor("red");
                                                            HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "GlueWidth_Max:" + hv_Max + "(" + WidthMax.ToString() + ")", "", 1760, 150, "green", "false");
                                                            disp_message(HWindowID, "DI:" + Math.Round((double)hv_RadiusInCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                        "DO:" + Math.Round((double)hv_RadiusOutCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                        DIO.ToString(), "", 1840, 150, "green", "false");
                                                            if (DisAddCh)
                                                            {
                                                                #region jianxi
                                                                hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                                double distance = hv_grayDistance;
                                                                double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                                cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                                FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                                hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                                hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                                ho_BinImage.Dispose();
                                                                HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                                #region 区域1
                                                                ho_g1Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g1Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                                HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                                if (hv_AddArea1.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                int max1, max2;
                                                                if (hv_AddArea1[0] > hv_AddArea1[1])
                                                                {
                                                                    max1 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                    max2 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea1[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                    max2 = hv_AddArea1[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea1.Length; i++)
                                                                {
                                                                    if (hv_AddArea1[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR12 = ho_AR11;
                                                                        max1 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                    }
                                                                    else if (hv_AddArea1[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea1[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                                 out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                                #region jisuan2
                                                                a11.X = (float)((double)hv_Add1Col1);
                                                                a11.Y = (float)((double)hv_Add1Row1);
                                                                a12.X = (float)((double)hv_Add1Col2);
                                                                a12.Y = (float)((double)hv_Add1Row2);

                                                                b11.X = (float)((double)hv_ColCenter);
                                                                b11.Y = (float)((double)hv_RowCenter);
                                                                b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                                b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                                var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                                var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                                var C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                                double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                                hv_DisMin1 = am1 * GCCD2.xpm;
                                                                #endregion
                                                                #region 区域2
                                                                ho_g2Rectangle.Dispose();
                                                                HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Region.Dispose();
                                                                HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                                ho_g2Reduced.Dispose();
                                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                                HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                                HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                                HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                                if (hv_AddArea2.Length <= 1)
                                                                {
                                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                    goto DisNG;
                                                                }
                                                                #region jisuan1
                                                                if (hv_AddArea2[0] > hv_AddArea2[1])
                                                                {
                                                                    max1 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                    max2 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                                }
                                                                else
                                                                {
                                                                    max1 = hv_AddArea2[1];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                    max2 = hv_AddArea2[0];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                                }
                                                                for (int i = 2; i < hv_AddArea2.Length; i++)
                                                                {
                                                                    if (hv_AddArea2[i] > max1)
                                                                    {
                                                                        max2 = max1;
                                                                        ho_AR22 = ho_AR21;
                                                                        max1 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                    }
                                                                    else if (hv_AddArea2[i] > max2)
                                                                    {
                                                                        max2 = hv_AddArea2[i];
                                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                    }
                                                                }
                                                                #endregion
                                                                HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                                HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                                 out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                                #region jisuan2
                                                                a21.X = (float)((double)hv_Add2Col1);
                                                                a21.Y = (float)((double)hv_Add2Row1);
                                                                a22.X = (float)((double)hv_Add2Col2);
                                                                a22.Y = (float)((double)hv_Add2Row2);

                                                                b21.X = (float)((double)hv_ColCenter);
                                                                b21.Y = (float)((double)hv_RowCenter);
                                                                b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                                b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                                A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                                B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                                C = (180 * (float)(B - A)) / Math.PI;
                                                                #endregion
                                                                HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                                double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                                hv_DisMin2 = am2 * GCCD2.xpm;
                                                                #endregion
                                                                //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                                //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                                string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                                string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                                if (CCDName == "GCCD2-1" || CCDName == "GCCD2-3")
                                                                {
                                                                    Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                                }
                                                                if (CCDName == "GCCD2-2" || CCDName == "GCCD2-4")
                                                                {
                                                                    Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                                }
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                {
                                                                    //HWindowID.SetColor("cyan");
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    if (GCCD2.Deg4Checked)
                                                                    {
                                                                        #region 4点
                                                                        Deg4Plus();
                                                                        if (hv_P1RowCh.Length != 0)
                                                                        {
                                                                            #region PASS
                                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                            HWindowID.SetColor("green");
                                                                            HWindowID.SetLineWidth(2);
                                                                            HWindowID.DispObj(ho_CrossP1);
                                                                            HWindowID.DispObj(ho_CrossP2);
                                                                            HWindowID.DispObj(ho_CrossP3);
                                                                            HWindowID.DispObj(ho_CrossP4);
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                            double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                            double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                            double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                            double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                            double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                            double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                            double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                            string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                            string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                            string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                            string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                            string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                            string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                            string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                            string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                            WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        else
                                                                        {
                                                                            #region NG
                                                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                            FrmMain.afterDT = System.DateTime.Now;
                                                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                            WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                            WriteToPlc.CMDsend[i_image] = true;
                                                                            if (saveOPic)
                                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                            if (saveRPic)
                                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                            #endregion
                                                                        }
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "PASS";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "PASS";
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    //HWindowID.SetColor("cyan");
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                    if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                    else
                                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "NG";
                                                                }
                                                            DisNG:
                                                                if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                                {
                                                                    #region NG
                                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                    if (hv_AddArea1.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b12.Y, b12.X, "cyan", "false");
                                                                    if (hv_AddArea2.Length <= 1)
                                                                        disp_message(HWindowID, "null", "", b22.Y, b22.X, "cyan", "false");
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                    string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                    string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                    WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                    #endregion
                                                                    if (CCDName == "GCCD2-1")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-2")
                                                                        Glue.P2GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-3")
                                                                        Glue.P1GlueDisR = "NG";
                                                                    if (CCDName == "GCCD2-4")
                                                                        Glue.P2GlueDisR = "NG";
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                            }
                                                        }
                                                        else
                                                        {
                                                            #region NG
                                                            HWindowID.SetColor("green");
                                                            HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                            HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                            HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                            HWindowID.SetColor("red");
                                                            HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                            disp_message(HWindowID, "NG", "", 150, 2000, "green", "false");
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                            disp_message(HWindowID, "GlueWidth_Max:" + hv_Max + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                            disp_message(HWindowID, "DI:" + Math.Round((double)hv_RadiusInCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                        "DO:" + Math.Round((double)hv_RadiusOutCenter * 2).ToString() + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                        DIO.ToString(), "", 1840, 150, "red", "false");
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0003";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                    }
                                                    catch
                                                    {
                                                        #region NG
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1600, 150, "cyan", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1680, 150, "cyan", "false");
                                                        disp_message(HWindowID, "GlueWidth_Max:" + hv_Max + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                            }
                                            else
                                            {
                                                set_display_font(HWindowID, 14, "sans", "false", "false");
                                                disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1680, 150, "cyan", "false");
                                                disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1760, 150, "cyan", "false");
                                                if (DisAddCh)
                                                {
                                                    #region 通气孔
                                                    hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                    double distance = hv_grayDistance;
                                                    double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                    cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                    FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                    hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                    hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                    ho_BinImage.Dispose();
                                                    HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                    #region 区域1
                                                    ho_g1Rectangle.Dispose();
                                                    HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                    ho_g1Region.Dispose();
                                                    HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                    ho_g1Reduced.Dispose();
                                                    HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                    HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                    HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                    HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                    if (hv_AddArea1.Length <= 1)
                                                    {
                                                        MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                        goto DisNG;
                                                    }
                                                    #region jisuan1
                                                    int max1, max2;
                                                    if (hv_AddArea1[0] > hv_AddArea1[1])
                                                    {
                                                        max1 = hv_AddArea1[0];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                        max2 = hv_AddArea1[1];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                    }
                                                    else
                                                    {
                                                        max1 = hv_AddArea1[1];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                        max2 = hv_AddArea1[0];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                    }
                                                    for (int i = 2; i < hv_AddArea1.Length; i++)
                                                    {
                                                        if (hv_AddArea1[i] > max1)
                                                        {
                                                            max2 = max1;
                                                            ho_AR12 = ho_AR11;
                                                            max1 = hv_AddArea1[i];
                                                            HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                        }
                                                        else if (hv_AddArea1[i] > max2)
                                                        {
                                                            max2 = hv_AddArea1[i];
                                                            HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                        }
                                                    }
                                                    #endregion
                                                    HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                    HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                    HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                     out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                    #region jisuan2
                                                    a11.X = (float)((double)hv_Add1Col1);
                                                    a11.Y = (float)((double)hv_Add1Row1);
                                                    a12.X = (float)((double)hv_Add1Col2);
                                                    a12.Y = (float)((double)hv_Add1Row2);

                                                    b11.X = (float)((double)hv_ColCenter);
                                                    b11.Y = (float)((double)hv_RowCenter);
                                                    b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                    b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                    var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                    var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                    var C = (180 * (float)(B - A)) / Math.PI;
                                                    #endregion
                                                    HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                    HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                    HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                    double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                    hv_DisMin1 = am1 * GCCD2.xpm;
                                                    #endregion
                                                    #region 区域2
                                                    ho_g2Rectangle.Dispose();
                                                    HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                    ho_g2Region.Dispose();
                                                    HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                    ho_g2Reduced.Dispose();
                                                    HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                    HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                    HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                    HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                    if (hv_AddArea2.Length <= 1)
                                                    {
                                                        MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                        goto DisNG;
                                                    }
                                                    #region jisuan1
                                                    if (hv_AddArea2[0] > hv_AddArea2[1])
                                                    {
                                                        max1 = hv_AddArea2[0];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                        max2 = hv_AddArea2[1];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                    }
                                                    else
                                                    {
                                                        max1 = hv_AddArea2[1];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                        max2 = hv_AddArea2[0];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                    }
                                                    for (int i = 2; i < hv_AddArea2.Length; i++)
                                                    {
                                                        if (hv_AddArea2[i] > max1)
                                                        {
                                                            max2 = max1;
                                                            ho_AR22 = ho_AR21;
                                                            max1 = hv_AddArea2[i];
                                                            HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                        }
                                                        else if (hv_AddArea2[i] > max2)
                                                        {
                                                            max2 = hv_AddArea2[i];
                                                            HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                        }
                                                    }
                                                    #endregion
                                                    HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                    HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                    HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                     out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                    #region jisuan2
                                                    a21.X = (float)((double)hv_Add2Col1);
                                                    a21.Y = (float)((double)hv_Add2Row1);
                                                    a22.X = (float)((double)hv_Add2Col2);
                                                    a22.Y = (float)((double)hv_Add2Row2);

                                                    b21.X = (float)((double)hv_ColCenter);
                                                    b21.Y = (float)((double)hv_RowCenter);
                                                    b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                    b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                    A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                    B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                    C = (180 * (float)(B - A)) / Math.PI;
                                                    #endregion
                                                    HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                    HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                    HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                    double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                    hv_DisMin2 = am2 * GCCD2.xpm;
                                                    #endregion
                                                    //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                    //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                    string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                    string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                    if (CCDName == "GCCD2-1" || CCDName == "GCCD2-3")
                                                    {
                                                        Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                    }
                                                    if (CCDName == "GCCD2-2" || CCDName == "GCCD2-4")
                                                    {
                                                        Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                    }
                                                    if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                    {
                                                        //HWindowID.SetColor("cyan");
                                                        //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                        //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        if (GCCD2.Deg4Checked)
                                                        {
                                                            Deg4Plus();
                                                            if (hv_P1RowCh.Length != 0)
                                                            {
                                                                #region PASS
                                                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                HWindowID.SetColor("green");
                                                                HWindowID.SetLineWidth(2);
                                                                HWindowID.DispObj(ho_CrossP1);
                                                                HWindowID.DispObj(ho_CrossP2);
                                                                HWindowID.DispObj(ho_CrossP3);
                                                                HWindowID.DispObj(ho_CrossP4);
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                #region NG
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                            }
                                                        }
                                                        else
                                                        {
                                                            #region PASS
                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                        if (CCDName == "GCCD2-1")
                                                            Glue.P1GlueDisR = "PASS";
                                                        if (CCDName == "GCCD2-2")
                                                            Glue.P2GlueDisR = "PASS";
                                                        if (CCDName == "GCCD2-3")
                                                            Glue.P1GlueDisR = "PASS";
                                                        if (CCDName == "GCCD2-4")
                                                            Glue.P2GlueDisR = "PASS";
                                                    }
                                                    else
                                                    {
                                                        #region NG
                                                        //HWindowID.SetColor("cyan");
                                                        //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                        //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                            disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                        else
                                                            disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                        if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                            disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                        else
                                                            disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                        if (CCDName == "GCCD2-1")
                                                            Glue.P1GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-2")
                                                            Glue.P2GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-3")
                                                            Glue.P1GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-4")
                                                            Glue.P2GlueDisR = "NG";
                                                    }
                                                DisNG:
                                                    if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                    {
                                                        #region NG
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        if (hv_AddArea1.Length <= 1)
                                                            disp_message(HWindowID, "null", "", b12.Y, b12.X, "cyan", "false");
                                                        if (hv_AddArea2.Length <= 1)
                                                            disp_message(HWindowID, "null", "", b22.Y, b22.X, "cyan", "false");
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                        #endregion
                                                        if (CCDName == "GCCD2-1")
                                                            Glue.P1GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-2")
                                                            Glue.P2GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-3")
                                                            Glue.P1GlueDisR = "NG";
                                                        if (CCDName == "GCCD2-4")
                                                            Glue.P2GlueDisR = "NG";
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    if (GCCD2.Deg4Checked)
                                                    {
                                                        #region 4点
                                                        Deg4Plus();
                                                        if (hv_P1RowCh.Length != 0)
                                                        {
                                                            #region PASS
                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                            HWindowID.SetColor("green");
                                                            HWindowID.SetLineWidth(2);
                                                            HWindowID.DispObj(ho_CrossP1);
                                                            HWindowID.DispObj(ho_CrossP2);
                                                            HWindowID.DispObj(ho_CrossP3);
                                                            HWindowID.DispObj(ho_CrossP4);
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                            double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                            double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                            double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                            double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                            double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                            double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                            double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                            string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                            string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                            string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                            string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                            string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                            string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                            string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                            string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                            WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            #region NG
                                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                                            WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region PASS
                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                }
                                            }
                                        }
                                        else
                                        {
                                            #region NG
                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                            set_display_font(HWindowID, 14, "sans", "true", "false");
                                            disp_message(HWindowID, Math.Round((double)hv_diffIArea).ToString(), "", 1680, 150, "cyan", "false");
                                            disp_message(HWindowID, Math.Round((double)hv_diffOArea).ToString(), "", 1760, 150, "cyan", "false");
                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                            FrmMain.afterDT = System.DateTime.Now;
                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                            WriteToPlc.CMDOKNG[i_image] = "0003";
                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                            WriteToPlc.CMDsend[i_image] = true;
                                            if (saveOPic)
                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                            if (saveRPic)
                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                            #endregion
                                        }
                                        #endregion
                                    }
                                    else
                                    {
                                        #region
                                        #region show
                                        HWindowID.ClearWindow();
                                        HWindowID.DispObj(halcon.Image[7]);
                                        HWindowID.SetColor("red");
                                        HWindowID.SetLineWidth(1);
                                        HWindowID.DispCross(row, col, width, 0);
                                        if (FShape == "Circle")
                                        {
                                            HWindowID.DispObj(ho_RCircle0);
                                            HWindowID.SetColor("green");
                                            HWindowID.DispObj(ho_RCircle);
                                        }
                                        else if (FShape == "Square")
                                        {
                                            HWindowID.SetColor("green");
                                            HWindowID.SetDraw("margin");
                                            HWindowID.DispObj(ho_ResultContours);
                                        }
                                        HWindowID.SetColor("blue");
                                        if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                            HWindowID.DispObj(ho_ArrowLine);
                                        else
                                            HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                                        HWindowID.SetDraw("fill");
                                        HWindowID.DispObj(ho_gGreyUnion);
                                        //HWindowID.DispObj(ho_g1Grey);
                                        //HWindowID.DispObj(ho_g2Grey);
                                        if (Glue.Glue_Circle_2)
                                        {
                                            HWindowID.SetColor("orange");
                                            HWindowID.DispObj(ho_gGreyUnion_2);
                                            //HWindowID.DispObj(ho_g1Grey_2);
                                            //HWindowID.DispObj(ho_g2Grey_2);
                                        }
                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                                        if (GlueOrder == 2 & GHCutIsChecked)
                                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                        disp_message(HWindowID, Math.Round(hv_GlueArea.D).ToString(), "", 1520, 150, "green", "false");
                                        //disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1520, 150, "green", "false");
                                        //disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1600, 150, "green", "false");
                                        if (Glue.Glue_Follow)
                                        {
                                            disp_message(HWindowID, "GlueAngle  :" + Math.Round(hv_TotalAnglePF.D).ToString(), "", 1720, 150, "green", "false");
                                            if (Glue.Glue_Circle_2)
                                                disp_message(HWindowID, "GlueAngle2:" + Math.Round(hv_TotalAnglePF_2.D).ToString(), "", 1780, 150, "green", "false");
                                        }
                                        #endregion
                                        if (Glue.WidthIsChecked || Glue.InOutIsChecked)
                                        {
                                            if (Glue.WidthIsChecked & !Glue.InOutIsChecked)
                                            {
                                                #region 胶宽
                                                double WidthMax = 0;
                                                try
                                                {
                                                    #region 处理
                                                    Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                    ho_gGreyUnion.Dispose();
                                                    HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                    ho_RegionFillUp.Dispose();
                                                    HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                    ho_BinImage.Dispose();
                                                    HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                    hv_SpaceDis = 2 * Math.PI * hv_Radius / 30;
                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    ho_ContourIn.Dispose();
                                                    HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourIn, hv_MetrologyHandle, "all", "all", out hv_RowIn, out hv_ColumnIn);
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    ho_ContourOut.Dispose();
                                                    HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourOut, hv_MetrologyHandle, "all", "all", out hv_RowOut, out hv_ColumnOut);
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                    HOperatorSet.DistancePp(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut, out hv_Distance);
                                                    HOperatorSet.TupleMax(hv_Distance, out hv_Max);
                                                    HOperatorSet.TupleLength(hv_Distance, out hv_Length);
                                                    hv_k_m = 0;
                                                    HTuple end_val187 = hv_Length - 1;
                                                    HTuple step_val187 = 1;
                                                    for (hv_m = 0; hv_m.Continue(end_val187, step_val187); hv_m = hv_m.TupleAdd(step_val187))
                                                    {
                                                        if ((int)(new HTuple(((hv_Distance.TupleSelect(hv_m))).TupleEqual(hv_Max))) != 0)
                                                        {
                                                            hv_k_m = hv_m.Clone();
                                                        }
                                                    }
                                                    #endregion
                                                    WidthMax = Math.Round((double)hv_Max * Glue.Gxpm, 3);
                                                    Glue.GlueWidth = WidthMax;
                                                    if (WidthMax < Glue.WidthMaxSet)
                                                    {
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                        HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                        HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                        if (DisAddCh)
                                                        {
                                                            #region jianxi
                                                            hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                            double distance = hv_grayDistance;
                                                            double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                            hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                            hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                            ho_BinImage.Dispose();
                                                            HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                            #region 区域1
                                                            ho_g1Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                            HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                            if (hv_AddArea1.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            int max1, max2;
                                                            if (hv_AddArea1[0] > hv_AddArea1[1])
                                                            {
                                                                max1 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                max2 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                max2 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea1.Length; i++)
                                                            {
                                                                if (hv_AddArea1[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR12 = ho_AR11;
                                                                    max1 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                }
                                                                else if (hv_AddArea1[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                             out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                            #region jisuan2
                                                            a11.X = (float)((double)hv_Add1Col1);
                                                            a11.Y = (float)((double)hv_Add1Row1);
                                                            a12.X = (float)((double)hv_Add1Col2);
                                                            a12.Y = (float)((double)hv_Add1Row2);

                                                            b11.X = (float)((double)hv_ColCenter);
                                                            b11.Y = (float)((double)hv_RowCenter);
                                                            b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                            b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                            var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                            var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                            var C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                            double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                            hv_DisMin1 = am1 * GCCD2.xpm;
                                                            #endregion
                                                            #region 区域2
                                                            ho_g2Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                            HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                            if (hv_AddArea2.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            if (hv_AddArea2[0] > hv_AddArea2[1])
                                                            {
                                                                max1 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                max2 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                max2 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea2.Length; i++)
                                                            {
                                                                if (hv_AddArea2[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR22 = ho_AR21;
                                                                    max1 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                }
                                                                else if (hv_AddArea2[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                             out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                            #region jisuan2
                                                            a21.X = (float)((double)hv_Add2Col1);
                                                            a21.Y = (float)((double)hv_Add2Row1);
                                                            a22.X = (float)((double)hv_Add2Col2);
                                                            a22.Y = (float)((double)hv_Add2Row2);

                                                            b21.X = (float)((double)hv_ColCenter);
                                                            b21.Y = (float)((double)hv_RowCenter);
                                                            b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                            b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                            A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                            B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                            C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                            double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                            hv_DisMin2 = am2 * GCCD2.xpm;
                                                            #endregion
                                                            //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            if (CCDName == "GCCD2-1")
                                                            {
                                                                Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-2")
                                                            {
                                                                Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-3")
                                                            {
                                                                Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-4")
                                                            {
                                                                Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                            }
                                                            if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                            {
                                                                //HWindowID.SetColor("cyan");
                                                                //HWindowID.SetLineWidth(3);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "PASS";
                                                            }
                                                            else
                                                            {
                                                                #region NG
                                                                //HWindowID.SetColor("cyan");
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                        DisNG:
                                                            if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                            {
                                                                #region NG
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_AddArea1.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b12.Y, b12.X, "red", "false");
                                                                if (hv_AddArea2.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            set_display_font(HWindowID, 14, "sans", "false", "false");
                                                            disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "green", "false");
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = "00000000";
                                                            if (GlueOrder == 2 & GHCutIsChecked)
                                                                Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            if (GCCD2.Deg4Checked)
                                                            {
                                                                #region 4点
                                                                Deg4Plus();
                                                                if (hv_P1RowCh.Length != 0)
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    HWindowID.SetColor("green");
                                                                    HWindowID.SetLineWidth(2);
                                                                    HWindowID.DispObj(ho_CrossP1);
                                                                    HWindowID.DispObj(ho_CrossP2);
                                                                    HWindowID.DispObj(ho_CrossP3);
                                                                    HWindowID.DispObj(ho_CrossP4);
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                    double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                    double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                    double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                    double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                    double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                    double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                    double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                    string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                    string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                    string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                    string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                    string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                    string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                    string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                    string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                    WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                #region PASS
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        #region NG
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                        HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                        HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                }
                                                catch
                                                {
                                                    #region NG
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                    set_display_font(HWindowID, 14, "sans", "false", "false");
                                                    disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            if (!Glue.WidthIsChecked & Glue.InOutIsChecked)
                                            {
                                                #region 内外径
                                                try
                                                {
                                                    #region 处理
                                                    Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                    ho_gGreyUnion.Dispose();
                                                    HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                    ho_RegionFillUp.Dispose();
                                                    HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                    ho_BinImage.Dispose();
                                                    HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);

                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                    ho_ROutCir.Dispose();
                                                    HOperatorSet.GetMetrologyObjectResultContour(out ho_ROutCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                    Thread.Sleep(5);
                                                    hv_RowOutCenter = hv_circleParameter.TupleSelect(0);
                                                    hv_ColOutCenter = hv_circleParameter.TupleSelect(1);
                                                    hv_RadiusOutCenter = hv_circleParameter.TupleSelect(2);
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);

                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                    ho_RInCir.Dispose();
                                                    HOperatorSet.GetMetrologyObjectResultContour(out ho_RInCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                    Thread.Sleep(5);
                                                    hv_RowInCenter = hv_circleParameter.TupleSelect(0);
                                                    hv_ColInCenter = hv_circleParameter.TupleSelect(1);
                                                    hv_RadiusInCenter = hv_circleParameter.TupleSelect(2);
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                    #endregion
                                                    Glue.ID = Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3) + Glue.Offset_InnerRadius;
                                                    Glue.OD = Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3) + Glue.Offset_OuterRadius;
                                                    double DIO = Glue.ID + (Glue.OD - Glue.ID) / 2;
                                                    Glue.GlueD = DIO;
                                                    if ((double)hv_RadiusInCenter > Glue.InRMin & (double)hv_RadiusOutCenter < Glue.OutRMax)
                                                    {
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispObj(ho_RInCir);
                                                        HWindowID.DispObj(ho_ROutCir);
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, "DI:" + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "green", "false");
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                        if (DisAddCh)
                                                        {
                                                            #region jianxi
                                                            hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                            double distance = hv_grayDistance;
                                                            double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                            hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                            hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                            ho_BinImage.Dispose();
                                                            HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                            #region 区域1
                                                            ho_g1Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                            HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                            if (hv_AddArea1.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            int max1, max2;
                                                            if (hv_AddArea1[0] > hv_AddArea1[1])
                                                            {
                                                                max1 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                max2 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                max2 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea1.Length; i++)
                                                            {
                                                                if (hv_AddArea1[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR12 = ho_AR11;
                                                                    max1 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                }
                                                                else if (hv_AddArea1[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                             out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                            #region jisuan2
                                                            a11.X = (float)((double)hv_Add1Col1);
                                                            a11.Y = (float)((double)hv_Add1Row1);
                                                            a12.X = (float)((double)hv_Add1Col2);
                                                            a12.Y = (float)((double)hv_Add1Row2);

                                                            b11.X = (float)((double)hv_ColCenter);
                                                            b11.Y = (float)((double)hv_RowCenter);
                                                            b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                            b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                            var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                            var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                            var C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                            double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                            hv_DisMin1 = am1 * GCCD2.xpm;
                                                            #endregion
                                                            #region 区域2
                                                            ho_g2Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                            HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                            if (hv_AddArea2.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            if (hv_AddArea2[0] > hv_AddArea2[1])
                                                            {
                                                                max1 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                max2 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                max2 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea2.Length; i++)
                                                            {
                                                                if (hv_AddArea2[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR22 = ho_AR21;
                                                                    max1 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                }
                                                                else if (hv_AddArea2[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                             out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                            #region jisuan2
                                                            a21.X = (float)((double)hv_Add2Col1);
                                                            a21.Y = (float)((double)hv_Add2Row1);
                                                            a22.X = (float)((double)hv_Add2Col2);
                                                            a22.Y = (float)((double)hv_Add2Row2);

                                                            b21.X = (float)((double)hv_ColCenter);
                                                            b21.Y = (float)((double)hv_RowCenter);
                                                            b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                            b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                            A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                            B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                            C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                            double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                            hv_DisMin2 = am2 * GCCD2.xpm;
                                                            #endregion
                                                            //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            if (CCDName == "GCCD2-1")
                                                            {
                                                                Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-2")
                                                            {
                                                                Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-3")
                                                            {
                                                                Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-4")
                                                            {
                                                                Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                            }
                                                            if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                            {
                                                                //HWindowID.SetColor("cyan");
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "PASS";
                                                            }
                                                            else
                                                            {
                                                                #region NG
                                                                //HWindowID.SetColor("cyan");
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                        DisNG:
                                                            if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                            {
                                                                #region NG
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_AddArea1.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b12.Y, b12.X, "red", "false");
                                                                if (hv_AddArea2.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-3")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-4")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            if (GCCD2.Deg4Checked)
                                                            {
                                                                #region 4点
                                                                Deg4Plus();
                                                                if (hv_P1RowCh.Length != 0)
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    HWindowID.SetColor("green");
                                                                    HWindowID.SetLineWidth(2);
                                                                    HWindowID.DispObj(ho_CrossP1);
                                                                    HWindowID.DispObj(ho_CrossP2);
                                                                    HWindowID.DispObj(ho_CrossP3);
                                                                    HWindowID.DispObj(ho_CrossP4);
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                    double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                    double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                    double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                    double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                    double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                    double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                    double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                    string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                    string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                    string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                    string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                    string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                    string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                    string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                    string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                    WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                #region PASS
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        #region NG
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispObj(ho_RInCir);
                                                        HWindowID.DispObj(ho_ROutCir);
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, "DI:" + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "green", "false"); string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                }
                                                catch
                                                {
                                                    #region NG
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "NG", "", 150, 2000, "green", "false");
                                                    set_display_font(HWindowID, 14, "sans", "false", "false");
                                                    disp_message(HWindowID, "InRadius&OutRadius:" + "NG", "", 1840, 150, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                            if (Glue.WidthIsChecked & Glue.InOutIsChecked)
                                            {
                                                #region 胶宽+内外径
                                                double WidthMax = 0;
                                                try
                                                {
                                                    #region 处理
                                                    Glue.Gxpm = Math.Round(Rearradius / (double)hv_Radius / 2, 10);
                                                    //ho_gGreyUnion.Dispose();
                                                    //HOperatorSet.Union2(ho_g1Grey, ho_g2Grey, out ho_gGreyUnion);
                                                    ho_RegionFillUp.Dispose();
                                                    HOperatorSet.FillUp(ho_gGreyUnion, out ho_RegionFillUp);
                                                    ho_BinImage.Dispose();
                                                    HOperatorSet.RegionToBin(ho_RegionFillUp, out ho_BinImage, 255, 0, width, height);

                                                    hv_SpaceDis = 2 * Math.PI * hv_Radius / 30;
                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    ho_ContourIn.Dispose();
                                                    HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourIn, hv_MetrologyHandle, "all", "all", out hv_RowIn, out hv_ColumnIn);
                                                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                    ho_ROutCir.Dispose();
                                                    HOperatorSet.GetMetrologyObjectResultContour(out ho_ROutCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                    Thread.Sleep(5);
                                                    hv_RowOutCenter = hv_circleParameter.TupleSelect(0);
                                                    hv_ColOutCenter = hv_circleParameter.TupleSelect(1);
                                                    hv_RadiusOutCenter = hv_circleParameter.TupleSelect(2);
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);

                                                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
                                                    HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
                                                    HOperatorSet.GenCircle(out ho_Circle, hv_rowFCenter, hv_colFCenter, hv_Radius);
                                                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((hv_rowFCenter.TupleConcat(
                                                        hv_colFCenter))).TupleConcat(hv_Radius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                                                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour, hv_MetrologyHandle, "all", 1.5);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", "all");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "first");
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", RegionWidth + 40);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_distance", hv_SpaceDis);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", 100);
                                                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
                                                    //应用测量
                                                    HOperatorSet.ApplyMetrologyModel(ho_BinImage, hv_MetrologyHandle);
                                                    ho_ContourOut.Dispose();
                                                    HOperatorSet.GetMetrologyObjectMeasures(out ho_ContourOut, hv_MetrologyHandle, "all", "all", out hv_RowOut, out hv_ColumnOut);
                                                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                                                    ho_RInCir.Dispose();
                                                    HOperatorSet.GetMetrologyObjectResultContour(out ho_RInCir, hv_MetrologyHandle, "all", "all", 1.5);
                                                    Thread.Sleep(5);
                                                    hv_RowInCenter = hv_circleParameter.TupleSelect(0);
                                                    hv_ColInCenter = hv_circleParameter.TupleSelect(1);
                                                    hv_RadiusInCenter = hv_circleParameter.TupleSelect(2);

                                                    HOperatorSet.DistancePp(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut, out hv_Distance);
                                                    HOperatorSet.TupleMax(hv_Distance, out hv_Max);
                                                    HOperatorSet.TupleLength(hv_Distance, out hv_Length);
                                                    hv_k_m = 0;
                                                    HTuple end_val187 = hv_Length - 1;
                                                    HTuple step_val187 = 1;
                                                    for (hv_m = 0; hv_m.Continue(end_val187, step_val187); hv_m = hv_m.TupleAdd(step_val187))
                                                    {
                                                        if ((int)(new HTuple(((hv_Distance.TupleSelect(hv_m))).TupleEqual(hv_Max))) != 0)
                                                        {
                                                            hv_k_m = hv_m.Clone();
                                                        }
                                                    }
                                                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                                                    #endregion 
                                                    WidthMax = Math.Round((double)hv_Max * Glue.Gxpm, 3);
                                                    Glue.GlueWidth = WidthMax;
                                                    Glue.ID = Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3) + Glue.Offset_InnerRadius;
                                                    Glue.OD = Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3) + Glue.Offset_OuterRadius;
                                                    double DIO = Glue.ID + (Glue.OD - Glue.ID) / 2;
                                                    Glue.GlueD = DIO;
                                                    if (WidthMax < Glue.WidthMaxSet & Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3) > Glue.InRMin & Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3) < Glue.OutRMax)
                                                    {
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                        HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                        HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                        HWindowID.DispObj(ho_RInCir);
                                                        HWindowID.DispObj(ho_ROutCir);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "green", "false");
                                                        disp_message(HWindowID, "DI:" + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "green", "false");
                                                        if (DisAddCh)
                                                        {
                                                            #region jianxi
                                                            hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                            double distance = hv_grayDistance;
                                                            double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                            hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                            hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                            ho_BinImage.Dispose();
                                                            HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                            #region 区域1
                                                            ho_g1Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g1Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                            HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                            if (hv_AddArea1.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            int max1, max2;
                                                            if (hv_AddArea1[0] > hv_AddArea1[1])
                                                            {
                                                                max1 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                                max2 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea1[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                                max2 = hv_AddArea1[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea1.Length; i++)
                                                            {
                                                                if (hv_AddArea1[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR12 = ho_AR11;
                                                                    max1 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                                }
                                                                else if (hv_AddArea1[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea1[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                             out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                            #region jisuan2
                                                            a11.X = (float)((double)hv_Add1Col1);
                                                            a11.Y = (float)((double)hv_Add1Row1);
                                                            a12.X = (float)((double)hv_Add1Col2);
                                                            a12.Y = (float)((double)hv_Add1Row2);

                                                            b11.X = (float)((double)hv_ColCenter);
                                                            b11.Y = (float)((double)hv_RowCenter);
                                                            b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                            b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                            var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                            var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                            var C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                            HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                            double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                            hv_DisMin1 = am1 * GCCD2.xpm;
                                                            #endregion
                                                            #region 区域2
                                                            ho_g2Rectangle.Dispose();
                                                            HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Region.Dispose();
                                                            HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                            ho_g2Reduced.Dispose();
                                                            HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                            HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                            HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                            HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                            if (hv_AddArea2.Length <= 1)
                                                            {
                                                                MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                                goto DisNG;
                                                            }
                                                            #region jisuan1
                                                            if (hv_AddArea2[0] > hv_AddArea2[1])
                                                            {
                                                                max1 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                                max2 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                            }
                                                            else
                                                            {
                                                                max1 = hv_AddArea2[1];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                                max2 = hv_AddArea2[0];
                                                                HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                            }
                                                            for (int i = 2; i < hv_AddArea2.Length; i++)
                                                            {
                                                                if (hv_AddArea2[i] > max1)
                                                                {
                                                                    max2 = max1;
                                                                    ho_AR22 = ho_AR21;
                                                                    max1 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                                }
                                                                else if (hv_AddArea2[i] > max2)
                                                                {
                                                                    max2 = hv_AddArea2[i];
                                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                                }
                                                            }
                                                            #endregion
                                                            HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                            HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                            HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                             out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                            #region jisuan2
                                                            a21.X = (float)((double)hv_Add2Col1);
                                                            a21.Y = (float)((double)hv_Add2Row1);
                                                            a22.X = (float)((double)hv_Add2Col2);
                                                            a22.Y = (float)((double)hv_Add2Row2);

                                                            b21.X = (float)((double)hv_ColCenter);
                                                            b21.Y = (float)((double)hv_RowCenter);
                                                            b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                            b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                            A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                            B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                            C = (180 * (float)(B - A)) / Math.PI;
                                                            #endregion
                                                            HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                            HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                            double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                            hv_DisMin2 = am2 * GCCD2.xpm;
                                                            #endregion
                                                            //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                            string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                            if (CCDName == "GCCD2-1")
                                                            {
                                                                Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                            }
                                                            if (CCDName == "GCCD2-2")
                                                            {
                                                                Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                            }
                                                            if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                            {
                                                                HWindowID.SetColor("green");
                                                                //HWindowID.SetColor("cyan");
                                                                //HWindowID.SetLineWidth(3);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                if (GCCD2.Deg4Checked)
                                                                {
                                                                    #region 4点
                                                                    Deg4Plus();
                                                                    if (hv_P1RowCh.Length != 0)
                                                                    {
                                                                        #region PASS
                                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                        HWindowID.SetColor("green");
                                                                        HWindowID.SetLineWidth(2);
                                                                        HWindowID.DispObj(ho_CrossP1);
                                                                        HWindowID.DispObj(ho_CrossP2);
                                                                        HWindowID.DispObj(ho_CrossP3);
                                                                        HWindowID.DispObj(ho_CrossP4);
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    else
                                                                    {
                                                                        #region NG
                                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                        FrmMain.afterDT = System.DateTime.Now;
                                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                        WriteToPlc.CMDsend[i_image] = true;
                                                                        if (saveOPic)
                                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                        if (saveRPic)
                                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                        #endregion
                                                                    }
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "PASS";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "PASS";
                                                            }
                                                            else
                                                            {
                                                                #region NG
                                                                //HWindowID.SetColor("cyan");
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                                //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                                if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                                else
                                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                        DisNG:
                                                            if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                            {
                                                                #region NG
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                if (hv_AddArea1.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b12.Y, b12.X, "red", "false");
                                                                if (hv_AddArea2.Length <= 1)
                                                                    disp_message(HWindowID, "null", "", b22.Y, b22.X, "red", "false");
                                                                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                                string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                                string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                                                WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                                #endregion
                                                                if (CCDName == "GCCD2-1")
                                                                    Glue.P1GlueDisR = "NG";
                                                                if (CCDName == "GCCD2-2")
                                                                    Glue.P2GlueDisR = "NG";
                                                            }
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                            string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                            if (GCCD2.Deg4Checked)
                                                            {
                                                                #region 4点
                                                                Deg4Plus();
                                                                if (hv_P1RowCh.Length != 0)
                                                                {
                                                                    #region PASS
                                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                    HWindowID.SetColor("green");
                                                                    HWindowID.SetLineWidth(2);
                                                                    HWindowID.DispObj(ho_CrossP1);
                                                                    HWindowID.DispObj(ho_CrossP2);
                                                                    HWindowID.DispObj(ho_CrossP3);
                                                                    HWindowID.DispObj(ho_CrossP4);
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                                    double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                                    double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                                    double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                                    double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                                    double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                                    double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                                    double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                                    string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                                    string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                                    string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                                    string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                                    string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                                    string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                                    string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                                    string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                                    WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                else
                                                                {
                                                                    #region NG
                                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                    FrmMain.afterDT = System.DateTime.Now;
                                                                    WriteToPlc.CMDOKNG[i_image] = "0002";
                                                                    WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                                    WriteToPlc.CMDsend[i_image] = true;
                                                                    if (saveOPic)
                                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                                    if (saveRPic)
                                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                                    #endregion
                                                                }
                                                                #endregion
                                                            }
                                                            else
                                                            {
                                                                #region PASS
                                                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                                                disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                                                FrmMain.afterDT = System.DateTime.Now;
                                                                WriteToPlc.CMDsend[i_image] = true;
                                                                if (saveOPic)
                                                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                                if (saveRPic)
                                                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                                #endregion
                                                            }
                                                        }
                                                    }
                                                    else
                                                    {
                                                        #region NG
                                                        HWindowID.SetColor("green");
                                                        HWindowID.DispLine(hv_RowIn, hv_ColumnIn, hv_RowOut, hv_ColumnOut);
                                                        HWindowID.DispCross(hv_RowIn, hv_ColumnIn, 10, 0);
                                                        HWindowID.DispCross(hv_RowOut, hv_ColumnOut, 10, 0);
                                                        HWindowID.SetColor("red");
                                                        HWindowID.DispLine(hv_RowIn.TupleSelect(hv_k_m), hv_ColumnIn.TupleSelect(hv_k_m), hv_RowOut.TupleSelect(hv_k_m), hv_ColumnOut.TupleSelect(hv_k_m));
                                                        set_display_font(HWindowID, 18, "sans", "true", "false");
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        set_display_font(HWindowID, 14, "sans", "false", "false");
                                                        disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                        disp_message(HWindowID, "DI:" + "(" + Math.Round((double)hv_RadiusInCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    "DO:" + "(" + Math.Round((double)hv_RadiusOutCenter * Glue.Gxpm * 2, 3).ToString() + ")" +
                                                                                    DIO.ToString(), "", 1840, 150, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0003";
                                                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                }
                                                catch
                                                {
                                                    #region NG
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                    set_display_font(HWindowID, 14, "sans", "false", "false");
                                                    disp_message(HWindowID, "GlueWidth_Max:" + "(" + WidthMax.ToString() + ")", "", 1760, 150, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                                #endregion
                                            }
                                        }
                                        else
                                        {
                                            if (DisAddCh)
                                            {
                                                #region jianxi
                                                hv_g1angle = (Math.PI / 180) * (hv_AddDeg + hv_AddRegionDeg);
                                                double distance = hv_grayDistance;
                                                double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                                                cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                                                FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                                                hv_g1RowCh = g2Point.X; hv_g1ColumnCh = g2Point.Y;
                                                hv_g2RowCh = g4Point.X; hv_g2ColumnCh = g4Point.Y;

                                                ho_BinImage.Dispose();
                                                HOperatorSet.RegionToBin(ho_AddGrey, out ho_BinImage, 255, 0, width, height);
                                                #region 区域1
                                                ho_g1Rectangle.Dispose();
                                                HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                ho_g1Region.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                ho_g1Reduced.Dispose();
                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g1Region, out ho_g1Reduced);
                                                HOperatorSet.Threshold(ho_g1Reduced, out ho_AddRegion1, 128, 255);
                                                HOperatorSet.Connection(ho_AddRegion1, out  ho_AddConRegion1);
                                                HOperatorSet.AreaCenter(ho_AddConRegion1, out hv_AddArea1, out hv_AddRow1, out hv_AddColumn1);
                                                if (hv_AddArea1.Length <= 1)
                                                {
                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                    goto DisNG;
                                                }
                                                #region jisuan1
                                                int max1, max2;
                                                if (hv_AddArea1[0] > hv_AddArea1[1])
                                                {
                                                    max1 = hv_AddArea1[0];
                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 1);
                                                    max2 = hv_AddArea1[1];
                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 2);
                                                }
                                                else
                                                {
                                                    max1 = hv_AddArea1[1];
                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, 2);
                                                    max2 = hv_AddArea1[0];
                                                    HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, 1);
                                                }
                                                for (int i = 2; i < hv_AddArea1.Length; i++)
                                                {
                                                    if (hv_AddArea1[i] > max1)
                                                    {
                                                        max2 = max1;
                                                        ho_AR12 = ho_AR11;
                                                        max1 = hv_AddArea1[i];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR11, i + 1);
                                                    }
                                                    else if (hv_AddArea1[i] > max2)
                                                    {
                                                        max2 = hv_AddArea1[i];
                                                        HOperatorSet.SelectObj(ho_AddConRegion1, out ho_AR12, i + 1);
                                                    }
                                                }
                                                #endregion
                                                HOperatorSet.GenContourRegionXld(ho_AR11, out ho_AddContour11, "border");
                                                HOperatorSet.GenContourRegionXld(ho_AR12, out ho_AddContour12, "border");
                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour11, ho_AddContour12, "fast_point_to_segment", out hv_DisMin1,
                                                                                 out hv_Add1Row1, out hv_Add1Col1, out hv_Add1Row2, out hv_Add1Col2);
                                                #region jisuan2
                                                a11.X = (float)((double)hv_Add1Col1);
                                                a11.Y = (float)((double)hv_Add1Row1);
                                                a12.X = (float)((double)hv_Add1Col2);
                                                a12.Y = (float)((double)hv_Add1Row2);

                                                b11.X = (float)((double)hv_ColCenter);
                                                b11.Y = (float)((double)hv_RowCenter);
                                                b12.X = ((float)((double)hv_Add1Col1) + (float)((double)hv_Add1Col2)) / 2;
                                                b12.Y = ((float)((double)hv_Add1Row1) + (float)((double)hv_Add1Row2)) / 2;

                                                var A = Math.Atan2(a12.Y - a11.Y, a12.X - a11.X);
                                                var B = Math.Atan2(b12.Y - b11.Y, b12.X - b11.X);
                                                var C = (180 * (float)(B - A)) / Math.PI;
                                                #endregion
                                                HOperatorSet.GenRegionLine(out ho_Line1, b11.Y, b11.X, b12.Y, b12.X);
                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row1, hv_Add1Col1, out hv_DisMin11Min, out hv_DisMin11Max);
                                                HOperatorSet.DistancePr(ho_Line1, hv_Add1Row2, hv_Add1Col2, out hv_DisMin12Min, out hv_DisMin12Max);
                                                double am1 = (double)(hv_DisMin11Min + hv_DisMin12Min);
                                                hv_DisMin1 = am1 * GCCD2.xpm;
                                                #endregion
                                                #region 区域2
                                                ho_g2Rectangle.Dispose();
                                                HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                ho_g2Region.Dispose();
                                                HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                                                ho_g2Reduced.Dispose();
                                                HOperatorSet.ReduceDomain(ho_BinImage, ho_g2Region, out ho_g2Reduced);
                                                HOperatorSet.Threshold(ho_g2Reduced, out ho_AddRegion2, 128, 255);
                                                HOperatorSet.Connection(ho_AddRegion2, out  ho_AddConRegion2);
                                                HOperatorSet.AreaCenter(ho_AddConRegion2, out hv_AddArea2, out hv_AddRow2, out hv_AddColumn2);
                                                if (hv_AddArea2.Length <= 1)
                                                {
                                                    MessageBox.Show("所找端点个数不足，请重新设置区域参数！");
                                                    goto DisNG;
                                                }
                                                #region jisuan1
                                                if (hv_AddArea2[0] > hv_AddArea2[1])
                                                {
                                                    max1 = hv_AddArea2[0];
                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 1);
                                                    max2 = hv_AddArea2[1];
                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 2);
                                                }
                                                else
                                                {
                                                    max1 = hv_AddArea2[1];
                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, 2);
                                                    max2 = hv_AddArea2[0];
                                                    HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, 1);
                                                }
                                                for (int i = 2; i < hv_AddArea2.Length; i++)
                                                {
                                                    if (hv_AddArea2[i] > max1)
                                                    {
                                                        max2 = max1;
                                                        ho_AR22 = ho_AR21;
                                                        max1 = hv_AddArea2[i];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR21, i + 1);
                                                    }
                                                    else if (hv_AddArea2[i] > max2)
                                                    {
                                                        max2 = hv_AddArea2[i];
                                                        HOperatorSet.SelectObj(ho_AddConRegion2, out ho_AR22, i + 1);
                                                    }
                                                }
                                                #endregion
                                                HOperatorSet.GenContourRegionXld(ho_AR21, out ho_AddContour21, "border");
                                                HOperatorSet.GenContourRegionXld(ho_AR22, out ho_AddContour22, "border");
                                                HOperatorSet.DistanceCcMinPoints(ho_AddContour21, ho_AddContour22, "fast_point_to_segment", out hv_DisMin2,
                                                                                 out hv_Add2Row1, out hv_Add2Col1, out hv_Add2Row2, out hv_Add2Col2);
                                                #region jisuan2
                                                a21.X = (float)((double)hv_Add2Col1);
                                                a21.Y = (float)((double)hv_Add2Row1);
                                                a22.X = (float)((double)hv_Add2Col2);
                                                a22.Y = (float)((double)hv_Add2Row2);

                                                b21.X = (float)((double)hv_ColCenter);
                                                b21.Y = (float)((double)hv_RowCenter);
                                                b22.X = ((float)((double)hv_Add2Col1) + (float)((double)hv_Add2Col2)) / 2;
                                                b22.Y = ((float)((double)hv_Add2Row1) + (float)((double)hv_Add2Row2)) / 2;

                                                A = Math.Atan2(a22.Y - a21.Y, a22.X - a21.X);
                                                B = Math.Atan2(b22.Y - b21.Y, b22.X - b21.X);
                                                C = (180 * (float)(B - A)) / Math.PI;
                                                #endregion
                                                HOperatorSet.GenRegionLine(out ho_Line2, b21.Y, b21.X, b22.Y, b22.X);
                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row1, hv_Add2Col1, out hv_DisMin21Min, out hv_DisMin21Max);
                                                HOperatorSet.DistancePr(ho_Line2, hv_Add2Row2, hv_Add2Col2, out hv_DisMin22Min, out hv_DisMin22Max);
                                                double am2 = (double)(hv_DisMin21Min + hv_DisMin22Min);
                                                hv_DisMin2 = am2 * GCCD2.xpm;
                                                #endregion
                                                //Glue.GlueDis1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                //Glue.GlueDis2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                string d1 = Math.Round((double)hv_DisMin1, 3).ToString();
                                                string d2 = Math.Round((double)hv_DisMin2, 3).ToString();
                                                if (CCDName == "GCCD2-1")
                                                {
                                                    Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                }
                                                if (CCDName == "GCCD2-2")
                                                {
                                                    Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                }
                                                if (CCDName == "GCCD2-3")
                                                {
                                                    Glue.P1GlueDis1 = d1; Glue.P1GlueDis2 = d2;
                                                }
                                                if (CCDName == "GCCD2-4")
                                                {
                                                    Glue.P2GlueDis1 = d1; Glue.P2GlueDis2 = d2;
                                                }
                                                if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax & hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                {
                                                    //HWindowID.SetColor("cyan");
                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                    disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0001";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    if (GCCD2.Deg4Checked)
                                                    {
                                                        Deg4Plus();
                                                        if (hv_P1RowCh.Length != 0)
                                                        {
                                                            #region PASS
                                                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                            HWindowID.SetColor("green");
                                                            HWindowID.SetLineWidth(2);
                                                            HWindowID.DispObj(ho_CrossP1);
                                                            HWindowID.DispObj(ho_CrossP2);
                                                            HWindowID.DispObj(ho_CrossP3);
                                                            HWindowID.DispObj(ho_CrossP4);
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                            double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                            double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                            double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                            double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                            double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                            double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                            double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                            string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                            string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                            string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                            string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                            string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                            string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                            string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                            string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                            WriteToPlc.CMDOKNG[i_image] = "0001";
                                                            WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                        else
                                                        {
                                                            #region NG
                                                            disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                            string TESTtime = DateTime.Now.ToString("HHmmss");
                                                            FrmMain.afterDT = System.DateTime.Now;
                                                            WriteToPlc.CMDOKNG[i_image] = "0002";
                                                            WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                            WriteToPlc.CMDsend[i_image] = true;
                                                            if (saveOPic)
                                                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                            if (saveRPic)
                                                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                            #endregion
                                                        }
                                                    }
                                                    else
                                                    {
                                                        #region PASS
                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    if (CCDName == "GCCD2-1")
                                                        Glue.P1GlueDisR = "PASS";
                                                    if (CCDName == "GCCD2-2")
                                                        Glue.P2GlueDisR = "PASS";
                                                    if (CCDName == "GCCD2-3")
                                                        Glue.P1GlueDisR = "PASS";
                                                    if (CCDName == "GCCD2-4")
                                                        Glue.P2GlueDisR = "PASS";
                                                }
                                                else
                                                {
                                                    #region NG
                                                    //HWindowID.SetColor("cyan");
                                                    //HOperatorSet.DispLine(HWindowID, hv_Add1Row1, hv_Add1Col1, hv_Add1Row2, hv_Add1Col2);
                                                    //HOperatorSet.DispLine(HWindowID, hv_Add2Row1, hv_Add2Col1, hv_Add2Row2, hv_Add2Col2);
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    if (hv_DisMin1 > DisMin & hv_DisMin1 < DisMax)
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "cyan", "false");
                                                    else
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin1, 3), "", b12.Y, b12.X, "red", "false");
                                                    if (hv_DisMin2 > DisMin & hv_DisMin2 < DisMax)
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "cyan", "false");
                                                    else
                                                        disp_message(HWindowID, Math.Round((double)hv_DisMin2, 3), "", b22.Y, b22.X, "red", "false");
                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                    if (CCDName == "GCCD2-1")
                                                        Glue.P1GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-2")
                                                        Glue.P2GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-3")
                                                        Glue.P1GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-4")
                                                        Glue.P2GlueDisR = "NG";
                                                }
                                            DisNG:
                                                if (hv_AddArea1.Length <= 1 || hv_AddArea2.Length <= 1)
                                                {
                                                    #region NG
                                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                                    if (hv_AddArea1.Length <= 1)
                                                        disp_message(HWindowID, "null", "", b12.Y, b12.X, "cyan", "false");
                                                    if (hv_AddArea2.Length <= 1)
                                                        disp_message(HWindowID, "null", "", b22.Y, b22.X, "cyan", "false");
                                                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                    string TESTtimeNG = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    string XnumNG = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                    string YnumNG = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                    string AnglenumNG = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                                    WriteToPlc.CMDresult[i_image] = XnumNG + YnumNG + AnglenumNG;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtimeNG);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtimeNG);
                                                    #endregion
                                                    if (CCDName == "GCCD2-1")
                                                        Glue.P1GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-2")
                                                        Glue.P2GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-3")
                                                        Glue.P1GlueDisR = "NG";
                                                    if (CCDName == "GCCD2-4")
                                                        Glue.P2GlueDisR = "NG";
                                                }
                                                #endregion
                                            }
                                            else
                                            {
                                                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                                string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                                WriteToPlc.CMDOKNG[i_image] = "0001";
                                                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                                if (GCCD2.Deg4Checked)
                                                {
                                                    #region 4点
                                                    Deg4Plus();
                                                    if (hv_P1RowCh.Length != 0)
                                                    {
                                                        #region PASS
                                                        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                        HWindowID.SetColor("green");
                                                        HWindowID.SetLineWidth(2);
                                                        HWindowID.DispObj(ho_CrossP1);
                                                        HWindowID.DispObj(ho_CrossP2);
                                                        HWindowID.DispObj(ho_CrossP3);
                                                        HWindowID.DispObj(ho_CrossP4);
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        double xnum1 = (hv_P1ColumnCh - col) * xpmi;
                                                        double xnum2 = (hv_P2ColumnCh - col) * xpmi;
                                                        double xnum3 = (hv_P3ColumnCh - col) * xpmi;
                                                        double xnum4 = (hv_P4ColumnCh - col) * xpmi;
                                                        double ynum1 = (-(hv_P1RowCh - row)) * ypmi;
                                                        double ynum2 = (-(hv_P2RowCh - row)) * ypmi;
                                                        double ynum3 = (-(hv_P3RowCh - row)) * ypmi;
                                                        double ynum4 = (-(hv_P4RowCh - row)) * ypmi;
                                                        string Xnum1 = FrmVisionSet.NToHString((int)(Math.Round(xnum1, 3) * 1000));
                                                        string Xnum2 = FrmVisionSet.NToHString((int)(Math.Round(xnum2, 3) * 1000));
                                                        string Xnum3 = FrmVisionSet.NToHString((int)(Math.Round(xnum3, 3) * 1000));
                                                        string Xnum4 = FrmVisionSet.NToHString((int)(Math.Round(xnum4, 3) * 1000));
                                                        string Ynum1 = FrmVisionSet.NToHString((int)(Math.Round(ynum1, 3) * 1000));
                                                        string Ynum2 = FrmVisionSet.NToHString((int)(Math.Round(ynum2, 3) * 1000));
                                                        string Ynum3 = FrmVisionSet.NToHString((int)(Math.Round(ynum3, 3) * 1000));
                                                        string Ynum4 = FrmVisionSet.NToHString((int)(Math.Round(ynum4, 3) * 1000));
                                                        WriteToPlc.CMDOKNG[i_image] = "0001";
                                                        WriteToPlc.CMDresult4 = Xnum1 + Ynum1 + Xnum2 + Ynum2 + Xnum3 + Ynum3 + Xnum4 + Ynum4;
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\PASS\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\PASS\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    else
                                                    {
                                                        #region NG
                                                        disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                                                        string TESTtime = DateTime.Now.ToString("HHmmss");
                                                        FrmMain.afterDT = System.DateTime.Now;
                                                        WriteToPlc.CMDOKNG[i_image] = "0002";
                                                        WriteToPlc.CMDresult4 = "0000000000000000" + "0000000000000000" + "0000000000000000" + "0000000000000000";
                                                        WriteToPlc.CMDsend[i_image] = true;
                                                        if (saveOPic)
                                                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "q\\NG\\OriginalImage\\" + TESTtime);
                                                        if (saveRPic)
                                                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "q\\NG\\ResultImage\\" + TESTtime);
                                                        #endregion
                                                    }
                                                    #endregion
                                                }
                                                else
                                                {
                                                    #region PASS
                                                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                                    FrmMain.afterDT = System.DateTime.Now;
                                                    WriteToPlc.CMDsend[i_image] = true;
                                                    if (saveOPic)
                                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                                                    if (saveRPic)
                                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                                                    #endregion
                                                }
                                            }
                                        }
                                        #endregion
                                    }
                                }
                                else//斷膠NG
                                {
                                    #region NG
                                    HWindowID.ClearWindow();
                                    HWindowID.DispObj(halcon.Image[i_image]);
                                    HWindowID.SetColor("red");
                                    HWindowID.SetLineWidth(1);
                                    HWindowID.DispCross(row, col, width, 0);
                                    if (FShape == "Circle")
                                    {
                                        HWindowID.DispObj(ho_RCircle0);
                                        HWindowID.SetColor("green");
                                        HWindowID.DispObj(ho_RCircle);
                                    }
                                    else if (FShape == "Square")
                                    {
                                        HWindowID.SetColor("green");
                                        HWindowID.SetDraw("margin");
                                        HWindowID.DispObj(ho_ResultContours);
                                    }
                                    HWindowID.SetColor("blue");
                                    if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                        HWindowID.DispObj(ho_ArrowLine);
                                    else
                                        HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);

                                    HWindowID.DispObj(ho_gGreyUnion);
                                    //HWindowID.DispObj(ho_g1Grey);
                                    //HWindowID.DispObj(ho_g2Grey);
                                    if (Glue.Glue_Circle_2)
                                    {
                                        HWindowID.SetColor("orange");
                                        HWindowID.DispObj(ho_gGreyUnion_2);
                                    }
                                    HWindowID.SetColor("red");
                                    HWindowID.DispObj(ho_gapRegion);
                                    //HWindowID.DispObj(ho_MSERLight);
                                    set_display_font(HWindowID, 14, "sans", "false", "false");
                                    disp_message(HWindowID, Math.Round(hv_GlueArea.D).ToString(), "", 1520, 150, "red", "false");
                                    //disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1520, 150, "red", "false");
                                    //disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1600, 150, "red", "false");
                                    set_display_font(HWindowID, 18, "sans", "true", "false");
                                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                    disp_message(HWindowID, "NG(" + hv_gapRegionCount.ToString() + ")", "", 150, 2000, "red", "false");
                                    string TESTtime = DateTime.Now.ToString("HHmmss");
                                    FrmMain.afterDT = System.DateTime.Now;
                                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                                    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
                                    WriteToPlc.CMDOKNG[i_image] = "0003";
                                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                                    WriteToPlc.CMDsend[i_image] = true;
                                    if (saveOPic)
                                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                    if (saveRPic)
                                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                    #endregion
                                }
                            }
                            else//膠水面積or角度NG
                            {
                                #region NG
                                HWindowID.DispObj(halcon.Image[i_image]);
                                HWindowID.SetColor("blue");
                                //if (g1Area2 < permin || g1Area2 > permax)
                                //    HWindowID.SetColor("red");
                                //HWindowID.DispObj(ho_g1Grey);

                                //HWindowID.SetColor("blue");
                                //if (g2Area2 < permin || g2Area2 > permax)
                                //    HWindowID.SetColor("red");
                                //HWindowID.DispObj(ho_g2Grey);
                                if (hv_GlueArea < permin || hv_GlueArea > permax)
                                    HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_gGreyUnion);
                                if (Glue.Glue_Circle_2)
                                {
                                    HWindowID.SetColor("orange");
                                    HWindowID.DispObj(ho_gGreyUnion_2);
                                }
                                HWindowID.SetColor("blue");
                                set_display_font(HWindowID, 18, "sans", "true", "false");
                                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                                disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                                disp_message(HWindowID, "NG(gluea)", "", 150, 2000, "red", "false");
                                set_display_font(HWindowID, 14, "sans", "false", "false");
                                disp_message(HWindowID, Math.Round(hv_GlueArea.D).ToString(), "", 1600, 150, "red", "false");
                                //disp_message(HWindowID, Math.Round((double)g1Area2).ToString(), "", 1600, 150, "red", "false");
                                //disp_message(HWindowID, Math.Round((double)g2Area2).ToString(), "", 1660, 150, "red", "false");
                                disp_message(HWindowID, "GlueAngle:" + Math.Round(hv_TotalAnglePF.D).ToString(), "", 1720, 150, "red", "false");
                                if (Glue.Glue_Circle_2)
                                {
                                    disp_message(HWindowID, "GlueAngle_2:" + Math.Round(hv_TotalAnglePF_2.D).ToString(), "", 1780, 150, "red", "false");
                                }
                                string TESTtime = DateTime.Now.ToString("HHmmss");
                                FrmMain.afterDT = System.DateTime.Now;
                                WriteToPlc.CMDOKNG[i_image] = "0003";
                                WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                                WriteToPlc.CMDsend[i_image] = true;
                                if (saveOPic)
                                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                                if (saveRPic)
                                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                                #endregion
                            }
                        }
                        else
                        {
                            #region NG
                            HWindowID.DispObj(halcon.Image[i_image]);
                            HWindowID.SetColor("red");
                            HWindowID.SetLineWidth(1);
                            HWindowID.DispCross(row, col, width, 0);
                            HWindowID.SetColor("green");
                            if (FShape == "Circle")
                            {
                                HWindowID.DispObj(ho_RCircle0);
                                HWindowID.SetColor("red");
                                HWindowID.DispObj(ho_RCircle);
                            }
                            else if (FShape == "Square")
                            {
                                HWindowID.SetDraw("margin");
                                HWindowID.DispObj(ho_ResultContours);
                            }
                            HWindowID.SetColor("blue");
                            if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
                                HWindowID.DispObj(ho_ArrowLine);
                            else
                                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
                            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
                            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
                            set_display_font(HWindowID, 14, "sans", "false", "false");
                            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
                            //disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
                            //disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            WriteToPlc.CMDOKNG[i_image] = "0003";
                            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                        }
                        #region 释放变量
                        //ho_GlueQ1.Dispose();
                        //ho_GlueQ2.Dispose();
                        ho_GlueH1.Dispose();
                        ho_GlueDiff1.Dispose();
                        ho_g1Grey.Dispose();
                        ho_GlueH2.Dispose();
                        ho_GlueDiff2.Dispose();
                        ho_g2Grey.Dispose();
                        ho_CutRegion1.Dispose();
                        ho_CutRegion2.Dispose();
                        ho_ImageReduced1.Dispose();
                        ho_CutRegion10.Dispose();
                        ho_ImageReducedI.Dispose();
                        ho_CutRegion20.Dispose();
                        ho_ImageReducedO.Dispose();
                        ho_GrayDiff.Dispose();
                        ho_GrayDiffSelect.Dispose();
                        ho_GrayDiffSelectIn.Dispose();
                        ho_GrayDiffSelectOut.Dispose();
                        ho_GlueImage_After.Dispose();
                        //ho_GlueImage_Befort.Dispose();
                        ho_GlueImage_Befort_2.Dispose();
                        #endregion
                    }
                    #endregion
                    #endregion
                }
            }
            else
            {
                if ((((GlueOrder == 1 & GQCutIsChecked) || (GlueOrder == 2 & GHCutIsChecked)) & hv_Deg2.D != 720 & hv_Deg2.Length != 0) ||
                     ((GlueOrder == 1 & !GQCutIsChecked) || (GlueOrder == 2 & !GHCutIsChecked)))
                {
                    halcon.centerRow = hv_RowCenter;
                    halcon.centerCol = hv_ColCenter;
                    halcon.centerDeg = hv_Deg2;
                }
                else
                {
                    HWindowID.ClearWindow();
                    HWindowID.DispObj(halcon.Image[i_image]);
                }
            }
        }
        static private void select_mask_obj(HObject ho_Objects, out HObject ho_SelectedObjects, HTuple hv_Mask)
        {
            // Local iconic variables 

            // Local control variables 

            HTuple hv_Number = null, hv_AllNumbers = null;
            HTuple hv_Indices = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_SelectedObjects);
            //select_mask_obj selects one or more single elements of the object array
            //Objects and returns them in SelectedObjects.
            //The elements of Mask determine if the corresponding elements of Objects are selected.
            //If the value is greater than 0, the corresponding element is selected.
            //
            //Check number of elements
            HOperatorSet.CountObj(ho_Objects, out hv_Number);
            if ((int)(new HTuple(hv_Number.TupleNotEqual(new HTuple(hv_Mask.TupleLength()
                )))) != 0)
            {
                throw new HalconException("Number of elements in Objects and Mask do not match.");
            }
            //
            //Check type of mask elements
            hv_AllNumbers = new HTuple((((((hv_Mask.TupleIsRealElem())).TupleSum()) + (((hv_Mask.TupleIsIntElem()
                )).TupleSum()))).TupleEqual(new HTuple(hv_Mask.TupleLength())));
            if ((int)((new HTuple(hv_AllNumbers.TupleNot())).TupleAnd(new HTuple(hv_Mask.TupleNotEqual(
                new HTuple())))) != 0)
            {
                throw new HalconException("Invalid type: Elements of Mask must be integer or real numbers.");
            }
            //
            //Use select_mask for tuples to generate a list of object indices.
            hv_Indices = (HTuple.TupleGenSequence(1, new HTuple(hv_Mask.TupleLength()), 1)).TupleSelectMask(
                hv_Mask);
            ho_SelectedObjects.Dispose();
            HOperatorSet.SelectObj(ho_Objects, out ho_SelectedObjects, hv_Indices);

            return;
        }
        void CutView() //DegreeMode5
        {
            hv_g1angle = (Math.PI / 180) * 90;
            double distance = ARegionDis;
            double k1 = Math.Tan(Math.PI * (90 + 45) / 180);
            double k2 = -1.0 / k1;
            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
            hv_g1RowCh = g2Point.X;
            hv_g1ColumnCh = g2Point.Y;
            hv_g3RowCh = g4Point.X;
            hv_g3ColumnCh = g4Point.Y;
            FrmVisionSet.GetPointXY(cenPoint, distance, k2, ref g2Point, ref g4Point);
            hv_g2RowCh = g2Point.X;
            hv_g2ColumnCh = g2Point.Y;
            hv_g4RowCh = g4Point.X;
            hv_g4ColumnCh = g4Point.Y;

            ho_ImageMean1.Dispose();
            HOperatorSet.MeanImage(ho_ImageRun, out  ho_ImageMean1, 9, 9);
            ho_ImageMean.Dispose();
            HOperatorSet.MeanImage(ho_ImageRun, out  ho_ImageMean, 90, 90);
            ho_odd_region.Dispose();
            HOperatorSet.DynThreshold(ho_ImageMean1, ho_ImageMean, out ho_odd_region, ARegionTh, "not_equal");

            #region 区域1
            ho_g1Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g1Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g1Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_odd_region, ho_g1Region, out ho_g1Reduced);
            ho_g1conn.Dispose();
            HOperatorSet.Connection(ho_g1Reduced, out ho_g1conn);
            ho_g1sele.Dispose();
            HOperatorSet.SelectShape(ho_g1conn, out ho_g1sele, "area", "and", 50, 999999);
            ho_g1Reduced.Dispose();
            HOperatorSet.Union1(ho_g1sele, out ho_g1Reduced);
            #endregion
            #region 区域3
            ho_g3Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g3Rectangle, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g3Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g3Region, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g3Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_odd_region, ho_g3Region, out ho_g3Reduced);
            ho_g3conn.Dispose();
            HOperatorSet.Connection(ho_g3Reduced, out ho_g3conn);
            ho_g3sele.Dispose();
            HOperatorSet.SelectShape(ho_g3conn, out ho_g3sele, "area", "and", 50, 999999);
            ho_g3Reduced.Dispose();
            HOperatorSet.Union1(ho_g3sele, out ho_g3Reduced);
            #endregion
            #region 区域2
            ho_g2Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g2Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g2Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_odd_region, ho_g2Region, out ho_g2Reduced);
            ho_g2conn.Dispose();
            HOperatorSet.Connection(ho_g2Reduced, out ho_g2conn);
            ho_g2sele.Dispose();
            HOperatorSet.SelectShape(ho_g2conn, out ho_g2sele, "area", "and", 50, 999999);
            ho_g2Reduced.Dispose();
            HOperatorSet.Union1(ho_g2sele, out ho_g2Reduced);
            #endregion
            #region 区域4
            ho_g4Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g4Rectangle, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g4Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g4Region, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, ARegionLen1, ARegionLen2);
            ho_g4Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_odd_region, ho_g4Region, out ho_g4Reduced);
            ho_g4conn.Dispose();
            HOperatorSet.Connection(ho_g4Reduced, out ho_g4conn);
            ho_g4sele.Dispose();
            HOperatorSet.SelectShape(ho_g4conn, out ho_g4sele, "area", "and", 50, 999999);
            ho_g4Reduced.Dispose();
            HOperatorSet.Union1(ho_g4sele, out ho_g4Reduced);
            #endregion
        }
        void GlueView() //4点 胶辨识
        {
            hv_g1angle = (Math.PI / 180) * (hv_Deg2 + hv_FDegPlue - 45);
            double distance = hv_grayDistance;
            double k1 = Math.Tan(Math.PI * (hv_Deg2 + hv_FDegPlue) / 180);
            double k2 = -1.0 / k1;
            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
            hv_g1RowCh = g2Point.X;
            hv_g1ColumnCh = g2Point.Y;
            hv_g3RowCh = g4Point.X;
            hv_g3ColumnCh = g4Point.Y;
            FrmVisionSet.GetPointXY(cenPoint, distance, k2, ref g2Point, ref g4Point);
            hv_g2RowCh = g2Point.X;
            hv_g2ColumnCh = g2Point.Y;
            hv_g4RowCh = g4Point.X;
            hv_g4ColumnCh = g4Point.Y;

            #region 区域1
            ho_g1Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g1Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g1Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_g1Region, out ho_g1Reduced);
            HOperatorSet.AreaCenter(ho_g1Reduced, out hv_g1area, out hv_g1RowCh, out hv_g1ColumnCh);
            #endregion
            #region 区域3
            ho_g3Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g3Rectangle, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g3Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g3Region, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g3Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_g3Region, out ho_g3Reduced);
            HOperatorSet.AreaCenter(ho_g3Reduced, out hv_g3area, out hv_g3RowCh, out hv_g3ColumnCh);
            #endregion
            #region 区域2
            ho_g2Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g2Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g2Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_g2Region, out ho_g2Reduced);
            HOperatorSet.AreaCenter(ho_g2Reduced, out hv_g2area, out hv_g2RowCh, out hv_g2ColumnCh);
            #endregion
            #region 区域4
            ho_g4Rectangle.Dispose();
            HOperatorSet.GenRectangle2ContourXld(out ho_g4Rectangle, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g4Region.Dispose();
            HOperatorSet.GenRectangle2(out ho_g4Region, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
            ho_g4Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_g4Region, out ho_g4Reduced);
            HOperatorSet.AreaCenter(ho_g4Reduced, out hv_g4area, out hv_g4RowCh, out hv_g4ColumnCh);
            #endregion
        }
        void GlueView1() //2圆弧 胶辨识
        {
            hv_startPhi = (StartAngle * 3.14159) / 180;
            hv_endPhi = (EndAngle * 3.14159) / 180;
            hv_startPhi1 = ((StartAngle + 180) * 3.14159) / 180;
            hv_endPhi1 = ((EndAngle + 180) * 3.14159) / 180;
            #region //创建外扇形
            ho_ContCircleOut.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleOut, hv_rowFCenter, hv_colFCenter,
                 MidCirRadius + RegionWidth / 2, hv_startPhi, hv_endPhi, "positive", 1);
            hv_rowF = new HTuple();
            hv_rowF[0] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_startPhi.TupleSin()));
            hv_rowF[1] = hv_rowFCenter;
            hv_rowF[2] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_endPhi.TupleSin()));
            hv_colF = new HTuple();
            hv_colF[0] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_startPhi.TupleCos()));
            hv_colF[1] = hv_colFCenter;
            hv_colF[2] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_endPhi.TupleCos()));
            ho_Contour.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_rowF, hv_colF);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleOut, ho_Contour, out ho_ContoursUnion
                    );
            }
            else if ((EndAngle - StartAngle) < 360)
            {

                ho_ContoursUnion.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleOut, ho_Contour, out ho_ContoursUnion
                    );
            }
            ho_RegionS.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion, out ho_RegionS, "filled");
            #endregion
            #region //创建内扇形
            ho_ContCircleIn.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleIn, hv_rowFCenter, hv_colFCenter,
                (MidCirRadius - RegionWidth / 2), hv_startPhi, hv_endPhi, "positive", 1);
            hv_rowF1 = new HTuple();
            hv_rowF1[0] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_startPhi.TupleSin()));
            hv_rowF1[1] = hv_rowFCenter;
            hv_rowF1[2] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_endPhi.TupleSin()));
            hv_colF1 = new HTuple();
            hv_colF1[0] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_startPhi.TupleCos()));
            hv_colF1[1] = hv_colFCenter;
            hv_colF1[2] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_endPhi.TupleCos()));
            ho_Contour1.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_rowF1, hv_colF1);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion1.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleIn, ho_Contour1, out ho_ContoursUnion1
                    );
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion1.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleIn, ho_Contour1, out ho_ContoursUnion1
                    );
            }
            ho_RegionS1.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion1, out ho_RegionS1, "filled");
            #endregion
            #region //生产扇形环
            if ((EndAngle - StartAngle) < 360)
            {
                ho_RegionDifference.Dispose();
                HOperatorSet.Difference(ho_RegionS, ho_RegionS1, out ho_RegionDifference);
            }
            else
            {
                ho_RegionS.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS, hv_rowFCenter, hv_colFCenter, MidCirRadius + RegionWidth / 2);
                ho_RegionS1.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS1, hv_rowFCenter, hv_colFCenter, MidCirRadius - RegionWidth / 2);
                ho_RegionDifference.Dispose();
                HOperatorSet.Difference(ho_RegionS, ho_RegionS1, out ho_RegionDifference);
                ho_R.Dispose();
                HOperatorSet.GenContourRegionXld(ho_RegionS1, out ho_R, "border");
            }
            HOperatorSet.GenContourRegionXld(ho_RegionDifference, out ho_RegionD, "border");
            #endregion

            #region //创建外扇形
            ho_ContCircleOut1.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleOut1, hv_rowFCenter, hv_colFCenter,
                 MidCirRadius + RegionWidth / 2, hv_startPhi1, hv_endPhi1, "positive", 1);
            hv_rowF0 = new HTuple();
            hv_rowF0[0] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_startPhi1.TupleSin()));
            hv_rowF0[1] = hv_rowFCenter;
            hv_rowF0[2] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_endPhi1.TupleSin()));
            hv_colF0 = new HTuple();
            hv_colF0[0] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_startPhi1.TupleCos()));
            hv_colF0[1] = hv_colFCenter;
            hv_colF0[2] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_endPhi1.TupleCos()));
            ho_Contour0.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour0, hv_rowF0, hv_colF0);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion0.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleOut1, ho_Contour0, out ho_ContoursUnion0);
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion0.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleOut1, ho_Contour0, out ho_ContoursUnion0);
            }
            ho_RegionS0.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion0, out ho_RegionS0, "filled");
            #endregion
            #region //创建内扇形
            ho_ContCircleIn1.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleIn1, hv_rowFCenter, hv_colFCenter,
                (MidCirRadius - RegionWidth / 2), hv_startPhi1, hv_endPhi1, "positive", 1);
            hv_rowF01 = new HTuple();
            hv_rowF01[0] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_startPhi1.TupleSin()));
            hv_rowF01[1] = hv_rowFCenter;
            hv_rowF01[2] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_endPhi1.TupleSin()));
            hv_colF01 = new HTuple();
            hv_colF01[0] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_startPhi1.TupleCos()));
            hv_colF01[1] = hv_colFCenter;
            hv_colF01[2] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_endPhi1.TupleCos()));
            ho_Contour01.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour01, hv_rowF01, hv_colF01);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion01.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleIn1, ho_Contour01, out ho_ContoursUnion01);
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion01.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleIn1, ho_Contour01, out ho_ContoursUnion01);
            }
            ho_RegionS01.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion01, out ho_RegionS01, "filled");
            #endregion
            #region //生产扇形环
            if ((EndAngle - StartAngle) < 360)
            {
                ho_RegionDifference0.Dispose();
                HOperatorSet.Difference(ho_RegionS0, ho_RegionS01, out ho_RegionDifference0);
            }
            else
            {
                ho_RegionS0.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS0, hv_rowFCenter, hv_colFCenter, MidCirRadius + RegionWidth / 2);
                ho_RegionS01.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS01, hv_rowFCenter, hv_colFCenter, MidCirRadius - RegionWidth / 2);
                ho_RegionDifference0.Dispose();
                HOperatorSet.Difference(ho_RegionS0, ho_RegionS01, out ho_RegionDifference0);
                ho_R0.Dispose();
                HOperatorSet.GenContourRegionXld(ho_RegionS01, out ho_R0, "border");
            }
            HOperatorSet.GenContourRegionXld(ho_RegionDifference0, out ho_RegionD0, "border");
            #endregion

            #region 区域1
            ho_g1Rectangle.Dispose();
            HOperatorSet.GenContourRegionXld(ho_RegionDifference, out ho_g1Rectangle, "border");
            ho_g1Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_RegionDifference, out ho_g1Reduced);
            HOperatorSet.AreaCenter(ho_g1Reduced, out hv_g1area, out hv_g1RowCh, out hv_g1ColumnCh);
            #endregion
            #region 区域2
            ho_g2Rectangle.Dispose();
            HOperatorSet.GenContourRegionXld(ho_RegionDifference0, out ho_g2Rectangle, "border");
            ho_g2Reduced.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_RegionDifference0, out ho_g2Reduced);
            HOperatorSet.AreaCenter(ho_g2Reduced, out hv_g2area, out hv_g2RowCh, out hv_g2ColumnCh);
            #endregion
        }
        void GlueView2(double OuterRadius, double InnerRadius, double StartAngle, double EndAngle) //2圆弧 胶辨识
        {
            HTuple MidCirRadius = (OuterRadius + InnerRadius) / 2;
            HTuple RegionWidth = OuterRadius - InnerRadius;
            hv_startPhi = (StartAngle * 3.14159) / 180;
            hv_endPhi = (EndAngle * 3.14159) / 180;
            hv_startPhi1 = ((StartAngle + 180) * 3.14159) / 180;
            hv_endPhi1 = ((EndAngle + 180) * 3.14159) / 180;
            #region //创建外扇形
            ho_ContCircleOut.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleOut, hv_rowFCenter, hv_colFCenter,
                 MidCirRadius + RegionWidth / 2, hv_startPhi, hv_endPhi, "positive", 1);
            hv_rowF = new HTuple();
            hv_rowF[0] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_startPhi.TupleSin()));
            hv_rowF[1] = hv_rowFCenter;
            hv_rowF[2] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_endPhi.TupleSin()));
            hv_colF = new HTuple();
            hv_colF[0] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_startPhi.TupleCos()));
            hv_colF[1] = hv_colFCenter;
            hv_colF[2] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_endPhi.TupleCos()));
            ho_Contour.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour, hv_rowF, hv_colF);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleOut, ho_Contour, out ho_ContoursUnion
                    );
            }
            else if ((EndAngle - StartAngle) < 360)
            {

                ho_ContoursUnion.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleOut, ho_Contour, out ho_ContoursUnion
                    );
            }
            ho_RegionS.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion, out ho_RegionS, "filled");
            #endregion
            #region //创建内扇形
            ho_ContCircleIn.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleIn, hv_rowFCenter, hv_colFCenter,
                (MidCirRadius - RegionWidth / 2), hv_startPhi, hv_endPhi, "positive", 1);
            hv_rowF1 = new HTuple();
            hv_rowF1[0] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_startPhi.TupleSin()));
            hv_rowF1[1] = hv_rowFCenter;
            hv_rowF1[2] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_endPhi.TupleSin()));
            hv_colF1 = new HTuple();
            hv_colF1[0] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_startPhi.TupleCos()));
            hv_colF1[1] = hv_colFCenter;
            hv_colF1[2] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_endPhi.TupleCos()));
            ho_Contour1.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour1, hv_rowF1, hv_colF1);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion1.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleIn, ho_Contour1, out ho_ContoursUnion1
                    );
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion1.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleIn, ho_Contour1, out ho_ContoursUnion1
                    );
            }
            ho_RegionS1.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion1, out ho_RegionS1, "filled");
            #endregion
            #region //生产扇形环
            if ((EndAngle - StartAngle) < 360)
            {
                ho_RegionDifference_2.Dispose();
                HOperatorSet.Difference(ho_RegionS, ho_RegionS1, out ho_RegionDifference_2);
            }
            else
            {
                ho_RegionS.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS, hv_rowFCenter, hv_colFCenter, MidCirRadius + RegionWidth / 2);
                ho_RegionS1.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS1, hv_rowFCenter, hv_colFCenter, MidCirRadius - RegionWidth / 2);
                ho_RegionDifference_2.Dispose();
                HOperatorSet.Difference(ho_RegionS, ho_RegionS1, out ho_RegionDifference_2);
                ho_R.Dispose();
                HOperatorSet.GenContourRegionXld(ho_RegionS1, out ho_R, "border");
            }
            HOperatorSet.GenContourRegionXld(ho_RegionDifference_2, out ho_RegionD, "border");
            #endregion

            #region //创建外扇形
            ho_ContCircleOut1.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleOut1, hv_rowFCenter, hv_colFCenter,
                 MidCirRadius + RegionWidth / 2, hv_startPhi1, hv_endPhi1, "positive", 1);
            hv_rowF0 = new HTuple();
            hv_rowF0[0] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_startPhi1.TupleSin()));
            hv_rowF0[1] = hv_rowFCenter;
            hv_rowF0[2] = hv_rowFCenter - ((MidCirRadius + RegionWidth / 2) * (hv_endPhi1.TupleSin()));
            hv_colF0 = new HTuple();
            hv_colF0[0] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_startPhi1.TupleCos()));
            hv_colF0[1] = hv_colFCenter;
            hv_colF0[2] = hv_colFCenter + ((MidCirRadius + RegionWidth / 2) * (hv_endPhi1.TupleCos()));
            ho_Contour0.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour0, hv_rowF0, hv_colF0);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion0.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleOut1, ho_Contour0, out ho_ContoursUnion0);
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion0.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleOut1, ho_Contour0, out ho_ContoursUnion0);
            }
            ho_RegionS0.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion0, out ho_RegionS0, "filled");
            #endregion
            #region //创建内扇形
            ho_ContCircleIn1.Dispose();
            HOperatorSet.GenCircleContourXld(out ho_ContCircleIn1, hv_rowFCenter, hv_colFCenter,
                (MidCirRadius - RegionWidth / 2), hv_startPhi1, hv_endPhi1, "positive", 1);
            hv_rowF01 = new HTuple();
            hv_rowF01[0] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_startPhi1.TupleSin()));
            hv_rowF01[1] = hv_rowFCenter;
            hv_rowF01[2] = hv_rowFCenter - ((MidCirRadius - RegionWidth / 2) * (hv_endPhi1.TupleSin()));
            hv_colF01 = new HTuple();
            hv_colF01[0] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_startPhi1.TupleCos()));
            hv_colF01[1] = hv_colFCenter;
            hv_colF01[2] = hv_colFCenter + ((MidCirRadius - RegionWidth / 2) * (hv_endPhi1.TupleCos()));
            ho_Contour01.Dispose();
            HOperatorSet.GenContourPolygonXld(out ho_Contour01, hv_rowF01, hv_colF01);
            if ((EndAngle - StartAngle) < 180 && (EndAngle - StartAngle) > 0)
            {
                ho_ContoursUnion01.Dispose();
                HOperatorSet.Union2ClosedContoursXld(ho_ContCircleIn1, ho_Contour01, out ho_ContoursUnion01);
            }
            else if ((EndAngle - StartAngle) < 360)
            {
                ho_ContoursUnion01.Dispose();
                HOperatorSet.DifferenceClosedContoursXld(ho_ContCircleIn1, ho_Contour01, out ho_ContoursUnion01);
            }
            ho_RegionS01.Dispose();
            HOperatorSet.GenRegionContourXld(ho_ContoursUnion01, out ho_RegionS01, "filled");
            #endregion
            #region //生产扇形环
            if ((EndAngle - StartAngle) < 360)
            {
                ho_RegionDifference0_2.Dispose();
                HOperatorSet.Difference(ho_RegionS0, ho_RegionS01, out ho_RegionDifference0_2);
            }
            else
            {
                ho_RegionS0.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS0, hv_rowFCenter, hv_colFCenter, MidCirRadius + RegionWidth / 2);
                ho_RegionS01.Dispose();
                HOperatorSet.GenCircle(out ho_RegionS01, hv_rowFCenter, hv_colFCenter, MidCirRadius - RegionWidth / 2);
                ho_RegionDifference0_2.Dispose();
                HOperatorSet.Difference(ho_RegionS0, ho_RegionS01, out ho_RegionDifference0_2);
                ho_R0.Dispose();
                HOperatorSet.GenContourRegionXld(ho_RegionS01, out ho_R0, "border");
            }
            HOperatorSet.GenContourRegionXld(ho_RegionDifference0_2, out ho_RegionD0, "border");
            #endregion

            #region 区域1
            ho_g1Rectangle.Dispose();
            HOperatorSet.GenContourRegionXld(ho_RegionDifference_2, out ho_g1Rectangle, "border");
            ho_g1Reduced_2.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_RegionDifference_2, out ho_g1Reduced_2);
            HOperatorSet.AreaCenter(ho_g1Reduced_2, out hv_g1area, out hv_g1RowCh, out hv_g1ColumnCh);
            #endregion
            #region 区域2
            ho_g2Rectangle.Dispose();
            HOperatorSet.GenContourRegionXld(ho_RegionDifference0_2, out ho_g2Rectangle, "border");
            ho_g2Reduced_2.Dispose();
            HOperatorSet.ReduceDomain(ho_ImageRun, ho_RegionDifference0_2, out ho_g2Reduced_2);
            HOperatorSet.AreaCenter(ho_g2Reduced_2, out hv_g2area, out hv_g2RowCh, out hv_g2ColumnCh);
            #endregion
        }
        void GlueOutIde(string CCDName, HWindow HWindowID, int i_image, double GoutRow, double GoutCol, double GoutRadius,
                        HTuple CoatRow, HTuple CoatCol, HTuple centerRadius) //胶水外溢外观检测AVI（pccd2）
        {
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            Glue.GlueOutResult = "";
            HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
            HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
            hv_GlueOutAimR = GoutRadius;
            hv_GlueOutCheckR = (txtOutR - FrmVisionSet.txtOutP) * hv_GlueOutAimR / txtAimR;
            PCCD2.ppxm = Math.Round(txtAimR / (double)hv_GlueOutAimR / 2, 10);
            Lenspix = PCCD2.ppxm;
            PCCD2.ppxm = 1;
            ho_GlueOutCir1.Dispose();
            HOperatorSet.GenCircle(out ho_GlueOutCir1, GoutRow, GoutCol, hv_GlueOutCheckR);
            ho_GlueOutCir2.Dispose();
            HOperatorSet.GenCircle(out ho_GlueOutCir2, GoutRow, GoutCol, hv_GlueOutCheckR + hv_goWidth);
            ho_GlueOutDiff.Dispose();
            HOperatorSet.Difference(ho_GlueOutCir2, ho_GlueOutCir1, out ho_GlueOutDiff);
            ho_GlueOutReduced.Dispose();
            HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_GlueOutDiff, out ho_GlueOutReduced);
            ho_GlueOutRegion.Dispose();
            HOperatorSet.Threshold(ho_GlueOutReduced, out ho_GlueOutRegion, hv_GlueOutgray, 255);
            ho_GlueOutFillup.Dispose();
            HOperatorSet.FillUp(ho_GlueOutRegion, out ho_GlueOutFillup);
            HOperatorSet.AreaCenter(ho_GlueOutFillup, out hv_GlueOutArea, out hv_GlueOutRow, out hv_GlueOutCol);
            hv_GlueOutArea = hv_GlueOutArea * PCCD2.ppxm * PCCD2.ppxm;
            Glue.GlueOutArea = Math.Round((double)hv_GlueOutArea);
            if (Glue.GlueOutArea < Glue.GlueOutAreaMax)
            {
                Glue.GlueOutResult = "PASS";
                if (CoatCh)
                {
                    #region  Coat
                    centerRCircleOI.Dispose();
                    HOperatorSet.GenCircleContourXld(out centerRCircleOI, hv_RowCenter, hv_ColCenter, centerRadius, 0, 6.28318, "positive", 1);
                    //double rmin = 0.0, diam_min = 0.0; string CoatResult = "";
                    try
                    {
                        hx = (hv_ColCenter - col) * Lenspix;
                        hy = -(hv_RowCenter - row) * Lenspix;

                        HOperatorSet.CreateMetrologyModel(out hv_CoatMetrologyHandle);
                        HOperatorSet.SetMetrologyModelImageSize(hv_CoatMetrologyHandle, width, height);
                        HOperatorSet.AddMetrologyObjectGeneric(hv_CoatMetrologyHandle, "circle", ((CoatRow.TupleConcat(CoatCol))).TupleConcat(hv_CoatRRadius),
                            25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_transition", hv_Coattrans);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_select", "last");
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length1", hv_CoatRWidth);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length2", 3);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_threshold", hv_Coatgray);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "min_score", 0.2);
                        //应用测量
                        HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_CoatMetrologyHandle);
                        //获取结果
                        HOperatorSet.GetMetrologyObjectResult(hv_CoatMetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                        ho_RCircle.Dispose();
                        HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_CoatMetrologyHandle, "all", "all", 1.5);
                        ho_RCircle0.Dispose();
                        HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                        cx = (hv_circleParameter.TupleSelect(1) - col) * Lenspix;
                        cy = -(hv_circleParameter.TupleSelect(0) - row) * Lenspix;
                        rmin = Math.Round((double)hv_circleParameter.TupleSelect(2) * Lenspix * 2, 3) - CoatOffset;
                        HOperatorSet.ClearMetrologyModel(hv_CoatMetrologyHandle);
                        double xnum = (hv_ColCenter - col) * Lenspix;
                        double ynum = (-(hv_RowCenter - row)) * Lenspix;
                        HOperatorSet.DistancePp((HTuple)hx, (HTuple)hy, (HTuple)cx, (HTuple)cy, out dishc);
                        diam_min = Math.Round(rmin - 2 * (double)dishc, 3);
                        Sys.Orirmin = diam_min;
                        if (diam_min <= Sys.NumBase)
                        {
                            rmin = rmin + Sys.NumAdd;
                            diam_min = Math.Round(rmin - 2 * (double)dishc, 3);
                        }
                        HWindowID.ClearWindow();
                        HWindowID.SetDraw("fill");
                        HWindowID.DispObj(halcon.Image[i_image]);
                        HWindowID.SetColor("red");
                        HWindowID.SetLineWidth(1);
                        HWindowID.DispCross(row, col, width, 0);
                        HWindowID.DispObj(ho_RCircle0);
                        HWindowID.DispObj(ho_GlueOutFillup);
                        HWindowID.SetColor("green");
                        HWindowID.DispObj(centerRCircleOI);
                        HWindowID.SetColor("cyan");
                        if (FShape == "Circle")
                        {
                            HWindowID.DispObj(ho_RCircle0);
                        }
                        else if (FShape == "Square")
                        {
                            HWindowID.SetDraw("margin");
                            HWindowID.DispObj(ho_ResultContours);
                        }
                        HWindowID.SetDraw("margin");
                        HWindowID.SetColor("green");
                        HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR);
                        if (rmin > CoatRmin & rmin < CoatRmax & diam_min > dmin & diam_min < dmax)
                        {
                            #region PASS
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                            disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "green", "false");
                            disp_message(HWindowID, "D:" + Math.Round(rmin, 3) + "mm", "", 1650, 150, "cyan", "false");
                            disp_message(HWindowID, "Diam_Min:" + Math.Round(diam_min, 3) + "mm", "", 1750, 150, "cyan", "false");
                            disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0001";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                            #endregion
                            CoatResult = "PASS";
                        }
                        else
                        {
                            #region NG
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                            disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "green", "false");
                            disp_message(HWindowID, "D:" + rmin + "mm", "", 1650, 150, "red", "false");
                            disp_message(HWindowID, "Diam_Min:" + diam_min + "mm", "", 1750, 150, "red", "false");
                            disp_message(HWindowID, "NG(coat)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                            CoatResult = "NG";
                        }
                    }
                    catch
                    {
                        #region NG
                        double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                        double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                        ho_RCircle0.Dispose();
                        HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                        HWindowID.ClearWindow();
                        HWindowID.DispObj(halcon.Image[i_image]);
                        HWindowID.SetColor("red");
                        HWindowID.SetLineWidth(1);
                        HWindowID.DispCross(row, col, width, 0);
                        if (FShape == "Circle")
                        {
                            HWindowID.DispObj(ho_RCircle0);
                        }
                        else if (FShape == "Square")
                        {
                            HWindowID.SetDraw("margin");
                            HWindowID.DispObj(ho_ResultContours);
                        }
                        HWindowID.SetColor("green");
                        HWindowID.DispObj(centerRCircleOI);
                        set_display_font(HWindowID, 18, "sans", "true", "false");
                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                        disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "green", "false");
                        disp_message(HWindowID, "D:" + rmin + "mm", "", 1650, 150, "red", "false");
                        disp_message(HWindowID, "Diam_Min:" + diam_min + "mm", "", 1750, 150, "red", "false");
                        disp_message(HWindowID, "NG(coat)", "", 150, 2000, "red", "false");
                        string TESTtime = DateTime.Now.ToString("HHmmss");
                        FrmMain.afterDT = System.DateTime.Now;
                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                        string Anglenum = "00000000";
                        WriteToPlc.CMDOKNG[i_image] = "0002";
                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                        WriteToPlc.CMDsend[i_image] = true;
                        if (saveOPic)
                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                        if (saveRPic)
                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                        #endregion
                        CoatResult = "NG";
                    }
                    centerRCircleOI.Dispose();
                    Sys.CoatResult = CoatResult;
                    Sys.rmin = rmin;
                    Sys.diam_min = diam_min;
                    //CoatLogger(CoatResult, rmin, CoatRmin, diam_min,"_CoatLog.txt");
                    #endregion
                    Glue.GlueOutResult = CoatResult;
                }
                else
                {
                    #region PASS
                    HWindowID.ClearWindow();
                    HWindowID.SetDraw("fill");
                    HWindowID.DispObj(halcon.Image[i_image]);
                    HWindowID.SetColor("red");
                    HWindowID.DispCross(row, col, width, 0);
                    if (FShape == "Circle")
                    {
                        HWindowID.DispObj(ho_RCircle0);
                    }
                    else if (FShape == "Square")
                    {
                        HWindowID.SetColor("green");
                        HWindowID.SetDraw("margin");
                        HWindowID.DispObj(ho_ResultContours);
                    }
                    HWindowID.DispObj(ho_GlueOutFillup);
                    HWindowID.SetColor("blue");
                    HWindowID.SetDraw("margin");
                    HWindowID.SetLineWidth(1);
                    HWindowID.DispObj(ho_RCircle);
                    HWindowID.SetColor("green");
                    HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR);
                    //HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR + hv_goWidth);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                    double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                    disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "green", "false");
                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                    string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0001";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
                    #endregion
                }
            }
            else
            {
                Glue.GlueOutResult = "NG";
                if (CoatCh)
                {
                    #region  Coat
                    centerRCircleOI.Dispose();
                    HOperatorSet.GenCircleContourXld(out centerRCircleOI, hv_RowCenter, hv_ColCenter, centerRadius, 0, 6.28318, "positive", 1);
                    //double rmin = 0.0, diam_min = 0.0; string CoatResult = "";
                    try
                    {
                        hx = (hv_ColCenter - col) * Lenspix;
                        hy = -(hv_RowCenter - row) * Lenspix;
                        HOperatorSet.CreateMetrologyModel(out hv_CoatMetrologyHandle);
                        HOperatorSet.SetMetrologyModelImageSize(hv_CoatMetrologyHandle, width, height);
                        HOperatorSet.AddMetrologyObjectGeneric(hv_CoatMetrologyHandle, "circle", ((CoatRow.TupleConcat(CoatCol))).TupleConcat(hv_CoatRRadius),
                            25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_transition", hv_Coattrans);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_select", "last");
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length1", hv_CoatRWidth);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length2", 3);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_threshold", hv_Coatgray);
                        HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "min_score", 0.2);
                        //应用测量
                        HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_CoatMetrologyHandle);
                        //获取结果
                        HOperatorSet.GetMetrologyObjectResult(hv_CoatMetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                        ho_RCircle.Dispose();
                        HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_CoatMetrologyHandle, "all", "all", 1.5);
                        ho_RCircle0.Dispose();
                        HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                        cx = (hv_circleParameter.TupleSelect(1) - col) * Lenspix;
                        cy = -(hv_circleParameter.TupleSelect(0) - row) * Lenspix;
                        rmin = Math.Round((double)hv_circleParameter.TupleSelect(2) * Lenspix * 2, 3) - CoatOffset;
                        HOperatorSet.ClearMetrologyModel(hv_CoatMetrologyHandle);
                        double xnum = (hv_ColCenter - col) * Lenspix;
                        double ynum = (-(hv_RowCenter - row)) * Lenspix;
                        HOperatorSet.DistancePp((HTuple)hx, (HTuple)hy, (HTuple)cx, (HTuple)cy, out dishc);
                        diam_min = Math.Round(rmin - 2 * (double)dishc, 3);
                        Sys.Orirmin = diam_min;
                        if (diam_min <= Sys.NumBase)
                        {
                            rmin = rmin + Sys.NumAdd;
                            diam_min = Math.Round(rmin - 2 * (double)dishc, 3);
                        }
                        HWindowID.ClearWindow();
                        HWindowID.SetDraw("fill");
                        HWindowID.DispObj(halcon.Image[i_image]);
                        HWindowID.SetColor("red");
                        HWindowID.SetLineWidth(1);
                        HWindowID.DispCross(row, col, width, 0);
                        if (FShape == "Circle")
                        {
                            HWindowID.DispObj(ho_RCircle0);
                        }
                        else if (FShape == "Square")
                        {
                            HWindowID.SetDraw("margin");
                            HWindowID.DispObj(ho_ResultContours);
                        }
                        HWindowID.DispObj(ho_GlueOutFillup);
                        HWindowID.SetColor("green");
                        HWindowID.DispObj(centerRCircleOI);
                        HWindowID.SetColor("cyan");
                        HWindowID.DispObj(ho_RCircle);
                        HWindowID.SetDraw("margin");
                        HWindowID.SetColor("green");
                        HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR);
                        if (rmin > CoatRmin & rmin < CoatRmax & diam_min > dmin & diam_min < dmax)
                        {
                            #region PASS（coat）
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                            disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "red", "false");
                            disp_message(HWindowID, "D:" + Math.Round(rmin, 3) + "mm", "", 1650, 150, "cyan", "false");
                            disp_message(HWindowID, "Diam_Min:" + Math.Round(diam_min, 3) + "mm", "", 1750, 150, "cyan", "false");
                            disp_message(HWindowID, "NG(AVI)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                            CoatResult = "PASS";
                        }
                        else
                        {
                            #region NG
                            set_display_font(HWindowID, 18, "sans", "true", "false");
                            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                            disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "red", "false");
                            disp_message(HWindowID, "D:" + rmin + "mm", "", 1650, 150, "red", "false");
                            disp_message(HWindowID, "Diam_Min:" + diam_min + "mm", "", 1750, 150, "red", "false");
                            disp_message(HWindowID, "NG(coat&AVI)", "", 150, 2000, "red", "false");
                            string TESTtime = DateTime.Now.ToString("HHmmss");
                            FrmMain.afterDT = System.DateTime.Now;
                            string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                            string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                            string Anglenum = "00000000";
                            WriteToPlc.CMDOKNG[i_image] = "0002";
                            WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                            WriteToPlc.CMDsend[i_image] = true;
                            if (saveOPic)
                                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                            if (saveRPic)
                                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                            #endregion
                            CoatResult = "NG";
                        }
                    }
                    catch
                    {
                        #region NG
                        double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                        double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                        ho_RCircle0.Dispose();
                        HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                        HWindowID.ClearWindow();
                        HWindowID.DispObj(halcon.Image[i_image]);
                        HWindowID.SetColor("red");
                        HWindowID.SetLineWidth(1);
                        HWindowID.DispCross(row, col, width, 0);
                        if (FShape == "Circle")
                        {
                            HWindowID.DispObj(ho_RCircle0);
                        }
                        else if (FShape == "Square")
                        {
                            HWindowID.SetDraw("margin");
                            HWindowID.DispObj(ho_ResultContours);
                        }
                        HWindowID.DispObj(ho_GlueOutFillup);
                        HWindowID.SetColor("green");
                        HWindowID.DispObj(centerRCircleOI);
                        HWindowID.SetDraw("margin");
                        HWindowID.SetColor("green");
                        HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR);
                        set_display_font(HWindowID, 18, "sans", "true", "false");
                        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                        disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "red", "false");
                        disp_message(HWindowID, "D:" + rmin + "mm", "", 1800, 150, "red", "false");
                        disp_message(HWindowID, "Diam_Min:" + diam_min + "mm", "", 1750, 150, "red", "false");
                        disp_message(HWindowID, "NG(coat&AVI)", "", 150, 2000, "red", "false");
                        string TESTtime = DateTime.Now.ToString("HHmmss");
                        FrmMain.afterDT = System.DateTime.Now;
                        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                        string Anglenum = "00000000";
                        WriteToPlc.CMDOKNG[i_image] = "0002";
                        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                        WriteToPlc.CMDsend[i_image] = true;
                        if (saveOPic)
                            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                        if (saveRPic)
                            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                        #endregion
                    }
                    centerRCircleOI.Dispose();
                    Sys.CoatResult = CoatResult;
                    Sys.rmin = rmin;
                    Sys.diam_min = diam_min;
                    //CoatLogger(CoatResult, rmin, CoatRmin, diam_min,"_CoatLog.txt");
                    #endregion
                }
                else
                {
                    if (Glue.Cir2AVIchecked)  //溢胶检测圆2未开启
                    {
                        #region  溢胶圆2
                        hv_GlueOutCheckR2 = (txtOutR2 - FrmVisionSet.txtOutP) * hv_GlueOutAimR / txtAimR;
                        PCCD2.ppxm = Math.Round(txtAimR / (double)hv_GlueOutAimR / 2, 10);
                        PCCD2.ppxm = 1;
                        ho_GlueOutCir1.Dispose();
                        HOperatorSet.GenCircle(out ho_GlueOutCir1, GoutRow, GoutCol, hv_GlueOutCheckR2);
                        ho_GlueOutCir2.Dispose();
                        HOperatorSet.GenCircle(out ho_GlueOutCir2, GoutRow, GoutCol, hv_GlueOutCheckR2 + hv_goWidth);
                        ho_GlueOutDiff.Dispose();
                        HOperatorSet.Difference(ho_GlueOutCir2, ho_GlueOutCir1, out ho_GlueOutDiff);
                        ho_GlueOutReduced.Dispose();
                        HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_GlueOutDiff, out ho_GlueOutReduced);
                        ho_GlueOutRegion.Dispose();
                        HOperatorSet.Threshold(ho_GlueOutReduced, out ho_GlueOutRegion, hv_GlueOutgray, 255);
                        ho_GlueOutFillup2.Dispose();
                        HOperatorSet.FillUp(ho_GlueOutRegion, out ho_GlueOutFillup2);
                        HOperatorSet.AreaCenter(ho_GlueOutFillup2, out hv_GlueOutArea, out hv_GlueOutRow, out hv_GlueOutCol);
                        hv_GlueOutArea = hv_GlueOutArea * PCCD2.ppxm * PCCD2.ppxm;
                        Glue.GlueOutArea2 = Math.Round((double)hv_GlueOutArea);
                        #endregion
                        if (Glue.GlueOutArea2 < Glue.GlueOutAreaMax)
                            Glue.GlueOutResult = "NG1";
                        else
                            Glue.GlueOutResult = "NG2";
                    }
                    #region NG
                    HWindowID.ClearWindow();
                    HWindowID.DispObj(halcon.Image[i_image]);
                    HWindowID.SetDraw("margin");
                    HWindowID.SetColor("green");
                    HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR);
                    HWindowID.SetColor("cyan");
                    if (Glue.Cir2AVIchecked)
                        HWindowID.DispCircle(hv_RowCenter, hv_ColCenter, hv_GlueOutCheckR2);
                    HWindowID.SetColor("red");
                    HWindowID.DispCross(row, col, width, 0);
                    HWindowID.SetDraw("fill");
                    if (FShape == "Circle")
                    {
                        HWindowID.DispObj(ho_RCircle0);
                    }
                    else if (FShape == "Square")
                    {
                        HWindowID.SetDraw("margin");
                        HWindowID.DispObj(ho_ResultContours);
                    }
                    HWindowID.DispObj(ho_GlueOutFillup);
                    HWindowID.SetDraw("margin");
                    HWindowID.SetColor("blue");
                    HWindowID.SetLineWidth(1);
                    HWindowID.DispObj(ho_RCircle);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                    double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 100, 150, "green", "false");
                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 200, 150, "green", "false");
                    disp_message(HWindowID, "GlueOutArea:" + Glue.GlueOutArea, "", 300, 150, "red", "false");
                    disp_message(HWindowID, Glue.GlueOutResult, "", 150, 2000, "red", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                    string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0002";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                    #endregion
                }
            }
            ho_GlueOutCir1.Dispose();
            ho_GlueOutCir2.Dispose();
            ho_GlueOutDiff.Dispose();
            ho_GlueOutReduced.Dispose();
            ho_GlueOutRegion.Dispose();
            ho_GlueOutFillup.Dispose();
            centerRCircleOI.Dispose();
            ho_RCircle.Dispose();
            ho_RCircle0.Dispose();
        }
        
        void CoatView(string CCDName, HWindow HWindowID, int i_image, HTuple CoatRow, HTuple CoatCol, HTuple centerRadius) //涂墨外观检
        {
            ImagePath = Sys.ReportImage + "\\" + FrmMain.mtime + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            centerRCircleCOAT.Dispose();
            HOperatorSet.GenCircleContourXld(out centerRCircleCOAT, hv_RowCenter, hv_ColCenter, centerRadius, 0, 6.28318, "positive", 1);
            HLenspix = Math.Round(HLensAimR / (double)centerRadius / 2, 10);
            try
            {
                #region chuli
                HOperatorSet.CreateMetrologyModel(out hv_CoatMetrologyHandle);
                HOperatorSet.SetMetrologyModelImageSize(hv_CoatMetrologyHandle, width, height);
                HOperatorSet.AddMetrologyObjectGeneric(hv_CoatMetrologyHandle, "circle", ((CoatRow.TupleConcat(CoatCol))).TupleConcat(hv_HHoleRRadius),
                    25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_transition", hv_HHoletrans);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_select", "last");
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length1", hv_HHoleRWidth);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length2", 3);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_threshold", hv_HHolegray);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "min_score", 0.2);
                //应用测量
                HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_CoatMetrologyHandle);
                //获取结果
                HOperatorSet.GetMetrologyObjectResult(hv_CoatMetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                ho_HoleCircle.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_HoleCircle, hv_CoatMetrologyHandle, "all", "all", 1.5);
                Hhx = (hv_circleParameter.TupleSelect(1) - col) * HLenspix;
                Hhy = -(hv_circleParameter.TupleSelect(0) - row) * HLenspix;
                HOperatorSet.ClearMetrologyModel(hv_CoatMetrologyHandle);

                HOperatorSet.CreateMetrologyModel(out hv_CoatMetrologyHandle);
                HOperatorSet.SetMetrologyModelImageSize(hv_CoatMetrologyHandle, width, height);
                HOperatorSet.AddMetrologyObjectGeneric(hv_CoatMetrologyHandle, "circle", ((CoatRow.TupleConcat(CoatCol))).TupleConcat(hv_HCoatRRadius),
                    25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_transition", hv_HCoattrans);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_select", "last");
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length1", hv_HCoatRWidth);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_length2", 3);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "measure_threshold", hv_HCoatgray);
                HOperatorSet.SetMetrologyObjectParam(hv_CoatMetrologyHandle, hv_circleIndices, "min_score", 0.2);
                //应用测量
                HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_CoatMetrologyHandle);
                //获取结果
                HOperatorSet.GetMetrologyObjectResult(hv_CoatMetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
                ho_RCircle.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_CoatMetrologyHandle, "all", "all", 1.5);
                ho_RCircle0.Dispose();
                HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                Hcx = (hv_circleParameter.TupleSelect(1) - col) * HLenspix;
                Hcy = -(hv_circleParameter.TupleSelect(0) - row) * HLenspix;
                Hrmin = Math.Round((double)hv_circleParameter.TupleSelect(2) * HLenspix * 2, 3) - HCoatOffset;
                HOperatorSet.ClearMetrologyModel(hv_CoatMetrologyHandle);
                #endregion
                double xnum = (hv_ColCenter - col) * HLenspix;
                double ynum = (-(hv_RowCenter - row)) * HLenspix;
                HOperatorSet.DistancePp((HTuple)Hhx, (HTuple)Hhy, (HTuple)Hcx, (HTuple)Hcy, out Hdishc);
                Hdiam_min = Math.Round(Hrmin - 2 * (double)Hdishc, 3);
                if (Hdiam_min <= Sys.NumBase2)
                {
                    Hrmin = Hrmin + Sys.NumAdd2;
                    Hdiam_min = Math.Round(Hrmin - 2 * (double)Hdishc, 3);
                }
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                HWindowID.SetColor("red");
                HWindowID.SetLineWidth(1);
                HWindowID.DispCross(row, col, width, 0);
                if (FShape == "Circle")
                {
                    HWindowID.DispObj(ho_RCircle0);
                }
                else if (FShape == "Square")
                {
                    HWindowID.SetDraw("margin");
                    HWindowID.DispObj(ho_ResultContours);
                }
                HWindowID.SetColor("green");
                HWindowID.DispObj(centerRCircleCOAT);
                if (Hrmin > HCoatRmin & Hrmin < HCoatRmax & Hdiam_min > Hdmin & Hdiam_min < Hdmax)
                {
                    #region PASS
                    HWindowID.DispObj(ho_HoleCircle);
                    HWindowID.SetColor("cyan");
                    HWindowID.DispObj(ho_RCircle);
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                    disp_message(HWindowID, "D:" + Math.Round(Hrmin, 3) + "mm", "", 1650, 150, "cyan", "false");
                    disp_message(HWindowID, "Diam_Min:" + Math.Round(Hdiam_min, 3) + "mm", "", 1800, 150, "cyan", "false");
                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                    string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0001";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                  + "\\PASS\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                  + "\\PASS\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                    #endregion
                    HCoatResult = "PASS";
                }
                else
                {
                    #region NG
                    set_display_font(HWindowID, 18, "sans", "true", "false");
                    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                    disp_message(HWindowID, "D:" + Hrmin + "mm", "", 1650, 150, "red", "false");
                    disp_message(HWindowID, "Diam_Min:" + Hdiam_min + "mm", "", 1800, 150, "red", "false");
                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                    string TESTtime = DateTime.Now.ToString("HHmmss");
                    FrmMain.afterDT = System.DateTime.Now;
                    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                    string Anglenum = "00000000";
                    WriteToPlc.CMDOKNG[i_image] = "0002";
                    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                    WriteToPlc.CMDsend[i_image] = true;
                    if (saveOPic)
                        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                                  + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                    if (saveRPic)
                        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                                  + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                    #endregion
                    HCoatResult = "NG";
                }
            }
            catch
            {
                #region NG
                double xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
                double ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
                ho_RCircle0.Dispose();
                HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                HWindowID.SetColor("red");
                HWindowID.SetLineWidth(1);
                HWindowID.DispCross(row, col, width, 0);
                if (FShape == "Circle")
                {
                    HWindowID.DispObj(ho_RCircle0);
                }
                else if (FShape == "Square")
                {
                    HWindowID.SetDraw("margin");
                    HWindowID.DispObj(ho_ResultContours);
                }
                HWindowID.SetColor("green");
                HWindowID.DispObj(centerRCircleCOAT);
                set_display_font(HWindowID, 18, "sans", "true", "false");
                disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
                disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
                disp_message(HWindowID, "D:" + rmin + "mm", "", 1800, 150, "red", "false");
                disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                string TESTtime = DateTime.Now.ToString("HHmmss");
                FrmMain.afterDT = System.DateTime.Now;
                string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
                string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
                string Anglenum = "00000000";
                WriteToPlc.CMDOKNG[i_image] = "0002";
                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                WriteToPlc.CMDsend[i_image] = true;
                if (saveOPic)
                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath
                                                                   + "\\NG\\OriginalImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                if (saveRPic)
                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath
                                                              + "\\NG\\ResultImage\\" + FrmMain.t3x.ToString() + "a" + FrmMain.t3y.ToString());
                #endregion
            }
            FrmMain.strRlt[FrmMain.t3x, FrmMain.t3y] = HCoatResult;
            FrmMain.strD1[FrmMain.t3x, FrmMain.t3y] = Hrmin.ToString();
            FrmMain.strDmin[FrmMain.t3x, FrmMain.t3y] = Hdiam_min.ToString();
            iniFile.Write("DResult", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strRlt[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
            iniFile.Write("DValue", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strD1[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
            iniFile.Write("DminValue", FrmMain.t3x.ToString() + "_" + FrmMain.t3y.ToString(), FrmMain.strDmin[FrmMain.t3x, FrmMain.t3y], Sys.IniPath + "\\Data.ini");
            FrmMain.t3x = 0; FrmMain.t3y = 0;
            //CoatLogger(HCoatResult, Hrmin, HCoatRmin, Hdiam_min, "_LensCoatLog.txt");
            centerRCircleCOAT.Dispose();
            ho_RCircle.Dispose();
            ho_RCircle0.Dispose();
        }
        void DisView(string CCDName, HWindow HWindowID, int i_image)
        {
            #region 找Lens圆心
            ReadAssPara("PCCD1");
            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
            HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
            HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle, "circle", ((RingCrow.TupleConcat(
                RingCcolumn))).TupleConcat(hv_P1lensRRadius), 25, 5, 1, 30, new HTuple(), new HTuple(), out hv_circleIndices);
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_transition", hv_P1transition);
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_select", "last");
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length1", hv_P1LensWidth);
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_length2", 3);
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "measure_threshold", hv_P1Threshold);
            HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle, hv_circleIndices, "min_score", 0.2);
            //应用测量
            HOperatorSet.ApplyMetrologyModel(ho_ImageRun, hv_MetrologyHandle);
            //获取结果
            HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_circleIndices, "all", "result_type", "all_param", out hv_circleParameter);
            ho_RCircle.Dispose();
            HOperatorSet.GetMetrologyObjectResultContour(out ho_RCircle, hv_MetrologyHandle, "all", "all", 1.5);
            Thread.Sleep(5);
            hv_RowCenter = hv_circleParameter.TupleSelect(0);
            hv_ColCenter = hv_circleParameter.TupleSelect(1);
            hv_Radius = hv_circleParameter.TupleSelect(2);
            hv_LensRow = hv_RowCenter;
            hv_LensCol = hv_ColCenter;
            hv_LensRadius = hv_Radius;
            HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
            ho_RCircle0.Dispose();
            HOperatorSet.GenCircle(out ho_RCircle0, hv_RowCenter, hv_ColCenter, 8);
            #endregion
            #region 找圆心结果NG
            double xnum = 0.0, ynum = 0.0, rnum = 0.0, Rnum = 0.0;
            if (hv_RowCenter.D == 0.0 || !(hv_Radius.D > hv_P1LensRmin & hv_Radius.D < hv_P1LensRmax))
            {
                #region NG
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                HWindowID.SetColor("red");
                HWindowID.SetLineWidth(1);
                HWindowID.DispCross(row, col, width, 0);
                HWindowID.SetColor("green");
                HWindowID.DispObj(ho_RCircle);
                HWindowID.SetColor("red");
                if (FShape == "Circle")
                {
                    HWindowID.DispObj(ho_RCircle0);
                }
                else if (FShape == "Square")
                {
                    HWindowID.SetDraw("margin");
                    HWindowID.DispObj(ho_ResultContours);
                }
                if (hv_RowCenter.D != 0.0)
                {
                    xnum = Math.Round((double)(hv_ColCenter - col) * FrmVisionSet.xpm, 3);
                    ynum = Math.Round((double)(-(hv_RowCenter - row)) * FrmVisionSet.ypm, 3);
                    rnum = Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3);
                    Rnum = Math.Round((double)hv_Radius, 2);
                }
                set_display_font(HWindowID, 18, "sans", "true", "false");
                disp_message(HWindowID, "X:" + xnum + "mm", "", 150, 150, "red", "false");
                disp_message(HWindowID, "Y:" + ynum + "mm", "", 300, 150, "red", "false");
                disp_message(HWindowID, "R:" + rnum + "mm(" + Rnum + ")", "", 600, 150, "red", "false");
                disp_message(HWindowID, "NG(r)", "", 150, 2000, "red", "false");
                string TESTtime = DateTime.Now.ToString("HHmmss");
                FrmMain.afterDT = System.DateTime.Now;
                string Xnum = FrmVisionSet.NToHString((int)(xnum * 1000));
                string Ynum = FrmVisionSet.NToHString((int)(ynum * 1000));
                string Anglenum = "00000000";
                WriteToPlc.CMDOKNG[i_image] = "0002";
                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                WriteToPlc.CMDsend[i_image] = true;
                if (saveOPic)
                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
                if (saveRPic)
                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
                #endregion
            }
            else
            {
                double dx = ((double)hv_LensCol - (double)hv_HoldCol) * FrmVisionSet.xpm;
                double dy = ((double)hv_LensRow - (double)hv_HoldRow) * FrmVisionSet.xpm;
                double dis = Math.Sqrt(dx * dx + dy * dy);
                Sys.AssDisX = Math.Round(dx, 4).ToString();
                Sys.AssDisY = Math.Round(dy, 4).ToString();
                Sys.AssDis = Math.Round(dis, 4).ToString();
                HWindowID.ClearWindow();
                HWindowID.DispObj(halcon.Image[i_image]);
                HWindowID.SetColor("green");
                HOperatorSet.GenCircleContourXld(out ho_P1LensC, hv_LensRow, hv_LensCol, hv_LensRadius, 0, 6.28318, "positive", 1);
                HWindowID.DispObj(ho_P1LensC);
                HOperatorSet.GenCircle(out ho_P1LensC0, hv_LensRow, hv_LensCol, 8);
                HWindowID.DispObj(ho_P1LensC0);
                HWindowID.SetColor("red");
                HOperatorSet.GenCircleContourXld(out ho_P1HoldC, hv_HoldRow, hv_HoldCol, hv_HoldRadius, 0, 6.28318, "positive", 1);
                HWindowID.DispObj(ho_P1HoldC);
                HOperatorSet.GenCircle(out ho_P1HoldC0, hv_HoldRow, hv_HoldCol, 8);
                HWindowID.DispObj(ho_P1HoldC0);
                disp_message(HWindowID, "DisX:" + Math.Round(dx, 4) + "mm", "", 150, 150, "green", "false");
                disp_message(HWindowID, "DisY:" + Math.Round(dy, 4) + "mm", "", 300, 150, "green", "false");
                disp_message(HWindowID, "Dis:" + Math.Round(dis, 4) + "mm", "", 450, 150, "green", "false");
                if (Math.Round(dx, 4) < AssDisXmaxSet & Math.Round(dy, 4) < AssDisYmaxSet & Math.Round(dis, 4) < AssDismaxSet)
                {
                    WriteToPlc.CMDOKNG[4] = "0001";
                    Sys.P1Result = "PASS";
                    disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
                }
                else
                {
                    WriteToPlc.CMDOKNG[4] = "0002";
                    Sys.P1Result = "NG";
                    disp_message(HWindowID, "NG", "", 150, 2000, "red", "false");
                }
                string TESTtime = DateTime.Now.ToString("HHmmss");
                FrmMain.afterDT = System.DateTime.Now;
                string Xnum = "00000000", Ynum = "00000000", Anglenum = "00000000";
                WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
                WriteToPlc.CMDsend[i_image] = true;
                if (saveOPic)
                    HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\" + Sys.P1Result + "\\OriginalImage\\Dis" + TESTtime);
                if (saveRPic)
                    HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\" + Sys.P1Result + "\\ResultImage\\Dis" + TESTtime);
            }
            #endregion
        }
        HTuple hv_ResultRow = new HTuple(), hv_ResultColumn = new HTuple();
        HTuple hv_TotalAngle = new HTuple(), hv_TotalAnglePF = new HTuple();
        HTuple hv_TotalAngle_2 = new HTuple(), hv_TotalAnglePF_2 = new HTuple();
        HObject ho_Circle1 = new HObject(), ho_Circle2 = new HObject();
        HObject ho_ImageReduced = new HObject(), ho_Edges = new HObject();
        HObject ho_RegionClosing = new HObject(), ho_SelectedRegions = new HObject();
        HObject ho_RegionUnion = new HObject(), ho_RegionIntersection = new HObject();
        HObject ho_AllRegionXLD = new HObject(), ho_SelectRegion = new HObject(), ho_IgnoreRegion = new HObject();
        HObject ho_PolarTransImagePF = new HObject(), ho_ImageMeanPF1 = new HObject(), ho_ImageMeanPF2 = new HObject();
        HObject ho_RegionDynThreshPF1 = new HObject(), ho_RegionDynThreshPF2 = new HObject(), ho_RegionUnionPF1 = new HObject();
        HObject ho_RegionUnionPF2 = new HObject(), ho_RegionUnionPF = new HObject();
        HObject ho_AllRegionXLDPF = new HObject(), ho_SelectRegionPF = new HObject(), ho_IgnoreRegionPF = new HObject();
        string VisionResult;
        public void ImagePro(string CCDName, HWindow Window, int i_image, double Grow, double Gcol)
        {
            try
            {
                hv_ResultRow = Grow;
                hv_ResultColumn = Gcol;
                //設定初始值為會過關
                hv_TotalAngle = 360; hv_TotalAnglePF = 360;
                #region 固定环膠角度
                if (QCCD.AVI1IsCheck)
                {
                    //畫出固定環區域
                    ho_Circle1.Dispose();
                    HOperatorSet.GenCircle(out ho_Circle1, hv_ResultRow, hv_ResultColumn, QCCD.dInRange);
                    ho_Circle2.Dispose();
                    HOperatorSet.GenCircle(out ho_Circle2, hv_ResultRow, hv_ResultColumn, QCCD.dOutRange);
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_Circle2, ho_Circle1, out ho_RegionDifference);
                    HOperatorSet.SetDraw(Window, "margin");
                    //分割出固定環
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_RegionDifference, out ho_ImageReduced);
                    HOperatorSet.SetDraw(Window, "fill");
                    //灰度設定
                    ho_Edges.Dispose();
                    if (QCCD.Detection_Black && QCCD.Detection_White)
                    {
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_Edges, (new HTuple(0)).TupleConcat(QCCD.dGraythresholdWhite),
                                               ((HTuple)QCCD.dGraythresholdBlack).TupleConcat(255));
                    }
                    else if (QCCD.Detection_Black && !QCCD.Detection_White)
                    {
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_Edges, 0, QCCD.dGraythresholdBlack);
                    }
                    else if (!QCCD.Detection_Black && QCCD.Detection_White)
                    {
                        HOperatorSet.Threshold(ho_ImageReduced, out ho_Edges, QCCD.dGraythresholdWhite, 255);
                    }
                    else
                    {
                        MessageBox.Show("黑白至少要檢測一項");
                        return;
                    }
                    //填滿縫隙
                    ho_RegionFillUp.Dispose();
                    HOperatorSet.FillUp(ho_Edges, out ho_RegionFillUp);
                    //將相鄰的面積相連
                    ho_RegionClosing.Dispose();
                    HOperatorSet.ClosingCircle(ho_RegionFillUp, out ho_RegionClosing, 3.5);
                    //分割
                    ho_ConnectedRegions.Dispose();
                    HOperatorSet.Connection(ho_RegionClosing, out ho_ConnectedRegions);
                    //開放設置去掉過小面積
                    ho_SelectedRegions.Dispose();
                    HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", "and", QCCD.dUnderSizeArea, 99999999);
                    ho_RegionUnion.Dispose();
                    HOperatorSet.Union1(ho_SelectedRegions, out ho_RegionUnion);
                    ho_RegionIntersection.Dispose();
                    HOperatorSet.Intersection(ho_RegionUnion, ho_RegionDifference, out ho_RegionIntersection);
                    ho_AllRegionXLD.Dispose();
                    ho_SelectRegion.Dispose();
                    ho_IgnoreRegion.Dispose();
                    find_ring_angle(ho_RegionIntersection, out ho_AllRegionXLD, out ho_SelectRegion,
                        out ho_IgnoreRegion, hv_ResultRow, hv_ResultColumn, QCCD.dOutRange,
                        QCCD.dInRange, QCCD.iGlueAngleSet, 0, 360, QCCD.iGlueRatioSet, out hv_TotalAngle);
                }
                #endregion
                #region 小台階膠水識別
                if (QCCD.AVI2IsCheck)
                {
                    ho_Circle1.Dispose();
                    HOperatorSet.GenCircle(out ho_Circle1, hv_ResultRow, hv_ResultColumn, QCCD.dInRangePF);
                    ho_Circle2.Dispose();
                    HOperatorSet.GenCircle(out ho_Circle2, hv_ResultRow, hv_ResultColumn, QCCD.dOutRangePF);
                    ho_RegionDifference.Dispose();
                    HOperatorSet.Difference(ho_Circle2, ho_Circle1, out ho_RegionDifference);
                    HOperatorSet.SetDraw(Window, "margin");
                    //分割出固定環
                    ho_ImageReduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_RegionDifference, out ho_ImageReduced);
                    //dev_set_draw ('fill')
                    ho_PolarTransImagePF.Dispose();
                    HOperatorSet.PolarTransImageExt(ho_ImageReduced, out ho_PolarTransImagePF, hv_ResultRow, hv_ResultColumn, 0, 6.28319, QCCD.dInRangePF, QCCD.dOutRangePF,
                        (QCCD.dOutRangePF + QCCD.dInRangePF) * Math.PI, QCCD.dOutRangePF - QCCD.dInRangePF, "nearest_neighbor");

                    HTuple hv_MeanWidth_1 = 1;
                    HTuple hv_MeanHeight_1 = 1;
                    HTuple hv_MeanWidth_2 = 1;
                    HTuple hv_MeanHeight_2 = QCCD.dOutRangePF - QCCD.dInRangePF;

                    ho_ImageMeanPF1.Dispose();
                    HOperatorSet.MeanImage(ho_PolarTransImagePF, out ho_ImageMeanPF1, hv_MeanWidth_1, hv_MeanHeight_1);
                    ho_ImageMeanPF2.Dispose();
                    HOperatorSet.MeanImage(ho_PolarTransImagePF, out ho_ImageMeanPF2, hv_MeanWidth_2, hv_MeanHeight_2);
                    if (QCCD.DetectionPF_Light2 && QCCD.DetectionPF_Dark2)
                    {
                        ho_RegionDynThreshPF2.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMeanPF1, ho_ImageMeanPF2, out ho_RegionDynThreshPF2, QCCD.iDynthresholdLightPF2, "light");
                        ho_RegionDynThreshPF1.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMeanPF1, ho_ImageMeanPF2, out ho_RegionDynThreshPF1, QCCD.iDynthresholdDarkPF2, "dark");
                        ho_RegionUnionPF1.Dispose();
                        HOperatorSet.Union2(ho_RegionDynThreshPF1, ho_RegionDynThreshPF2, out ho_RegionUnionPF1);
                    }
                    else if (QCCD.DetectionPF_Dark2)
                    {
                        ho_RegionUnionPF1.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMeanPF1, ho_ImageMeanPF2, out ho_RegionUnionPF1, QCCD.iDynthresholdDarkPF2, "dark");
                    }
                    else if (QCCD.DetectionPF_Light2)
                    {
                        ho_RegionUnionPF1.Dispose();
                        HOperatorSet.DynThreshold(ho_ImageMeanPF1, ho_ImageMeanPF2, out ho_RegionUnionPF1, QCCD.iDynthresholdLightPF2, "light");
                    }

                    if (QCCD.DetectionPF_Black && QCCD.DetectionPF_White)
                    {
                        ho_RegionUnionPF2.Dispose();
                        HOperatorSet.Threshold(ho_PolarTransImagePF, out ho_RegionUnionPF2, (new HTuple(0)).TupleConcat(QCCD.iGraythresholdWhitePF2),
                                              ((HTuple)QCCD.iGraythresholdBlackPF2).TupleConcat(255));
                    }
                    else if (QCCD.DetectionPF_Black)
                    {
                        ho_RegionUnionPF2.Dispose();
                        HOperatorSet.Threshold(ho_PolarTransImagePF, out ho_RegionUnionPF2, 0, QCCD.iGraythresholdBlackPF2);
                    }
                    else if (QCCD.DetectionPF_White)
                    {
                        ho_RegionUnionPF2.Dispose();
                        HOperatorSet.Threshold(ho_PolarTransImagePF, out ho_RegionUnionPF2, QCCD.iGraythresholdWhitePF2, 255);
                    }
                    ho_RegionDynThreshPF2.Dispose();
                    if ((QCCD.DetectionPF_Light2 || QCCD.DetectionPF_Dark2) && (QCCD.DetectionPF_White || QCCD.DetectionPF_Black))
                        HOperatorSet.Intersection(ho_RegionUnionPF1, ho_RegionUnionPF2, out ho_RegionDynThreshPF2);
                    else if (!QCCD.DetectionPF_White && !QCCD.DetectionPF_Black)
                        HOperatorSet.Union1(ho_RegionUnionPF1, out ho_RegionDynThreshPF2);
                    else if (!QCCD.DetectionPF_Dark2 && !QCCD.DetectionPF_Light2)
                        HOperatorSet.Union1(ho_RegionUnionPF2, out ho_RegionDynThreshPF2);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.FillUp(ho_RegionDynThreshPF2, out ExpTmpOutVar_0);
                        ho_RegionDynThreshPF2.Dispose();
                        ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                    }
                    if (QCCD.ClosingPF2)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.ClosingRectangle1(ho_RegionDynThreshPF2, out ExpTmpOutVar_0, QCCD.iCloseWidthPF2, QCCD.iCloseHeightPF2);
                            ho_RegionDynThreshPF2.Dispose();
                            ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                        }
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.FillUp(ho_RegionDynThreshPF2, out ExpTmpOutVar_0);
                        ho_RegionDynThreshPF2.Dispose();
                        ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                    }
                    if (QCCD.OpeningPF2)
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.OpeningRectangle1(ho_RegionDynThreshPF2, out ExpTmpOutVar_0, QCCD.iOpenWidthPF2, QCCD.iOpenHeightPF2);
                            ho_RegionDynThreshPF2.Dispose();
                            ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                        }
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Connection(ho_RegionDynThreshPF2, out ExpTmpOutVar_0);
                        ho_RegionDynThreshPF2.Dispose();
                        ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                    }
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.SelectShape(ho_RegionDynThreshPF2, out ExpTmpOutVar_0, "area", "and", QCCD.iUnderSizeAreaPF2, 99999999);
                        ho_RegionDynThreshPF2.Dispose();
                        ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                    }

                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.Union1(ho_RegionDynThreshPF2, out ExpTmpOutVar_0);
                        ho_RegionDynThreshPF2.Dispose();
                        ho_RegionDynThreshPF2 = ExpTmpOutVar_0;
                    }
                    ho_RegionUnionPF.Dispose();
                    HOperatorSet.PolarTransRegionInv(ho_RegionDynThreshPF2, out ho_RegionUnionPF, hv_ResultRow, hv_ResultColumn, 0, 6.28319, QCCD.dInRangePF, QCCD.dOutRangePF,
                        (QCCD.dOutRangePF + QCCD.dInRangePF) * Math.PI, QCCD.dOutRangePF - QCCD.dInRangePF, width, height, "nearest_neighbor");
                    ho_AllRegionXLDPF.Dispose();
                    ho_SelectRegionPF.Dispose();
                    ho_IgnoreRegionPF.Dispose();
                    find_ring_angle(ho_RegionUnionPF, out ho_AllRegionXLDPF, out ho_SelectRegionPF, out ho_IgnoreRegionPF, hv_ResultRow, hv_ResultColumn, QCCD.dOutRangePF,
                        QCCD.dInRangePF, QCCD.iGlueAngleSetPF, 0, 360, QCCD.iGlueRatioSetPF, out hv_TotalAnglePF);
                }

                #endregion

                //HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                HOperatorSet.DispObj(halcon.Image[i_image], Window);
                set_display_font(Window, 20, "mono", "true", "false");
                if (QCCD.AVI1IsCheck)
                {
                    HOperatorSet.SetDraw(Window, "margin");
                    HOperatorSet.SetColor(Window, "yellow");
                    HOperatorSet.DispObj(ho_SelectRegion, Window);
                    HOperatorSet.SetColor(Window, "red");
                    HOperatorSet.DispObj(ho_IgnoreRegion, Window);
                    HOperatorSet.SetColor(Window, "red");
                    HOperatorSet.SetTposition(Window, 0, 0);
                    HOperatorSet.WriteString(Window, ("Angle:" + Math.Round((double)hv_TotalAngle)) + " 度");
                }
                //檢測小台階才顯示
                if (QCCD.AVI2IsCheck)
                {
                    HOperatorSet.SetDraw(Window, "margin");
                    HOperatorSet.SetColor(Window, "green");
                    HOperatorSet.DispObj(ho_SelectRegionPF, Window);
                    HOperatorSet.SetColor(Window, "red");
                    HOperatorSet.DispObj(ho_IgnoreRegionPF, Window);
                    HOperatorSet.SetTposition(Window, 200, 0);
                    HOperatorSet.WriteString(Window, ("AnglePF:" + Math.Round((double)hv_TotalAnglePF) + " 度"));
                }

                set_display_font(Window, 20, "mono", "true", "false");
                //看看
                if (hv_TotalAngle >= QCCD.dAngleSet & hv_TotalAnglePF >= QCCD.dAngleSetPF & hv_ResultRow > 0 & hv_ResultColumn > 0)
                {
                    VisionResult = "OK";
                    HOperatorSet.SetColor(Window, "green");
                    HOperatorSet.SetTposition(Window, 2000, 200);
                    HOperatorSet.WriteString(Window, "OK");
                }
                else
                {
                    if ((int)(new HTuple(hv_TotalAnglePF.TupleLess(QCCD.dAngleSetPF))) != 0)
                    {
                        VisionResult = "NG2";
                        HOperatorSet.SetColor(Window, "red");
                        HOperatorSet.SetTposition(Window, 2500, 200);
                        HOperatorSet.WriteString(Window, "小台階斷膠NG");
                    }
                    else if ((int)(new HTuple(hv_TotalAngle.TupleLess(QCCD.dAngleSet))) != 0)
                    {
                        VisionResult = "NG";
                        HOperatorSet.SetColor(Window, "red");
                        HOperatorSet.SetTposition(Window, 1900, 200);
                        HOperatorSet.WriteString(Window, "固定環斷膠NG");
                    }
                }
            }
            catch
            {
                VisionResult = "Miss";
                set_display_font(Window, 20, "mono", "true", "false");
                HOperatorSet.DispObj(ho_Image[i_image], Window);
                HOperatorSet.SetColor(Window, "red");
                HOperatorSet.SetTposition(Window, 2300, 200);
                HOperatorSet.WriteString(Window, "Miss");
            }
            ho_Circle1.Dispose();
            ho_Circle2.Dispose();
            ho_RegionDifference.Dispose();
            ho_ImageReduced.Dispose();
            ho_Edges.Dispose();
            ho_RegionFillUp.Dispose();
            ho_RegionClosing.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_SelectedRegions.Dispose();
            ho_RegionUnion.Dispose();
            ho_RegionIntersection.Dispose();
            ho_ImageMean1.Dispose();
            ho_ImageMean.Dispose();
            ho_RegionIntersection.Dispose();
            ho_AllRegionXLD.Dispose();
            ho_SelectRegion.Dispose();
            ho_IgnoreRegion.Dispose();
            ho_RegionUnionPF.Dispose();
            ho_AllRegionXLDPF.Dispose();
            ho_SelectRegionPF.Dispose();
            ho_IgnoreRegionPF.Dispose();
        }
        // Short Description: 計算圓環區域總角度 
        public void find_ring_angle(HObject ho_Region, out HObject ho_AllRingXLD, out HObject ho_SelectRegion,
            out HObject ho_IgnoreRegion, HTuple hv_RingRow, HTuple hv_RingColumn, HTuple hv_RingOuterDiameter,
            HTuple hv_RingInnerDiameter, HTuple hv_AngleSet, HTuple hv_StartAngle, HTuple hv_EndAngle,
            HTuple hv_RatioSet, out HTuple hv_TotalAngle)
        {
            // Stack for temporary objects 
            HObject[] OTemp = new HObject[20];

            // Local iconic variables 

            HObject ho_CircleSectorOut = null, ho_CircleSectorIn = null;
            HObject ho_CircleSector = null, ho_SectorXLD = null, ho_RegionIntersection = null;

            // Local control variables 

            HTuple hv_i = null, hv_AreaCircleSector = new HTuple();
            HTuple hv_Row = new HTuple(), hv_Column = new HTuple();
            HTuple hv_AreaSectorIntersection = new HTuple(), hv_Ratio = new HTuple();
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_AllRingXLD);
            HOperatorSet.GenEmptyObj(out ho_SelectRegion);
            HOperatorSet.GenEmptyObj(out ho_IgnoreRegion);
            HOperatorSet.GenEmptyObj(out ho_CircleSectorOut);
            HOperatorSet.GenEmptyObj(out ho_CircleSectorIn);
            HOperatorSet.GenEmptyObj(out ho_CircleSector);
            HOperatorSet.GenEmptyObj(out ho_SectorXLD);
            HOperatorSet.GenEmptyObj(out ho_RegionIntersection);
            try
            {
                ho_AllRingXLD.Dispose();
                HOperatorSet.GenEmptyObj(out ho_AllRingXLD);
                ho_SelectRegion.Dispose();
                HOperatorSet.GenEmptyObj(out ho_SelectRegion);
                ho_IgnoreRegion.Dispose();
                HOperatorSet.GenEmptyObj(out ho_IgnoreRegion);
                hv_TotalAngle = 0;
                HTuple end_val4 = hv_EndAngle - hv_AngleSet;
                HTuple step_val4 = hv_AngleSet;
                for (hv_i = hv_StartAngle; hv_i.Continue(end_val4, step_val4); hv_i = hv_i.TupleAdd(step_val4))
                {
                    ho_CircleSectorOut.Dispose();
                    HOperatorSet.GenCircleSector(out ho_CircleSectorOut, hv_RingRow, hv_RingColumn,
                        hv_RingOuterDiameter, hv_i.TupleRad(), ((hv_i + hv_AngleSet)).TupleRad()
                        );
                    ho_CircleSectorIn.Dispose();
                    HOperatorSet.GenCircleSector(out ho_CircleSectorIn, hv_RingRow, hv_RingColumn,
                        hv_RingInnerDiameter, hv_i.TupleRad(), ((hv_i + hv_AngleSet)).TupleRad()
                        );
                    ho_CircleSector.Dispose();
                    HOperatorSet.Difference(ho_CircleSectorOut, ho_CircleSectorIn, out ho_CircleSector
                        );
                    //把每個區域填到數組中
                    ho_SectorXLD.Dispose();
                    HOperatorSet.GenContourRegionXld(ho_CircleSector, out ho_SectorXLD, "border");
                    HOperatorSet.AreaCenter(ho_CircleSector, out hv_AreaCircleSector, out hv_Row,
                        out hv_Column);
                    {
                        HObject ExpTmpOutVar_0;
                        HOperatorSet.ConcatObj(ho_SectorXLD, ho_AllRingXLD, out ExpTmpOutVar_0);
                        ho_AllRingXLD.Dispose();
                        ho_AllRingXLD = ExpTmpOutVar_0;
                    }
                    //求出膠和圓弧的交集
                    ho_RegionIntersection.Dispose();
                    HOperatorSet.Intersection(ho_CircleSector, ho_Region, out ho_RegionIntersection
                        );
                    HOperatorSet.AreaCenter(ho_RegionIntersection, out hv_AreaSectorIntersection,
                        out hv_Row, out hv_Column);
                    //算出交集比率>多少以上就算有膠
                    hv_Ratio = (hv_AreaSectorIntersection * 100) / hv_AreaCircleSector;
                    if ((int)(new HTuple(hv_Ratio.TupleGreater(hv_RatioSet))) != 0)
                    {
                        hv_TotalAngle = hv_TotalAngle + hv_AngleSet;
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_SelectRegion, ho_RegionIntersection, out ExpTmpOutVar_0
                                );
                            ho_SelectRegion.Dispose();
                            ho_SelectRegion = ExpTmpOutVar_0;
                        }
                    }
                    else
                    {
                        {
                            HObject ExpTmpOutVar_0;
                            HOperatorSet.Union2(ho_IgnoreRegion, ho_RegionIntersection, out ExpTmpOutVar_0
                                );
                            ho_IgnoreRegion.Dispose();
                            ho_IgnoreRegion = ExpTmpOutVar_0;
                        }
                    }

                }
                ho_CircleSectorOut.Dispose();
                ho_CircleSectorIn.Dispose();
                ho_CircleSector.Dispose();
                ho_SectorXLD.Dispose();
                ho_RegionIntersection.Dispose();

                return;
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_CircleSectorOut.Dispose();
                ho_CircleSectorIn.Dispose();
                ho_CircleSector.Dispose();
                ho_SectorXLD.Dispose();
                ho_RegionIntersection.Dispose();

                throw HDevExpDefaultException;
            }
        }

        //旋轉圖片
        public void RotateImage(HObject ho_Image_Befort, out HObject ho_Image_Befort_2, HTuple hv_Row_Befort, HTuple hv_Column_Befort, HTuple hv_ResultRow_Befort, HTuple hv_ResultColumn_Befort,
        HTuple hv_Row_After, HTuple hv_Column_After, HTuple hv_ResultRow_After, HTuple hv_ResultColumn_After, HTuple hv_Radius, HTuple hv_Length, HTuple hv_Measure_Threshold, HTuple hv_GenParamValue, out HTuple hv_ResultRow_Befort2, out HTuple hv_ResultColumn_Befort2)
        {
            HObject ho_UsedEdges_Befort = new HObject(), ho_Contour_Befort = new HObject(), ho_ResultContours_Befort = new HObject(), ho_CrossCenter_Befort = new HObject();
            ho_Image_Befort_2 = null;
            HTuple hv_ResultRadius_Befort = 0, hv_HomMat2D = new HTuple();
            hv_ResultRow_Befort2 = hv_ResultColumn_Befort2 = 0;
            try
            {
                //旋轉膠前圖
                HOperatorSet.AngleLl(hv_Row_Befort, hv_Column_Befort, hv_ResultRow_Befort, hv_ResultColumn_Befort,
                    hv_Row_After, hv_Column_After, hv_ResultRow_After, hv_ResultColumn_After,
                    out hv_Angle);
                HOperatorSet.HomMat2dIdentity(out hv_HomMat2D);
                //hom_mat2d_translate (HomMat2D, ResultColumn_After-ResultColumn_Befort, ResultRow_After-ResultRow_Befort, HomMat2D)
                HOperatorSet.HomMat2dRotate(hv_HomMat2D, hv_Angle, hv_ResultRow_Befort, hv_ResultColumn_Befort,
                    out hv_HomMat2D);
                HOperatorSet.AffineTransImage(ho_Image_Befort, out ho_Image_Befort_2, hv_HomMat2D,
                    "constant", "false");
                hv_ResultRow_Befort2 = hv_ResultRow_Befort;
                hv_ResultColumn_Befort2 = hv_ResultColumn_Befort;
                //旋轉完要重新抓圓否則圓心會偏移
                //ho_UsedEdges_Befort.Dispose(); ho_Contour_Befort.Dispose(); ho_ResultContours_Befort.Dispose(); ho_CrossCenter_Befort.Dispose();
                //gen_circle_center(ho_Image_Befort_2, out ho_UsedEdges_Befort, out ho_Contour_Befort,
                //    out ho_ResultContours_Befort, out ho_CrossCenter_Befort, hv_ResultRow_Befort, hv_ResultColumn_Befort, hv_Radius,
                //    hv_Length, hv_Measure_Threshold, hv_GenParamValue, "last", out hv_ResultRow_Befort2, out hv_ResultColumn_Befort2,
                //    out hv_ResultRadius_Befort);
            }
            catch
            {
            }
            ho_UsedEdges_Befort.Dispose();
            ho_Contour_Befort.Dispose();
            ho_ResultContours_Befort.Dispose();
            ho_CrossCenter_Befort.Dispose();
        }

        //檢測膠水
        public void GlueTest(HObject ho_Image_Befort, HObject ho_Image_After, out HObject ho_Region, HTuple hv_ResultRow_Befort,
            HTuple hv_ResultColumn_Befort, HTuple hv_ResultRow_After, HTuple hv_ResultColumn_After,
            HTuple hv_OuterRadius, HTuple hv_InnerRadius, HTuple hv_Gray)
        {
            HObject ho_XYTransImage = new HObject();
            HOperatorSet.GenEmptyObj(out ho_XYTransImage);

            ho_Region = new HObject();
            try
            {
                ho_XYTransImage.Dispose();
                polar_trans_and_mean_and_abs_diff(ho_Image_Befort, ho_Image_After, out ho_XYTransImage,
                    hv_ResultRow_Befort, hv_ResultColumn_Befort, hv_ResultRow_After, hv_ResultColumn_After,
                    hv_OuterRadius, hv_InnerRadius, 3, 5, 1);
                ho_Region.Dispose();
                HOperatorSet.Threshold(ho_XYTransImage, out ho_Region, hv_Gray, 255);
            }
            catch
            {
            }
            ho_XYTransImage.Dispose();
        }

        #region 角度辅助
        void Degline(string CCDName, HWindow HWindowID, int i_image) //Degree辅助1
        {
            string Tfilepath = Sys.IniPath + "\\" + Sys.CurrentProduction + "\\" + CCDName;
            HOperatorSet.ReadShapeModel(Tfilepath + "\\DegLineLocation.shm", out hv_DLModelID);

            HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle);
            HOperatorSet.SetMetrologyModelImageSize(hv_MetrologyHandle, width, height);
            HOperatorSet.AddMetrologyObjectLineMeasure(hv_MetrologyHandle, hv_RowIRLs, hv_ColIRLs, hv_RowIRLe, hv_ColIRLe,
                 hv_DegLWidth, 10, 1, hv_DegLth, new HTuple(), "positive", out hv_Index1);

            //HOperatorSet.SetMetrologyModelParam(hv_MetrologyHandle, "reference_system", ((hv_FRow.TupleConcat(hv_FCol))).TupleConcat(0));
            ho_FModelContours.Dispose();
            HOperatorSet.GetShapeModelContours(out ho_FModelContours, hv_DLModelID, 1);
            HOperatorSet.ReadMetrologyModel(Tfilepath + "\\DegLineTemplate.shm", out hv_MetrologyHandle);

            HOperatorSet.FindScaledShapeModel(halcon.Image[i_image], hv_DLModelID, (new HTuple(0)).TupleRad(), (new HTuple(360)).TupleRad(), 0.9, 1.1, 0.3, 1, 0.5,
                "least_squares", 0, 0.9, out hv_DLRowFound, out hv_DLColFound, out hv_DLAngleFound, out hv_DLScaleFound, out hv_DLScoreFound);
            //如果找到模板
            if ((int)(new HTuple((new HTuple(1)).TupleEqual(new HTuple(hv_DLRowFound.TupleLength())))) != 0)
            {
                HOperatorSet.HomMat2dIdentity(out hv_DLHomMat2D);
                HOperatorSet.HomMat2dScale(hv_DLHomMat2D, hv_DLScaleFound, hv_DLScaleFound, 0, 0, out hv_DLHomMat2D);
                HOperatorSet.HomMat2dRotate(hv_DLHomMat2D, hv_DLAngleFound, 0, 0, out hv_DLHomMat2D);
                HOperatorSet.HomMat2dTranslate(hv_DLHomMat2D, hv_DLRowFound - 0, hv_DLColFound - 0, out hv_DLHomMat2D);
                ho_ResultContours.Dispose();
                HOperatorSet.AffineTransContourXld(ho_FModelContours, out ho_ResultContours, hv_DLHomMat2D);

                //按照找到的模板位置，移动测量位置
                HOperatorSet.AlignMetrologyModel(hv_MetrologyHandle, hv_DLRowFound, hv_DLColFound, hv_DLAngleFound);
                //应用测量
                HOperatorSet.ApplyMetrologyModel(halcon.Image[i_image], hv_MetrologyHandle);
                //获取结果
                ho_DLRContours.Dispose();
                HOperatorSet.GetMetrologyObjectMeasures(out ho_DLRContours, hv_MetrologyHandle, "all", "all", out hv_Row, out hv_Column);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, hv_Index1, "all", "result_type", "all_param", out hv_FRectangleParameter);

                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "row_begin", out hv_RowBegin);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "column_begin", out hv_ColBegin);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "row_end", out hv_RowEnd);
                HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle, "all", "all", "result_type", "column_end", out hv_ColEnd);
                HOperatorSet.AngleLx(hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, out hv_Angle);
                hv_AngleDeg = hv_Angle.TupleDeg();
                if (hv_AngleDeg.D < 0.0)
                    hv_AngleDeg = hv_AngleDeg + 360;
                ho_DLRLines.Dispose();
                HOperatorSet.GetMetrologyObjectResultContour(out ho_DLRLines, hv_MetrologyHandle, "all", "all", 1.5);
                HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle);
                HOperatorSet.ClearShapeModel(hv_DLModelID);
            }
            else
            {
                hv_AngleDeg = 720.0;
            }
        }
        void Deg4Plus() //Degree辅助2
        {
            hv_AddDeg = hv_Deg2;
            double distance = Deg4angleDis;
            //double k1 = (hv_ColCenter - hv_g1ColumnCh) * 1.0 / (hv_RowCenter - hv_g1RowCh);// 坐标直线斜率k
            double k1 = Math.Tan(Math.PI * (hv_AddDeg + Deg4anglePlus - Deg4AngleIntersection) / 180);
            double k2 = -1.0 / k1;
            cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
            FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
            hv_P1RowCh = g2Point.X;
            hv_P1ColumnCh = g2Point.Y;
            hv_P3RowCh = g4Point.X;
            hv_P3ColumnCh = g4Point.Y;
            k1 = Math.Tan(Math.PI * (hv_AddDeg + Deg4anglePlus + Deg4AngleIntersection) / 180);
            k2 = -1.0 / k1;
            FrmVisionSet.GetPointXY(cenPoint, distance, k2, ref g2Point, ref g4Point);
            hv_P2RowCh = g2Point.X;
            hv_P2ColumnCh = g2Point.Y;
            hv_P4RowCh = g4Point.X;
            hv_P4ColumnCh = g4Point.Y;

            HOperatorSet.GenCrossContourXld(out ho_CrossP1, hv_P1RowCh, hv_P1ColumnCh, 30, 0.785398);
            HOperatorSet.GenCrossContourXld(out ho_CrossP2, hv_P2RowCh, hv_P2ColumnCh, 30, 0.785398);
            HOperatorSet.GenCrossContourXld(out ho_CrossP3, hv_P3RowCh, hv_P3ColumnCh, 30, 0.785398);
            HOperatorSet.GenCrossContourXld(out ho_CrossP4, hv_P4RowCh, hv_P4ColumnCh, 30, 0.785398);
        }
        void Deg3Region(string CCDName, HWindow HWindowID, int i_image) //Degree辅助3
        {
            try
            {
                HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
                HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
                if (!(hv_AddDeg == null || hv_AddDeg == 720.0 || hv_AddDeg.Length == 0))
                {
                    hv_AddDegPlus = hv_deg3shift;
                    hv_g1angle = (Math.PI / 180) * hv_AddDeg;
                    hv_g1length1 = hv_deg3len1;
                    hv_g1length2 = hv_deg3len2;
                    hv_grayDistance = hv_deg3dis;
                    double distance = hv_grayDistance;
                    //double k1 = (hv_ColCenter - hv_g1ColumnCh) * 1.0 / (hv_RowCenter - hv_g1RowCh);// 坐标直线斜率k
                    double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_AddDegPlus) / 180);
                    cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                    FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                    hv_g1RowCh = g2Point.X;
                    hv_g1ColumnCh = g2Point.Y;
                    hv_g2RowCh = g4Point.X;
                    hv_g2ColumnCh = g4Point.Y;

                    #region 区域1
                    ho_g1Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_g1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                    ho_g1Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                    ho_g1Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g1Region, out ho_g1Reduced);
                    ho_deg3Region1.Dispose();
                    HOperatorSet.Threshold(ho_g1Reduced, out ho_deg3Region1, hv_deg3b2w, hv_deg3w2b);
                    HOperatorSet.AreaCenter(ho_deg3Region1, out hv_deg31area, out hv_deg31row, out hv_deg31col);
                    #endregion
                    #region 区域2
                    ho_g2Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_g2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                    ho_g2Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_g1length1, hv_g1length2);
                    ho_g2Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g2Region, out ho_g2Reduced);
                    ho_deg3Region2.Dispose();
                    HOperatorSet.Threshold(ho_g2Reduced, out ho_deg3Region2, hv_deg3b2w, hv_deg3w2b);
                    HOperatorSet.AreaCenter(ho_deg3Region2, out hv_deg32area, out hv_deg32row, out hv_deg32col);
                    #endregion

                    hv_deg3row = hv_deg31row;
                    hv_deg3col = hv_deg31col;
                    if (hv_deg31area < hv_deg32area)
                    {
                        hv_deg3row = hv_deg32row;
                        hv_deg3col = hv_deg32col;
                    }
                    double SubRow, SubCol, angle;
                    SubRow = hv_deg3row - hv_RowCenter;
                    SubCol = hv_deg3col - hv_ColCenter;
                    angle = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
                    if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
                        angle = ((SubCol > 0) ? 360 - angle : 180 + angle);
                    else
                        angle = ((SubCol > 0) ? angle : 180 - angle);
                    hv_AngleDeg = angle;
                }
            }
            catch (Exception er)
            {
                MessageBox.Show(er.ToString());
            }
        }
        void Mark4(string CCDName, HWindow HWindowID, int i_image) //Degree辅助4
        {
            try
            {
                HOperatorSet.GetImageSize(halcon.ImageOri[i_image], out width, out height);
                HOperatorSet.AreaCenter(halcon.ImageOri[i_image], out area, out row, out col);
                if (!(hv_AddDeg.Length == 0 || hv_AddDeg.D == 720.0))
                {
                    #region 基础参数
                    hv_g1angle = (Math.PI / 180) * hv_AddDeg;
                    double distance = hv_markDistance;
                    //double k1 = (hv_ColCenter - hv_g1ColumnCh) * 1.0 / (hv_RowCenter - hv_g1RowCh);// 坐标直线斜率k
                    double k1 = Math.Tan(Math.PI * (hv_AddDeg + hv_markDegPlus) / 180);
                    double k2 = -1.0 / k1;
                    cenPoint.X = hv_RowCenter[0].F; cenPoint.Y = hv_ColCenter[0].F;
                    FrmVisionSet.GetPointXY(cenPoint, distance, k1, ref g2Point, ref g4Point);
                    hv_g1RowCh = g2Point.X;
                    hv_g1ColumnCh = g2Point.Y;
                    hv_g3RowCh = g4Point.X;
                    hv_g3ColumnCh = g4Point.Y;
                    FrmVisionSet.GetPointXY(cenPoint, distance, k2, ref g2Point, ref g4Point);
                    hv_g2RowCh = g2Point.X;
                    hv_g2ColumnCh = g2Point.Y;
                    hv_g4RowCh = g4Point.X;
                    hv_g4ColumnCh = g4Point.Y;
                    #endregion

                    HObject ho_g1conn = new HObject(), ho_g1sele = new HObject();
                    HObject ho_g2conn = new HObject(), ho_g2sele = new HObject();
                    HObject ho_g3conn = new HObject(), ho_g3sele = new HObject();
                    HObject ho_g4conn = new HObject(), ho_g4sele = new HObject();

                    #region 区域1
                    ho_g1Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_mark1Rectangle, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g1Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g1Region, hv_g1RowCh, hv_g1ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g1Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g1Region, out ho_g1Reduced);
                    #endregion
                    #region 区域3
                    ho_g3Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_mark3Rectangle, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g3Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g3Region, hv_g3RowCh, hv_g3ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g3Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g3Region, out ho_g3Reduced);
                    #endregion
                    #region 区域2
                    ho_g2Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_mark2Rectangle, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g2Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g2Region, hv_g2RowCh, hv_g2ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g2Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g2Region, out ho_g2Reduced);
                    #endregion
                    #region 区域4
                    ho_g4Rectangle.Dispose();
                    HOperatorSet.GenRectangle2ContourXld(out ho_mark4Rectangle, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g4Region.Dispose();
                    HOperatorSet.GenRectangle2(out ho_g4Region, hv_g4RowCh, hv_g4ColumnCh, hv_g1angle, hv_marklength1, hv_marklength2);
                    ho_g4Reduced.Dispose();
                    HOperatorSet.ReduceDomain(halcon.Image[i_image], ho_g4Region, out ho_g4Reduced);
                    #endregion

                    #region quyudianshu
                    ShowMark(ho_g1Reduced);
                    hv_MarkRow1 = hv_MarkRow; hv_MarkColumn1 = hv_MarkColumn; hv_MarkRadius1 = hv_MarkRadius;
                    hv_NumBalls1 = new HTuple(hv_MarkRadius1.TupleLength());
                    if (hv_NumBalls1 >= 1 & hv_NumBalls1 == MarkCount)
                    {
                        HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow1[0], hv_MarkColumn1[0], out hv_MarkDistancemax);
                        hv_MarkRowmax = hv_MarkRow1[0]; hv_MarkColumnmax = hv_MarkColumn1[0];
                        for (int i1 = 1; i1 < hv_NumBalls1; i1++)
                        {
                            HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow1[i1], hv_MarkColumn1[i1], out hv_MarkDistance1);
                            if (hv_MarkDistance1 > hv_MarkDistancemax)
                            {
                                hv_MarkDistancemax = hv_MarkDistance1;
                                hv_MarkRowmax = hv_MarkRow1[i1]; hv_MarkColumnmax = hv_MarkColumn1[i1];
                            }
                        }
                    }
                    ShowMark(ho_g2Reduced);
                    hv_MarkRow2 = hv_MarkRow; hv_MarkColumn2 = hv_MarkColumn; hv_MarkRadius2 = hv_MarkRadius;
                    hv_NumBalls2 = new HTuple(hv_MarkRadius2.TupleLength());
                    if (hv_NumBalls2 >= 1 & hv_NumBalls2 == MarkCount)
                    {
                        HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow2[0], hv_MarkColumn2[0], out hv_MarkDistancemax);
                        hv_MarkRowmax = hv_MarkRow2[0]; hv_MarkColumnmax = hv_MarkColumn2[0];
                        for (int i1 = 1; i1 < hv_NumBalls2; i1++)
                        {
                            HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow2[i1], hv_MarkColumn2[i1], out hv_MarkDistance2);
                            if (hv_MarkDistance2 > hv_MarkDistancemax)
                            {
                                hv_MarkDistancemax = hv_MarkDistance2;
                                hv_MarkRowmax = hv_MarkRow2[i1]; hv_MarkColumnmax = hv_MarkColumn2[i1];
                            }
                        }
                    }
                    ShowMark(ho_g3Reduced);
                    hv_MarkRow3 = hv_MarkRow; hv_MarkColumn3 = hv_MarkColumn; hv_MarkRadius3 = hv_MarkRadius;
                    hv_NumBalls3 = new HTuple(hv_MarkRadius3.TupleLength());
                    if (hv_NumBalls3 >= 1 & hv_NumBalls3 == MarkCount)
                    {
                        HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow3[0], hv_MarkColumn3[0], out hv_MarkDistancemax);
                        hv_MarkRowmax = hv_MarkRow3[0]; hv_MarkColumnmax = hv_MarkColumn3[0];
                        for (int i1 = 1; i1 < hv_NumBalls3; i1++)
                        {
                            HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow3[i1], hv_MarkColumn3[i1], out hv_MarkDistance3);
                            if (hv_MarkDistance3 > hv_MarkDistancemax)
                            {
                                hv_MarkDistancemax = hv_MarkDistance3;
                                hv_MarkRowmax = hv_MarkRow3[i1]; hv_MarkColumnmax = hv_MarkColumn3[i1];
                            }
                        }
                    }
                    ShowMark(ho_g4Reduced);
                    hv_MarkRow4 = hv_MarkRow; hv_MarkColumn4 = hv_MarkColumn; hv_MarkRadius4 = hv_MarkRadius;
                    hv_NumBalls4 = new HTuple(hv_MarkRadius4.TupleLength());
                    if (hv_NumBalls4 >= 1 & hv_NumBalls4 == MarkCount)
                    {
                        HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow4[0], hv_MarkColumn4[0], out hv_MarkDistancemax);
                        hv_MarkRowmax = hv_MarkRow4[0]; hv_MarkColumnmax = hv_MarkColumn4[0];
                        for (int i1 = 1; i1 < hv_NumBalls4; i1++)
                        {
                            HOperatorSet.DistancePp(hv_RowCenter, hv_ColCenter, hv_MarkRow4[i1], hv_MarkColumn4[i1], out hv_MarkDistance4);
                            if (hv_MarkDistance4 > hv_MarkDistancemax)
                            {
                                hv_MarkDistancemax = hv_MarkDistance4;
                                hv_MarkRowmax = hv_MarkRow4[i1]; hv_MarkColumnmax = hv_MarkColumn4[i1];
                            }
                        }
                    }
                    #endregion
                }
                hv_MarkRow = new HTuple(); hv_MarkColumn = new HTuple(); hv_MarkRadius = new HTuple();
            }
            catch
            {

            }
        }
        void ShowMark(HObject ho_DieGrey)
        {
            try
            {
                ho_Wires.Dispose();
                HOperatorSet.Threshold(ho_DieGrey, out ho_Wires, hv_markgray1, hv_markgray2);
                ho_WiresFilled.Dispose();
                HOperatorSet.FillUpShape(ho_Wires, out ho_WiresFilled, "area", 1, 100);
                ho_Balls.Dispose();
                HOperatorSet.OpeningCircle(ho_WiresFilled, out ho_Balls, MarkRMin);
                ho_SingleBalls.Dispose();
                HOperatorSet.Connection(ho_Balls, out ho_SingleBalls);
                ho_IntermediateBalls.Dispose();
                HOperatorSet.SelectShape(ho_SingleBalls, out ho_IntermediateBalls, "circularity", "and", 0.8, 1.0);
                ho_FinalBalls.Dispose();
                HOperatorSet.SortRegion(ho_IntermediateBalls, out ho_FinalBalls, "first_point", "true", "column");
                HOperatorSet.SmallestCircle(ho_FinalBalls, out hv_MarkRow, out hv_MarkColumn, out hv_MarkRadius);
            }
            catch (HalconException HDevExpDefaultException)
            {
                ho_DieGrey.Dispose();
                ho_Wires.Dispose();
                ho_WiresFilled.Dispose();
                ho_Balls.Dispose();
                ho_SingleBalls.Dispose();
                ho_IntermediateBalls.Dispose();
                ho_FinalBalls.Dispose();

                throw HDevExpDefaultException;
            }
            ho_DieGrey.Dispose();
            ho_Wires.Dispose();
            ho_WiresFilled.Dispose();
            ho_Balls.Dispose();
            ho_SingleBalls.Dispose();
            ho_IntermediateBalls.Dispose();
            ho_FinalBalls.Dispose();
        }
        #endregion
        #endregion

        void TestLogger(string ID, string s1, string s2, string s3, string s4, string s5, string s6, string s7)
        {
            string path = Sys.ReportLog + "\\TestLog";
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            //File
            string file = DateTime.Now.ToString("yyyyMMdd") + "-" + Sys.MachineId + "-" + ID + "-TestLog-" + Sys.autoTestTime + ".txt";
            if (!File.Exists(path + "\\" + file))
            {
                string Header = "CreateTime\t" + "Hold-X\t" + "Lens-X\t" + "X-Diff\t" + "Hold-Y\t" + "Lens-Y\t" + "Y-Diff\t" + "XY-Dis\t\r\n";
                File.WriteAllText(path + "\\" + file, Header);
            }
            using (StreamWriter sw = new StreamWriter(path + "\\" + file, true))
            {
                sw.WriteLine(DateTime.Now.ToString("HH:mm:ss") + "\t" + s1 + "\t" + s2 + "\t" + s3 + "\t" + s4 + "\t" + s5 + "\t" + s6 + "\t" + s7 + "\t");
                sw.Flush();
                sw.Close();
                sw.Dispose();
            }
        }
        void CoatLogger(string result, double Rresult, double Rset, double diamMin, string filelastname)
        {
            string path = Sys.ReportLog + "\\CoatLog";
            if (!Directory.Exists(path))
                Directory.CreateDirectory(path);
            //File
            string file = DateTime.Now.ToString("yyyyMMdd") + "_" + Sys.MachineId + filelastname;//"_CoatLog.txt"  "_LensCoatLog.txt"
            if (!File.Exists(path + "\\" + file))
            {
                string Header = "Date\t" + "CreateTime\t" + "MachineId\t" + "ProductName\t" + "Result\t" + "DValue\t" + "DiamMin\t\r\n";
                File.WriteAllText(path + "\\" + file, Header);
            }
            using (StreamWriter sw = new StreamWriter(path + "\\" + file, true))
            {
                sw.WriteLine(DateTime.Now.ToString("yyyyMMdd") + "\t" + DateTime.Now.ToString("HH:mm:ss") + "\t" +
                             Sys.MachineId + "\t" + Sys.CurrentProduction + "\t" +
                             result + "\t" + Rresult.ToString() + "\t" + diamMin.ToString());
                sw.Flush();
                sw.Close();
                sw.Dispose();
            }
        }
        void XYLogger(string CCDName, string x, string y)
        {
            string logpathTemp = Sys.ReportLog + "\\" + DateTime.Now.ToString("yyyy-MM-dd");
            if (!Directory.Exists(logpathTemp))
                Directory.CreateDirectory(logpathTemp);
            string logxyfileTemp = DateTime.Now.ToString("yyyyMMdd") + "_" + Sys.MachineId + "_" + Sys.CurrentProduction + "_" + RiReader.Barcode + "_xy.txt";
            if (!File.Exists(logpathTemp + "\\" + logxyfileTemp))
            {
                string Header = "Date\t" + "CreateTime\t" + "CCDName\t" + "CCD-X\t" + "CCD-Y\t\r\n";
                File.WriteAllText(logpathTemp + "\\" + logxyfileTemp, Header);
            }
            try
            {
                using (StreamWriter sw = new StreamWriter(logpathTemp + "\\" + logxyfileTemp, true))
                {
                    sw.WriteLine(DateTime.Now.ToString("yyyyMMdd") + "\t" + DateTime.Now.ToString("HH:mm:ss") + "\t" + CCDName + "\t" + x + "\t" + y);
                    sw.Flush();
                    sw.Close();
                    sw.Dispose();
                }
                x = ""; y = "";
            }
            catch
            { }
        }
        public void CrossDraw(HWindow Window, HTuple Width, HTuple Height)
        {
            HOperatorSet.SetLineWidth(Window, 1);
            HOperatorSet.SetColor(Window, "red");
            HTuple Width2 = Width / 2;
            HTuple Height2 = Height / 2;
            HOperatorSet.DispLine(Window, Height2, 0, Height2, Width);
            HOperatorSet.DispLine(Window, 0, Width2, Height, Width2);
        }
        public void ImageFocus(HWindow Window, HObject Image, HTuple Width, HTuple Height)
        {
            HObject ho_HRectangle = null, ho_HImageReduced = null, ho_HImageResult = null;
            HObject ho_HImagePart00 = null, ho_HImagePart20 = null, ho_HImageSub = null;
            HTuple hv_HValue = new HTuple(), hv_HDeviation = new HTuple();

            HOperatorSet.GenEmptyObj(out ho_HRectangle);
            HOperatorSet.GenEmptyObj(out ho_HImageReduced);
            HOperatorSet.GenEmptyObj(out ho_HImageResult);
            HOperatorSet.GenEmptyObj(out ho_HImagePart00);
            HOperatorSet.GenEmptyObj(out ho_HImagePart20);
            HOperatorSet.GenEmptyObj(out ho_HImageSub);
            //Image Acquisition 01: Do something
            ho_HRectangle.Dispose();
            HOperatorSet.GenRectangle1(out ho_HRectangle, FrmMain.hv_FocusRow1, FrmMain.hv_FocusColumn1, FrmMain.hv_FocusRow2, FrmMain.hv_FocusColumn2);
            ho_HImageReduced.Dispose();
            HOperatorSet.ReduceDomain(Image, ho_HRectangle, out ho_HImageReduced);

            ho_HImagePart00.Dispose();
            HOperatorSet.CropPart(ho_HImageReduced, out ho_HImagePart00, 0, 0, Width, Height - 2);

            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConvertImageType(ho_HImagePart00, out ExpTmpOutVar_0, "real");
                ho_HImagePart00.Dispose();
                ho_HImagePart00 = ExpTmpOutVar_0;
            }

            ho_HImagePart20.Dispose();
            HOperatorSet.CropPart(ho_HImageReduced, out ho_HImagePart20, 2, 0, Width, Height - 2);

            {
                HObject ExpTmpOutVar_0;
                HOperatorSet.ConvertImageType(ho_HImagePart20, out ExpTmpOutVar_0, "real");
                ho_HImagePart20.Dispose();
                ho_HImagePart20 = ExpTmpOutVar_0;
            }

            ho_HImageSub.Dispose();
            HOperatorSet.SubImage(ho_HImagePart20, ho_HImagePart00, out ho_HImageSub, 1, 0);

            ho_HImageResult.Dispose();
            HOperatorSet.MultImage(ho_HImageSub, ho_HImageSub, out ho_HImageResult, 1, 0);

            HOperatorSet.Intensity(ho_HImageResult, ho_HImageResult, out hv_HValue, out hv_HDeviation);
            HOperatorSet.SetColor(Window, "blue");
            HOperatorSet.SetDraw(Window, "margin");
            HOperatorSet.DispObj(ho_HRectangle, Window);
            HOperatorSet.SetColor(Window, "red");
            set_display_font(Window, 30, "mono", "true", "false");
            HOperatorSet.SetTposition(Window, 100, 0);
            HOperatorSet.WriteString(Window, hv_HDeviation);
            HOperatorSet.WaitSeconds(0.01);
        }
        public void SearchRange(HTuple Window, HObject Image, out HTuple hv_HandleRow1, out HTuple hv_HandleCol1, out HTuple hv_HandleRow2, out HTuple hv_HandleCol2)
        {
            HOperatorSet.GenEmptyObj(out ho_BarImage);
            //讀取圖像
            ho_BarImage = Image;

            HTuple width, height;
            HOperatorSet.GetImageSize(ho_BarImage, out width, out height);
            HOperatorSet.SetPart(Window, 0, 0, height, width);
            disp_message(Window, "点击鼠标左键拉取范围后点击鼠标右键生成读码范围", "window", -1, -1, "black", "true");
            HOperatorSet.DrawRectangle1(Window, out hv_HandleRow1, out hv_HandleCol1, out hv_HandleRow2, out hv_HandleCol2);
            return;
        }



        #region Mode2
        #region 校正
        //if (DegLChecked)
        //{
        //    Degline(CCDName, HWindowID, i_image);
        //    double dd = Math.Abs((double)hv_AngleDeg - (double)hv_Deg2);
        //    if (dd < 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 18, 18);
        //    }
        //    if (dd > 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg - 180;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowEnd, hv_ColEnd, hv_RowBegin, hv_ColBegin, 18, 18);
        //    }
        //}
        //#endregion
        //#region 校正Mode3
        //if (Deg3RChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Deg3Region(CCDName, HWindowID, i_image);
        //    if ((double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        hv_RowCut = hv_deg3row;
        //        hv_ColumnCut = hv_deg3col;
        //    }
        //}
        //#endregion
        //#region 辅助4
        //if (MarkDegChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Mark4(CCDName, HWindowID, i_image);
        //    if (new HTuple(hv_MarkRowmax.TupleLength()) >= 1)
        //    {
        //        hv_RowCut = hv_MarkRowmax;
        //        hv_ColumnCut = hv_MarkColumnmax;
        //        SubRow = hv_MarkRowmax - hv_RowCenter;
        //        SubCol = hv_MarkColumnmax - hv_ColCenter;
        //        hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
        //        if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
        //            hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
        //        else
        //            hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
        //    }
        //    else
        //        hv_Deg2 = 720.0;
        //}
        #endregion
        #region 完整结果
        //HWindowID.ClearWindow();
        //HWindowID.DispObj(halcon.Image[i_image]);
        //HWindowID.SetColor("red");
        //HWindowID.SetLineWidth(1);
        //HWindowID.DispCross(row, col, width, 0);
        //HWindowID.SetColor("green");
        //if (DegLChecked & hv_AngleDeg.D != 720)
        //    HWindowID.DispObj(ho_ArrowLine);
        //else
        //    HWindowID.DispLine(hv_RowCut, hv_ColumnCut, hv_RowCenter, hv_ColCenter);
        //HWindowID.DispObj(ho_RCircle);
        //HWindowID.SetColor("red");
        //HWindowID.DispObj(ho_RCircle0);
        //xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
        //ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
        //if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
        //{
        //    #region Waixie
        //    set_display_font(HWindowID, 18, "sans", "true", "false");
        //    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //    disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
        //    disp_message(HWindowID, "NG1", "", 150, 2000, "red", "false");
        //    string TESTtime = DateTime.Now.ToString("HHmmss");
        //    FrmMain.afterDT = System.DateTime.Now;
        //    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
        //    WriteToPlc.CMDOKNG[i_image] = "0002";
        //    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //    WriteToPlc.CMDsend[i_image] = true;
        //    if (saveOPic)
        //        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //    if (saveRPic)
        //        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //    #endregion
        //}
        //else
        //{
        //    if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2"))
        //    {
        //        hv_Row2 = hv_RowCut;
        //        hv_Column2 = hv_ColumnCut;
        //        hv_CenRadius = hv_Radius;
        //        try
        //        {
        //            GlueIde(CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
        //        }
        //        catch
        //        {
        //            #region NG
        //            HWindowID.DispObj(halcon.Image[i_image]);
        //            HWindowID.SetColor("red");
        //            HWindowID.SetLineWidth(1);
        //            HWindowID.DispCross(row, col, width, 0);
        //            HWindowID.SetColor("green");
        //            HWindowID.DispObj(ho_RCircle);
        //            HWindowID.SetColor("red");
        //            HWindowID.DispObj(ho_RCircle0);
        //            HWindowID.SetColor("blue");
        //            if (DegLChecked & hv_AngleDeg.D != 720)
        //                HWindowID.DispObj(ho_ArrowLine);
        //            else
        //                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
        //            set_display_font(HWindowID, 18, "sans", "true", "false");
        //            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
        //            set_display_font(HWindowID, 14, "sans", "false", "false");
        //            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
        //            disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
        //            string TESTtime = DateTime.Now.ToString("HHmmss");
        //            FrmMain.afterDT = System.DateTime.Now;
        //            WriteToPlc.CMDOKNG[i_image] = "0002";
        //            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
        //            WriteToPlc.CMDsend[i_image] = true;
        //            if (saveOPic)
        //                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //            if (saveRPic)
        //                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //            #endregion
        //        }
        //    }
        //    else
        //    {
        //        #region PASS
        //        set_display_font(HWindowID, 18, "sans", "true", "false");
        //        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
        //        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
        //        disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
        //        disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
        //        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
        //        set_display_font(HWindowID, 14, "sans", "true", "false");
        //        if (addFCT & (CCDName == "A1CCD1" || CCDName == "A2CCD1"))
        //        {
        //            disp_message(HWindowID, Math.Round((double)hv_valueM, 3).ToString(), "", 1780, 150, "blue", "false");
        //            disp_message(HWindowID, Math.Round((double)hv_valueLM, 3).ToString(), "", 1840, 150, "green", "false");
        //        }
        //        string TESTtime = DateTime.Now.ToString("HHmmss");
        //        FrmMain.afterDT = System.DateTime.Now;
        //        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
        //        WriteToPlc.CMDOKNG[i_image] = "0001";
        //        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //        WriteToPlc.CMDsend[i_image] = true;
        //        if (saveOPic)
        //            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
        //        if (saveRPic)
        //            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
        //        #endregion
        //    }
        //}
        #endregion
        #endregion
        #region  Mode3
        #region 校正
        //if (DegLChecked)
        //{
        //    Degline(CCDName, HWindowID, i_image);
        //    double dd = Math.Abs((double)hv_AngleDeg - (double)hv_Deg2);
        //    if (dd < 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 18, 18);
        //    }
        //    if (dd > 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg - 180;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowEnd, hv_ColEnd, hv_RowBegin, hv_ColBegin, 18, 18);
        //    }
        //}
        //#endregion
        //#region 校正Mode3
        //if (Deg3RChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Deg3Region(CCDName, HWindowID, i_image);
        //    if ((double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        hv_RowM = hv_deg3row;
        //        hv_ColumnM = hv_deg3col;
        //    }
        //}
        //#endregion
        //#region 辅助4
        //if (MarkDegChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Mark4(CCDName, HWindowID, i_image);
        //    if (new HTuple(hv_MarkRowmax.TupleLength()) >= 1)
        //    {
        //        hv_RowM = hv_MarkRowmax;
        //        hv_ColumnM = hv_MarkColumnmax;
        //        SubRow = hv_MarkRowmax - hv_RowCenter;
        //        SubCol = hv_MarkColumnmax - hv_ColCenter;
        //        hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
        //        if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
        //            hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
        //        else
        //            hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
        //    }
        //    else
        //        hv_Deg2 = 720.0;
        //}
        #endregion
        #region 完整结果
        //xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
        //ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
        //if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm)// || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
        //{
        //    #region Waixie
        //    HWindowID.ClearWindow();
        //    HWindowID.DispObj(halcon.Image[i_image]);
        //    HWindowID.SetColor("red");
        //    HWindowID.SetLineWidth(1);
        //    HWindowID.DispCross(row, col, width, 0);
        //    HWindowID.SetColor("green");
        //    HWindowID.DispObj(ho_RCircle);
        //    HWindowID.SetColor("red");
        //    HWindowID.DispObj(ho_RCircle0);
        //    set_display_font(HWindowID, 18, "sans", "true", "false");
        //    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //    disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
        //    disp_message(HWindowID, "NG(s)", "", 150, 2000, "red", "false");
        //    string TESTtime = DateTime.Now.ToString("HHmmss");
        //    FrmMain.afterDT = System.DateTime.Now;
        //    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
        //    WriteToPlc.CMDOKNG[i_image] = "0002";
        //    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //    WriteToPlc.CMDsend[i_image] = true;
        //    if (saveOPic)
        //        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //    if (saveRPic)
        //        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //    #endregion
        //}
        //else
        //{
        //    if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2"))
        //    {
        //        hv_Row2 = hv_RowM;
        //        hv_Column2 = hv_ColumnM;
        //        hv_CenRadius = hv_Radius;
        //        try
        //        {
        //            GlueIde(CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
        //        }
        //        catch
        //        {
        //            #region NG
        //            HWindowID.DispObj(halcon.Image[i_image]);
        //            HWindowID.SetColor("red");
        //            HWindowID.SetLineWidth(1);
        //            HWindowID.DispCross(row, col, width, 0);
        //            HWindowID.SetColor("green");
        //            HWindowID.DispObj(ho_RCircle);
        //            HWindowID.SetColor("red");
        //            HWindowID.DispObj(ho_RCircle0);
        //            HWindowID.SetColor("blue");
        //            if (DegLChecked & hv_AngleDeg.D != 720)
        //                HWindowID.DispObj(ho_ArrowLine);
        //            else
        //                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
        //            set_display_font(HWindowID, 18, "sans", "true", "false");
        //            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
        //            set_display_font(HWindowID, 14, "sans", "false", "false");
        //            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
        //            disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
        //            string TESTtime = DateTime.Now.ToString("HHmmss");
        //            FrmMain.afterDT = System.DateTime.Now;
        //            WriteToPlc.CMDOKNG[i_image] = "0002";
        //            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
        //            WriteToPlc.CMDsend[i_image] = true;
        //            if (saveOPic)
        //                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //            if (saveRPic)
        //                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //            #endregion
        //        }
        //    }
        //    else
        //    {
        //        #region PASS
        //        HWindowID.ClearWindow();
        //        HWindowID.DispObj(halcon.Image[i_image]);
        //        HWindowID.SetColor("red");
        //        HWindowID.SetLineWidth(1);
        //        HWindowID.DispCross(row, col, width, 0);
        //        HWindowID.SetColor("green");
        //        HWindowID.DispObj(ho_RCircle);
        //        HWindowID.SetColor("blue");
        //        if (DegLChecked & hv_AngleDeg.D != 720)
        //            HWindowID.DispObj(ho_ArrowLine);
        //        else
        //            HWindowID.DispLine(hv_RowM, hv_ColumnM, hv_RowCenter, hv_ColCenter);
        //        HWindowID.SetColor("red");
        //        HWindowID.DispObj(ho_RCircle0);
        //        set_display_font(HWindowID, 18, "sans", "true", "false");
        //        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
        //        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
        //        disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
        //        disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
        //        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
        //        string TESTtime = DateTime.Now.ToString("HHmmss");
        //        FrmMain.afterDT = System.DateTime.Now;
        //        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
        //        WriteToPlc.CMDOKNG[i_image] = "0001";
        //        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //        WriteToPlc.CMDsend[i_image] = true;
        //        if (saveOPic)
        //            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
        //        if (saveRPic)
        //            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
        //        #endregion
        //    }
        //}
        #endregion
        #endregion
        #region Mode4
        #region 校正
        //if (DegLChecked)
        //{
        //    Degline(CCDName, HWindowID, i_image);
        //    double dd = Math.Abs((double)hv_AngleDeg - (double)hv_Deg2);
        //    if (dd < 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 18, 18);
        //    }
        //    if (dd > 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg - 180;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowEnd, hv_ColEnd, hv_RowBegin, hv_ColBegin, 18, 18);
        //    }
        //}
        //#endregion
        //#region 校正Mode3
        //if (Deg3RChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Deg3Region(CCDName, HWindowID, i_image);
        //    if ((double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        hv_RowCut4[hv_kCut4] = hv_deg3row;
        //        hv_ColumnCut4[hv_kCut4] = hv_deg3col;
        //    }
        //}
        //#endregion
        //#region 辅助4
        //if (MarkDegChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Mark4(CCDName, HWindowID, i_image);
        //    if (new HTuple(hv_MarkRowmax.TupleLength()) >= 1)
        //    {
        //        hv_RowCut4[hv_kCut4] = hv_MarkRowmax;
        //        hv_ColumnCut4[hv_kCut4] = hv_MarkColumnmax;
        //        SubRow = hv_MarkRowmax - hv_RowCenter;
        //        SubCol = hv_MarkColumnmax - hv_ColCenter;
        //        hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
        //        if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
        //            hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
        //        else
        //            hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
        //    }
        //    else
        //        hv_Deg2 = 720.0;
        //}
        #endregion
        #region 完整结果
        //HWindowID.ClearWindow();
        //HWindowID.DispObj(halcon.Image[i_image]);
        //HWindowID.SetColor("red");
        //HWindowID.SetLineWidth(1);
        //HWindowID.DispCross(row, col, width, 0);
        //HWindowID.DispObj(ho_RCircle0);
        //HWindowID.SetColor("green");
        //HWindowID.DispObj(ho_RCircle);
        //HWindowID.SetColor("blue");
        //if (DegLChecked & (double)hv_AngleDeg != 720.0)
        //    HWindowID.DispObj(ho_ArrowLine);
        //else
        //    HWindowID.DispLine(hv_RowCut4[hv_kCut4], hv_ColumnCut4[hv_kCut4], hv_RowCenter, hv_ColCenter);
        //HWindowID.SetLineWidth(4);
        //HWindowID.DispObj(ho_Cross);
        //xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
        //ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
        //if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
        //{
        //    #region Waixie
        //    set_display_font(HWindowID, 18, "sans", "true", "false");
        //    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //    disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
        //    disp_message(HWindowID, "NG1", "", 150, 2000, "red", "false");
        //    string TESTtime = DateTime.Now.ToString("HHmmss");
        //    FrmMain.afterDT = System.DateTime.Now;
        //    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
        //    WriteToPlc.CMDOKNG[i_image] = "0002";
        //    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //    WriteToPlc.CMDsend[i_image] = true;
        //    if (saveOPic)
        //        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //    if (saveRPic)
        //        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //    #endregion
        //}
        //else
        //{
        //    if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2"))
        //    {
        //        hv_Row2 = hv_RowCut4[hv_kCut4];
        //        hv_Column2 = hv_ColumnCut4[hv_kCut4];
        //        hv_CenRadius = hv_Radius;
        //        try
        //        {
        //            GlueIde(CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
        //        }
        //        catch
        //        {
        //            #region NG
        //            HWindowID.DispObj(halcon.Image[i_image]);
        //            HWindowID.SetColor("red");
        //            HWindowID.SetLineWidth(1);
        //            HWindowID.DispCross(row, col, width, 0);
        //            HWindowID.SetColor("green");
        //            HWindowID.DispObj(ho_RCircle);
        //            HWindowID.SetColor("red");
        //            HWindowID.DispObj(ho_RCircle0);
        //            HWindowID.SetColor("blue");
        //            if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
        //                HWindowID.DispObj(ho_ArrowLine);
        //            else
        //                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
        //            set_display_font(HWindowID, 18, "sans", "true", "false");
        //            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
        //            set_display_font(HWindowID, 14, "sans", "false", "false");
        //            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
        //            disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
        //            string TESTtime = DateTime.Now.ToString("HHmmss");
        //            FrmMain.afterDT = System.DateTime.Now;
        //            WriteToPlc.CMDOKNG[i_image] = "0002";
        //            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
        //            WriteToPlc.CMDsend[i_image] = true;
        //            if (saveOPic)
        //                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //            if (saveRPic)
        //                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //            #endregion
        //        }
        //    }
        //    else
        //    {
        //        #region PASS
        //        set_display_font(HWindowID, 18, "sans", "true", "false");
        //        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
        //        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
        //        disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
        //        disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
        //        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
        //        string TESTtime = DateTime.Now.ToString("HHmmss");
        //        FrmMain.afterDT = System.DateTime.Now;
        //        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
        //        WriteToPlc.CMDOKNG[i_image] = "0001";
        //        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //        WriteToPlc.CMDsend[i_image] = true;
        //        if (saveOPic)
        //            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
        //        if (saveRPic)
        //            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
        //        #endregion
        //    }
        //}
        #endregion
        #endregion
        #region Mode5
        #region 校正
        //if (DegLChecked)
        //{
        //    Degline(CCDName, HWindowID, i_image);
        //    double dd = Math.Abs((double)hv_AngleDeg - (double)hv_Deg2);
        //    if (dd < 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowBegin, hv_ColBegin, hv_RowEnd, hv_ColEnd, 18, 18);
        //    }
        //    if (dd > 90.0 & (double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg - 180;
        //        gen_arrow_contour_xld(out ho_ArrowLine, hv_RowEnd, hv_ColEnd, hv_RowBegin, hv_ColBegin, 18, 18);
        //    }
        //}
        //#endregion
        //#region 校正Mode3
        //if (Deg3RChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Deg3Region(CCDName, HWindowID, i_image);
        //    if ((double)hv_AngleDeg != 720.0)
        //    {
        //        hv_Deg2 = hv_AngleDeg;
        //        hv_RowCut = hv_deg3row;
        //        hv_ColumnCut = hv_deg3col;
        //    }
        //}
        //#endregion
        //#region 辅助4
        //if (MarkDegChecked)
        //{
        //    hv_AddDeg = hv_Deg2;
        //    Mark4(CCDName, HWindowID, i_image);
        //    if (new HTuple(hv_MarkRowmax.TupleLength()) >= 1)
        //    {
        //        hv_RowCut = hv_MarkRowmax;
        //        hv_ColumnCut = hv_MarkColumnmax;
        //        SubRow = hv_MarkRowmax - hv_RowCenter;
        //        SubCol = hv_MarkColumnmax - hv_ColCenter;
        //        hv_Deg2 = Math.Atan(Math.Abs(SubRow / SubCol)) * 180 / Math.PI;
        //        if (SubRow > 0)   //以右侧为基准点，逆时针0至360度
        //            hv_Deg2 = ((SubCol > 0) ? 360 - hv_Deg2 : 180 + hv_Deg2);
        //        else
        //            hv_Deg2 = ((SubCol > 0) ? hv_Deg2 : 180 - hv_Deg2);
        //    }
        //    else
        //        hv_Deg2 = 720.0;
        //}
        #endregion
        #region 完整结果
        //HWindowID.ClearWindow();
        //HWindowID.DispObj(halcon.Image[i_image]);
        //HWindowID.SetColor("red");
        //HWindowID.SetLineWidth(1);
        //HWindowID.DispCross(row, col, width, 0);
        //HWindowID.SetColor("green");
        //if (DegLChecked & (double)hv_AngleDeg != 720.0)
        //    HWindowID.DispObj(ho_ArrowLine);
        //else
        //    HWindowID.DispLine(hv_RowCut, hv_ColumnCut, hv_RowCenter, hv_ColCenter);
        //HWindowID.DispObj(ho_RCircle);
        //HWindowID.SetColor("red");
        //HWindowID.DispObj(ho_RCircle0);
        //xnum = (hv_ColCenter - col) * FrmVisionSet.xpm;
        //ynum = (-(hv_RowCenter - row)) * FrmVisionSet.ypm;
        //if (xnum > CXp || xnum < CXm || ynum > CYp || ynum < CYm || (double)hv_Deg2 > DegP || (double)hv_Deg2 < DegM)
        //{
        //    #region Waixie
        //    set_display_font(HWindowID, 18, "sans", "true", "false");
        //    disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //    disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //    disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //    disp_message(HWindowID, "部品歪斜/角度有误", "", 600, 150, "red", "false");
        //    disp_message(HWindowID, "NG1", "", 150, 2000, "red", "false");
        //    string TESTtime = DateTime.Now.ToString("HHmmss");
        //    FrmMain.afterDT = System.DateTime.Now;
        //    string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //    string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //    string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));
        //    WriteToPlc.CMDOKNG[i_image] = "0002";
        //    WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //    WriteToPlc.CMDsend[i_image] = true;
        //    if (saveOPic)
        //        HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //    if (saveRPic)
        //        HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //    #endregion
        //}
        //else
        //{
        //    if (gCheck && (CCDName == "GCCD2-1" || CCDName == "GCCD2-2"))
        //    {
        //        hv_Row2 = hv_RowCut;
        //        hv_Column2 = hv_ColumnCut;
        //        hv_CenRadius = hv_Radius;
        //        try
        //        {
        //            GlueIde(CCDName, GlueOrder, HWindowID, i_image, xnum, ynum, hv_Deg2);
        //        }
        //        catch
        //        {
        //            #region NG
        //            HWindowID.DispObj(halcon.Image[i_image]);
        //            HWindowID.SetColor("red");
        //            HWindowID.SetLineWidth(1);
        //            HWindowID.DispCross(row, col, width, 0);
        //            HWindowID.SetColor("green");
        //            HWindowID.DispObj(ho_RCircle);
        //            HWindowID.SetColor("red");
        //            HWindowID.DispObj(ho_RCircle0);
        //            HWindowID.SetColor("blue");
        //            if ((DegLChecked & hv_AngleDeg.D != 720) || AMode == "1")
        //                HWindowID.DispObj(ho_ArrowLine);
        //            else
        //                HWindowID.DispLine(hv_Row2, hv_Column2, hv_RowCenter, hv_ColCenter);
        //            set_display_font(HWindowID, 18, "sans", "true", "false");
        //            disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "red", "false");
        //            disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "red", "false");
        //            disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "red", "false");
        //            disp_message(HWindowID, "NG(2error)", "", 150, 2000, "red", "false");
        //            set_display_font(HWindowID, 14, "sans", "false", "false");
        //            disp_message(HWindowID, 0, "", 1600, 150, "red", "false");
        //            disp_message(HWindowID, 0, "", 1660, 150, "red", "false");
        //            string TESTtime = DateTime.Now.ToString("HHmmss");
        //            FrmMain.afterDT = System.DateTime.Now;
        //            WriteToPlc.CMDOKNG[i_image] = "0002";
        //            WriteToPlc.CMDresult[i_image] = "000000000000000000000000";
        //            WriteToPlc.CMDsend[i_image] = true;
        //            if (saveOPic)
        //                HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\NG\\OriginalImage\\" + TESTtime);
        //            if (saveRPic)
        //                HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\NG\\ResultImage\\" + TESTtime);
        //            #endregion
        //        }
        //    }
        //    else
        //    {
        //        #region PASS
        //        set_display_font(HWindowID, 18, "sans", "true", "false");
        //        disp_message(HWindowID, "X:" + Math.Round(xnum, 3) + "mm", "", 150, 150, "green", "false");
        //        disp_message(HWindowID, "Y:" + Math.Round(ynum, 3) + "mm", "", 300, 150, "green", "false");
        //        disp_message(HWindowID, "T:" + string.Format("{0:f3}°", Math.Round((double)hv_Deg2, 3)), "", 450, 150, "green", "false");
        //        disp_message(HWindowID, "R:" + Math.Round((double)hv_Radius * FrmVisionSet.xpm, 3) + "mm(" + Math.Round((double)hv_Radius, 2) + ")", "", 600, 150, "green", "false");
        //        disp_message(HWindowID, "PASS", "", 150, 2000, "green", "false");
        //        set_display_font(HWindowID, 14, "sans", "true", "false");
        //        if (addFCT & (CCDName == "A1CCD1" || CCDName == "A2CCD1"))
        //        {
        //            disp_message(HWindowID, Math.Round((double)hv_valueM, 3).ToString(), "", 1780, 150, "blue", "false");
        //            disp_message(HWindowID, Math.Round((double)hv_valueLM, 3).ToString(), "", 1840, 150, "green", "false");
        //        }
        //        string TESTtime = DateTime.Now.ToString("HHmmss");
        //        FrmMain.afterDT = System.DateTime.Now;
        //        string Xnum = FrmVisionSet.NToHString((int)(Math.Round(xnum, 3) * 1000));
        //        string Ynum = FrmVisionSet.NToHString((int)(Math.Round(ynum, 3) * 1000));
        //        string Anglenum = FrmVisionSet.NToHString((int)(Math.Round((double)hv_Deg2, 3) * 1000));// * 16 / 9));
        //        WriteToPlc.CMDOKNG[i_image] = "0001";
        //        WriteToPlc.CMDresult[i_image] = Xnum + Ynum + Anglenum;
        //        WriteToPlc.CMDsend[i_image] = true;
        //        if (saveOPic)
        //            HOperatorSet.WriteImage(halcon.Image[i_image], "png", -1, ImagePath + "\\PASS\\OriginalImage\\" + TESTtime);
        //        if (saveRPic)
        //            HOperatorSet.DumpWindow(HWindowID, "png", ImagePath + "\\PASS\\ResultImage\\" + TESTtime);
        //        #endregion
        //    }
        //}
        #endregion
        #endregion
        #region
        public HObject Difference(HObject ho_Image, HWindow window, HTuple OutRangeRadius, HTuple InRangeRadius, HTuple Row, HTuple Col, int DarkLightChoice, HTuple GrayThreshold, HTuple AreaLimitUp, HTuple AreaLimitDown, HTuple WidthLimitUp, HTuple WidthLimitDown, HTuple HeightLimitUp, HTuple HeightLimitDown)
        {

            try
            {
                HObject ho_Circle1 = null;
                HObject ho_Circle2 = null;
                HObject ho_Image1 = null;
                HObject ho_ImageReduced2 = null;
                HObject ho_ReducedImage = null;
                HObject ho_ImageMedian = null;
                HObject ho_Region = null;
                HObject ho_Regions1 = null;
                HObject ho_RegionOpening = null;
                HObject ho_ConnectedRegions1 = null;
                HObject ho_SelectedRegions2 = null;
                HWindow hv_ExpDefaultWinHandle = window;
                HOperatorSet.GenEmptyObj(out ho_Circle1);
                HOperatorSet.GenEmptyObj(out ho_Circle2);
                HOperatorSet.GenEmptyObj(out ho_Image1);
                HOperatorSet.GenEmptyObj(out ho_ImageMedian);
                HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
                HOperatorSet.GenEmptyObj(out ho_ReducedImage);
                HOperatorSet.GenEmptyObj(out ho_Region);
                HOperatorSet.GenEmptyObj(out ho_Regions1);
                HOperatorSet.GenEmptyObj(out ho_RegionOpening);
                HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
                HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);

                hv_ExpDefaultWinHandle.ClearWindow();
                //畫檢測區域
                if (ho_Image == null)
                    return null;
                ho_Image1.Dispose();
                HOperatorSet.CopyImage(ho_Image, out ho_Image1);

                ho_ImageMedian.Dispose();
                HOperatorSet.MedianImage(ho_Image1, out ho_ImageMedian, "circle",
          20, "mirrored");
                ho_Circle1.Dispose();
                HOperatorSet.GenCircle(out ho_Circle1, Row, Col, OutRangeRadius);
                ho_Circle2.Dispose();
                HOperatorSet.GenCircle(out ho_Circle2, Row, Col, InRangeRadius);
                HOperatorSet.Difference(ho_Circle1, ho_Circle2, out ho_RegionDifference);
                ho_ImageReduced2.Dispose();
                HOperatorSet.ReduceDomain(ho_ImageMedian, ho_RegionDifference, out ho_ImageReduced2);
                ho_Region.Dispose();
                if (DarkLightChoice == 0)
                    HOperatorSet.Threshold(ho_ImageReduced2, out ho_Region, GrayThreshold, 255);
                else
                    HOperatorSet.Threshold(ho_ImageReduced2, out ho_Region, 0, GrayThreshold);
                HOperatorSet.DispObj(ho_Region, hv_ExpDefaultWinHandle);
                ho_RegionClosing.Dispose();
                HOperatorSet.ClosingCircle(ho_Region, out ho_RegionClosing, 3.5);
                ho_RegionOpening.Dispose();
                HOperatorSet.OpeningRectangle1(ho_RegionClosing, out ho_RegionOpening, 10,
          10);
                ho_ConnectedRegions1.Dispose();
                HOperatorSet.Connection(ho_RegionOpening, out ho_ConnectedRegions1);
                ho_SelectedRegions2.Dispose();

                HOperatorSet.SelectShape(ho_ConnectedRegions1, out ho_SelectedRegions2, ((new HTuple("area")).TupleConcat(
       "rect2_len1")).TupleConcat("rect2_len2"), "and", ((new HTuple(AreaLimitDown)).TupleConcat(
       WidthLimitDown)).TupleConcat(HeightLimitDown), ((new HTuple(AreaLimitUp)).TupleConcat(WidthLimitUp)).TupleConcat(
       HeightLimitUp));
                //HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
                //HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "margin");
                //HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "yellow");
                //HOperatorSet.DispObj(ho_Circle1, hv_ExpDefaultWinHandle);
                //HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "orange");
                //HOperatorSet.DispObj(ho_Circle2, hv_ExpDefaultWinHandle);
                //HOperatorSet.SetDraw(hv_ExpDefaultWinHandle, "fill");
                //HOperatorSet.SetColor(hv_ExpDefaultWinHandle, "red");
                //HOperatorSet.DispObj(ho_SelectedRegions2, hv_ExpDefaultWinHandle);
                HTuple hv_Row1 = new HTuple(), hv_Column1 = new HTuple(), hv_Phi = new HTuple(), hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
                HOperatorSet.SmallestRectangle2(ho_SelectedRegions2, out hv_Row1, out hv_Column1,
                 out hv_Phi, out hv_Length1, out hv_Length2);
                return ho_SelectedRegions2;
            }
            catch
            {
                return null;
            }

        }

        public void GetLine(HObject region, HTuple hv_ResultRow, HTuple hv_ResultColumn, int MeasureTransition, HTuple MeasureThreshold, HTuple MeasureLength1, HTuple MeasureLength2, int MeasureSelect, HObject ho_Image, HWindow window, out HTuple ReasultBeginRows, out HTuple ReasultBeginCols, out HTuple ReasultEndRows, out HTuple ReasultEndCols)
        {
            HTuple hv_Phi = null;
            HTuple hv_Length1 = null;
            HTuple hv_Length2 = null;
            HTuple hv_Cos = null;
            HTuple hv_Sin = null;
            HTuple hv_ColLU = null;
            HTuple hv_RowLU = null;
            HTuple hv_ColRU = null;
            HTuple hv_RowRU = null;
            HTuple hv_ColRD = null;
            HTuple hv_ColLD = null;
            HTuple hv_RowLD = null;
            HTuple hv_RowRD = null;
            HTuple hv_InitialRows = null;
            HTuple hv_InitialColumns = null;
            HTuple hv_EndRows = null;
            HTuple hv_EndColumns = null;
            HTuple hv_Number = null;
            HTuple hv_Index = null;
            HTuple hv_InitialRow = null;
            HTuple hv_InitialColumn = null;
            HTuple hv_EndRow = null;
            HTuple hv_EndColumn = null;
            HTuple Transition = null;
            HTuple hv_RowBegin1 = null;
            HTuple hv_ColBegin1 = null;
            HTuple hv_RowEnd1 = null;
            HTuple hv_ColEnd1 = null;
            HTuple hv_Nr1 = null;
            HTuple hv_Nc1 = null;
            HTuple hv_Dist = null;
            HTuple hv_Phi3 = null;
            HTuple ho_Select = null;
            HTuple hv_Row2 = null;
            HTuple hv_Column2 = null;
            HTuple hv_MetrologyHandle1 = null;
            HTuple hv_Row1 = null;
            HObject ho_Rectangle3 = null;
            HObject ho_Rectangle = null;
            HObject ho_ResultContours1 = null;
            HObject ho_RegionLines = null;
            HObject ho_Contour3 = null;
            HObject ho_UsedEdges1 = null;
            HObject ho_ModelContour1 = null;

            HOperatorSet.GenEmptyObj(out ho_Rectangle3);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ResultContours1);
            HOperatorSet.GenEmptyObj(out ho_RegionLines);
            HOperatorSet.GenEmptyObj(out ho_Contour3);
            HOperatorSet.GenEmptyObj(out ho_UsedEdges1);
            HWindow hv_ExpDefaultWinHandle = window;
            try
            {
                hv_ExpDefaultWinHandle.ClearWindow();
                HOperatorSet.DispObj(ho_Image, hv_ExpDefaultWinHandle);
                HOperatorSet.SmallestRectangle2(region, out hv_Row1, out hv_Column1,
                    out hv_Phi, out hv_Length1, out hv_Length2);
                ho_Rectangle3.Dispose();
                HOperatorSet.GenRectangle2ContourXld(out ho_Rectangle3, hv_Row1, hv_Column1,
                    hv_Phi, hv_Length1, hv_Length2);
                HOperatorSet.TupleCos(hv_Phi, out hv_Cos);
                HOperatorSet.TupleSin(hv_Phi, out hv_Sin);
                //矩形第一个端点计算（左上）
                hv_ColLU = (hv_Column1 - (hv_Length1 * hv_Cos)) - (hv_Length2 * hv_Sin);
                hv_RowLU = hv_Row1 - (((-hv_Length1) * hv_Sin) + (hv_Length2 * hv_Cos));
                //矩形第二个端点计算（右上）
                hv_ColRU = (hv_Column1 + (hv_Length1 * hv_Cos)) - (hv_Length2 * hv_Sin);
                hv_RowRU = hv_Row1 - ((hv_Length1 * hv_Sin) + (hv_Length2 * hv_Cos));
                //矩形第三个端点计算（右下）
                hv_ColRD = (hv_Column1 + (hv_Length1 * hv_Cos)) + (hv_Length2 * hv_Sin);
                hv_RowRD = hv_Row1 - ((hv_Length1 * hv_Sin) - (hv_Length2 * hv_Cos));
                //矩形的第四个端点计算（左下）
                hv_ColLD = (hv_Column1 - (hv_Length1 * hv_Cos)) + (hv_Length2 * hv_Sin);
                hv_RowLD = hv_Row1 - (((-hv_Length1) * hv_Sin) - (hv_Length2 * hv_Cos));
                //存储拟合起点终点
                hv_InitialRows = new HTuple();
                hv_InitialColumns = new HTuple();
                hv_EndRows = new HTuple();
                hv_EndColumns = new HTuple();
                HOperatorSet.CountObj(ho_Rectangle3, out hv_Number);
                HTuple end_val50 = hv_Number - 1;
                HTuple step_val50 = 1;
                if (MeasureSelect == 0)
                {
                    ho_Select = "first";

                }
                else
                {
                    ho_Select = "last";

                }
                if (MeasureTransition == 0)
                    Transition = "positive";
                else
                    Transition = "negative";
                for (hv_Index = 0; hv_Index.Continue(end_val50, step_val50); hv_Index = hv_Index.TupleAdd(step_val50))
                {
                    if ((int)(new HTuple(((hv_Row1.TupleSelect(hv_Index))).TupleLess(hv_ResultRow))) != 0)
                    {
                        hv_InitialRow = hv_RowLD.TupleSelect(hv_Index);
                        hv_InitialColumn = hv_ColLD.TupleSelect(hv_Index);
                        hv_EndRow = hv_RowRD.TupleSelect(hv_Index);
                        hv_EndColumn = hv_ColRD.TupleSelect(hv_Index);

                    }
                    else if ((int)(new HTuple(((hv_Row1.TupleSelect(hv_Index))).TupleGreater(
                        hv_ResultRow))) != 0)
                    {
                        hv_InitialRow = hv_RowRU.TupleSelect(hv_Index);
                        hv_InitialColumn = hv_ColRU.TupleSelect(hv_Index);
                        hv_EndRow = hv_RowLU.TupleSelect(hv_Index);
                        hv_EndColumn = hv_ColLU.TupleSelect(hv_Index);
                    }
                    else if ((int)((new HTuple(((hv_Row1.TupleSelect(hv_Index))).TupleEqual(
                        hv_ResultRow))).TupleAnd(new HTuple(((hv_Column1.TupleSelect(hv_Index))).TupleLess(
                        hv_ResultColumn)))) != 0)
                    {
                        hv_InitialRow = hv_RowRD.TupleSelect(hv_Index);

                        hv_InitialColumn = hv_ColRD.TupleSelect(hv_Index);
                        hv_EndRow = hv_RowRU.TupleSelect(hv_Index);
                        hv_EndColumn = hv_ColRU.TupleSelect(hv_Index);
                    }
                    else
                    {

                        hv_InitialRow = hv_RowLU.TupleSelect(hv_Index);
                        hv_InitialColumn = hv_ColLU.TupleSelect(hv_Index);
                        hv_EndRow = hv_RowLD.TupleSelect(hv_Index);
                        hv_EndColumn = hv_ColLD.TupleSelect(hv_Index);
                    }


                    HOperatorSet.CreateMetrologyModel(out hv_MetrologyHandle1);
                    HOperatorSet.AddMetrologyObjectGeneric(hv_MetrologyHandle1, "line", ((((hv_InitialRow.TupleConcat(
                        hv_InitialColumn))).TupleConcat(hv_EndRow))).TupleConcat(hv_EndColumn),
                        MeasureLength1, MeasureLength2, 1, MeasureThreshold, new HTuple(), new HTuple(), out hv_circleIndices);
                    ho_ModelContour.Dispose();
                    HOperatorSet.GetMetrologyObjectModelContour(out ho_ModelContour1, hv_MetrologyHandle1,
                        "all", 1.5);
                    //第一個點或最後一個點
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle1, hv_circleIndices,
                        "measure_select", ho_Select);
                    HOperatorSet.SetMetrologyObjectParam(hv_MetrologyHandle1, hv_circleIndices,
                        "min_score", 0.2);
                    HOperatorSet.ApplyMetrologyModel(ho_Image, hv_MetrologyHandle1);
                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle1, hv_circleIndices,
                        "all", "result_type", "all_param", out hv_circleParameter);
                    //白找黑('negative')或黑找白('positive')
                    ho_Contour3.Dispose();
                    HOperatorSet.GetMetrologyObjectMeasures(out ho_Contour3, hv_MetrologyHandle1,
                        "all", Transition, out hv_Row2, out hv_Column2);
                    ho_Contours.Dispose();
                    HOperatorSet.GetMetrologyObjectResultContour(out ho_Contours, hv_MetrologyHandle1,
                        "all", "all", 1.5);
                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle1, "all", "all", "used_edges",
                        "row", out hv_UsedRow);
                    HOperatorSet.GetMetrologyObjectResult(hv_MetrologyHandle1, "all", "all", "used_edges",
                        "column", out hv_UsedColumn);
                    ho_UsedEdges1.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_UsedEdges1, hv_UsedRow, hv_UsedColumn,
                        10, (new HTuple(45)).TupleRad());
                    ho_ResultContours1.Dispose();
                    HOperatorSet.GetMetrologyObjectResultContour(out ho_ResultContours1, hv_MetrologyHandle1,
                        "all", "all", 1.5);

                    HOperatorSet.FitLineContourXld(ho_ResultContours1, "tukey", -1, 0, 5, 2, out hv_RowBegin1,
                        out hv_ColBegin1, out hv_RowEnd1, out hv_ColEnd1, out hv_Nr1, out hv_Nc1,
                        out hv_Dist);
                    if (hv_InitialRows == null)
                        hv_InitialRows = new HTuple();
                    hv_InitialRows[hv_Index] = hv_RowBegin1;
                    if (hv_InitialColumns == null)
                        hv_InitialColumns = new HTuple();
                    hv_InitialColumns[hv_Index] = hv_ColBegin1;
                    if (hv_EndRows == null)
                        hv_EndRows = new HTuple();
                    hv_EndRows[hv_Index] = hv_RowEnd1;
                    if (hv_EndColumns == null)
                        hv_EndColumns = new HTuple();
                    hv_EndColumns[hv_Index] = hv_ColEnd1;
                    HOperatorSet.SetDraw(window, "margin");
                    HOperatorSet.SetColor(window, "red");
                    HOperatorSet.DispObj(ho_UsedEdges1, hv_ExpDefaultWinHandle);
                    HOperatorSet.SetDraw(window, "margin");
                    HOperatorSet.SetColor(window, "green");
                    HOperatorSet.DispObj(ho_Contour3, hv_ExpDefaultWinHandle);
                    HOperatorSet.SetDraw(window, "margin");
                    HOperatorSet.SetColor(window, "yellow");
                    HOperatorSet.DispObj(ho_ResultContours1, hv_ExpDefaultWinHandle);
                    HOperatorSet.ClearMetrologyModel(hv_MetrologyHandle1);
                }
                ho_RegionLines.Dispose();
                HOperatorSet.GenRegionLine(out ho_RegionLines, hv_InitialRows, hv_InitialColumns,
                    hv_EndRows, hv_EndColumns);
                ReasultBeginRows = hv_InitialRows;
                ReasultBeginCols = hv_InitialColumns;
                ReasultEndRows = hv_EndRows;
                ReasultEndCols = hv_EndColumns;


            }
            catch
            {
                ReasultBeginRows = null;
                ReasultBeginCols = null;
                ReasultEndRows = null;
                ReasultEndCols = null;
            }
        }
        public void FixationRing(HObject ho_Image, HWindow Window, HTuple CircleRadius1, HTuple CircleRadius2, HTuple RowCenter, HTuple ColCenter)
        {


            HObject ho_Circle1 = null;
            HObject ho_Circle2 = null;
            HObject ho_Image1 = null;
            HOperatorSet.GenEmptyObj(out ho_Circle1);
            HOperatorSet.GenEmptyObj(out ho_Circle2);
            HOperatorSet.GenEmptyObj(out ho_Image1);
            HTuple hv_CircleRadius1 = null;
            HTuple hv_CircleRadius2 = null;
            HTuple hv_ResultRow = null;
            HTuple hv_ResultColumn = null;

            if (ho_Image == null)
                return;
            ho_Image1.Dispose();
            HOperatorSet.CopyImage(ho_Image, out ho_Image1);
            HWindow hv_ExpDefaultWinHandle;
            hv_ExpDefaultWinHandle = Window;
            //畫檢視範圍
            hv_ExpDefaultWinHandle.ClearWindow();
            HOperatorSet.DispObj(ho_Image1, hv_ExpDefaultWinHandle);
            //畫出固定環區域
            hv_CircleRadius1 = CircleRadius1;
            hv_CircleRadius2 = CircleRadius2;
            hv_ResultRow = RowCenter;
            hv_ResultColumn = ColCenter;
            ho_Circle1.Dispose();
            HOperatorSet.GenCircle(out ho_Circle1, hv_ResultRow, hv_ResultColumn, hv_CircleRadius1);
            ho_Circle2.Dispose();
            HOperatorSet.GenCircle(out ho_Circle2, hv_ResultRow, hv_ResultColumn, hv_CircleRadius2);   
        }
        public bool ImageProcess(double ypm, double offset, double dGapoffset, HObject ho_Image, HWindow window, HTuple RowCenter, HTuple ColCenter, HTuple ReasultBeginRows, HTuple ReasultBeginCols, HTuple ReasultEndRows, HTuple ReasultEndCols, out HTuple Distance, out HTuple Distance1, out HTuple Distance2)
        {
            HObject ho_ImageMedian;
            HObject ho_Circle, ho_ImageReduced, ho_Regions, ho_RegionClosing1;
            HObject ho_RegionFillUp, ho_ConnectedRegions, ho_SelectedRegions;
            HObject ho_UsedEdges, ho_Contour, ho_ResultContours, ho_CrossCenter;
            HObject ho_Cross, ho_Circle1, ho_Circle2, ho_RegionDifference;
            HObject ho_ImageReduced2, ho_Regions1, ho_RegionClosing;
            HObject ho_RegionOpening, ho_ConnectedRegions1, ho_SelectedRegions2;
            HObject ho_Rectangle, ho_ModelContour = null, ho_Contours = null;
            HObject ho_RegionLines, ho_Cross1 = null, ho_RegionLines1 = null;

            // Local control variables 

            HTuple hv_Width = null, hv_Height = null;
            HTuple hv_Area1 = null, hv_Row2 = null, hv_Column2 = null;
            HTuple hv_Value = null, hv_ResultRow = null, hv_ResultColumn = null;
            HTuple hv_ResultRadius = null, hv_Row1 = null, hv_Column1 = null;
            HTuple hv_Phi = null, hv_Length1 = null, hv_Length2 = null;
            HTuple hv_Cos = null, hv_Sin = null, hv_ColLU = null, hv_RowLU = null;
            HTuple hv_ColRU = null, hv_RowRU = null, hv_ColRD = null;
            HTuple hv_RowRD = null, hv_ColLD = null, hv_RowLD = null;
            HTuple hv_InitialRows = null, hv_InitialColumns = null;
            HTuple hv_EndRows = null, hv_EndColumns = null, hv_Number = null;
            HTuple hv_Index = null, hv_InitialRow = new HTuple(), hv_InitialColumn = new HTuple();
            HTuple hv_EndRow = new HTuple(), hv_EndColumn = new HTuple();
            HTuple hv_MetrologyHandle = new HTuple(), hv_circleIndices = new HTuple();
            HTuple hv_circleParameter = new HTuple(), hv_Row = new HTuple();
            HTuple hv_Column = new HTuple(), hv_UsedRow = new HTuple();
            HTuple hv_UsedColumn = new HTuple(), hv_RowBegin = new HTuple();
            HTuple hv_ColBegin = new HTuple(), hv_RowEnd = new HTuple();
            HTuple hv_ColEnd = new HTuple(), hv_Nr = new HTuple();
            HTuple hv_Nc = new HTuple(), hv_Dist = new HTuple(), hv_Phi3 = null;
            HTuple hv_RowProjs = null, hv_ColProj = null, hv_Phis = null;
            HTuple hv_Index1 = null, hv_RowProj = new HTuple(), hv_Phi1 = new HTuple();
            HTuple hv_Distance = new HTuple(), hv_realDistance = new HTuple();
            HTuple hv_ColProjs = new HTuple(), hv_realRowProj = null;
            HTuple hv_realColProj = null, hv_A1 = null, hv_Index3 = new HTuple();
            HTuple hv_Phi2 = new HTuple(), hv_Distances1 = null, hv_Distances2 = null;
            HTuple hv_Distance1 = null, hv_A2 = null, hv_Index2 = null;
            HTuple hv_Distance2 = null, hv_A3 = null, hv_Index4 = null;
            HTuple hv_Index5 = new HTuple(), hv_Distance3 = null, hv_resultDistance = null;
            HTuple hv_Angle2 = null;
            HTuple hv_Angles = null;
            HTuple hv_Angle = null;
            HTuple hv_Deg = null;
            HTuple width = null;
            HTuple height = null;
            HTuple hv_Angle1 = null;
            HTuple hv_Deg1 = null;
            // Initialize local and output iconic variables 
            HOperatorSet.GenEmptyObj(out ho_ImageMedian);
            HOperatorSet.GenEmptyObj(out ho_Circle);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced);
            HOperatorSet.GenEmptyObj(out ho_Regions);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing1);
            HOperatorSet.GenEmptyObj(out ho_RegionFillUp);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions);
            HOperatorSet.GenEmptyObj(out ho_UsedEdges);
            HOperatorSet.GenEmptyObj(out ho_Contour);
            HOperatorSet.GenEmptyObj(out ho_ResultContours);
            HOperatorSet.GenEmptyObj(out ho_CrossCenter);
            HOperatorSet.GenEmptyObj(out ho_Cross);
            HOperatorSet.GenEmptyObj(out ho_Circle1);
            HOperatorSet.GenEmptyObj(out ho_Circle2);
            HOperatorSet.GenEmptyObj(out ho_RegionDifference);
            HOperatorSet.GenEmptyObj(out ho_ImageReduced2);
            HOperatorSet.GenEmptyObj(out ho_Regions1);
            HOperatorSet.GenEmptyObj(out ho_RegionClosing);
            HOperatorSet.GenEmptyObj(out ho_RegionOpening);
            HOperatorSet.GenEmptyObj(out ho_ConnectedRegions1);
            HOperatorSet.GenEmptyObj(out ho_SelectedRegions2);
            HOperatorSet.GenEmptyObj(out ho_Rectangle);
            HOperatorSet.GenEmptyObj(out ho_ModelContour);
            HOperatorSet.GenEmptyObj(out ho_Contours);
            HOperatorSet.GenEmptyObj(out ho_RegionLines);
            HOperatorSet.GenEmptyObj(out ho_Cross1);
            HOperatorSet.GenEmptyObj(out ho_RegionLines1);
            HWindow hv_WindowHandle;
            try
            {
                hv_WindowHandle = window;
                hv_InitialRows = ReasultBeginRows;
                hv_InitialColumns = ReasultBeginCols;
                hv_EndRows = ReasultEndRows;
                hv_EndColumns = ReasultEndCols;
                hv_Number = hv_InitialRows.TupleLength();
                if (hv_Number != 5)
                {
                    set_display_font(hv_WindowHandle, 10, "mono", "true", "false");
                    disp_message(hv_WindowHandle, "Miss", "image", 10,
                        10, "red", "false");
                    Distance = 0;
                    Distance1 = 0;
                    Distance2 = 0;
                    return false;

                }
                hv_ResultRow = RowCenter;
                hv_ResultColumn = ColCenter;
                hv_WindowHandle.ClearWindow();
                HOperatorSet.GetImageSize(ho_Image, out width, out height);
                HOperatorSet.SetPart(hv_WindowHandle, 0, 0, height - 1, width - 1);
                HOperatorSet.DispObj(ho_Image, hv_WindowHandle);
                ho_RegionLines.Dispose();
                HOperatorSet.GenRegionLine(out ho_RegionLines, hv_InitialRows, hv_InitialColumns,
                    hv_EndRows, hv_EndColumns);
                HOperatorSet.SetColor(hv_WindowHandle, "green");
                HOperatorSet.DispObj(ho_RegionLines, hv_WindowHandle);
                hv_RowProjs = new HTuple();
                hv_ColProj = new HTuple();
                hv_Phis = new HTuple();

                HTuple end_val107 = hv_Number - 1;
                HTuple step_val107 = 1;
                for (hv_Index1 = 0; hv_Index1.Continue(end_val107, step_val107); hv_Index1 = hv_Index1.TupleAdd(step_val107))
                {
                    //计算出圆心与线段的垂足
                    HOperatorSet.ProjectionPl(hv_ResultRow, hv_ResultColumn, hv_InitialRows.TupleSelect(
                        hv_Index1), hv_InitialColumns.TupleSelect(hv_Index1), hv_EndRows.TupleSelect(
                        hv_Index1), hv_EndColumns.TupleSelect(hv_Index1), out hv_RowProj, out hv_ColProj);
                    //显示垂足点
                    ho_Cross1.Dispose();
                    HOperatorSet.GenCrossContourXld(out ho_Cross1, hv_RowProj, hv_ColProj, 20,
                        0);
                    HOperatorSet.SetColor(hv_WindowHandle, "red");
                    HOperatorSet.DispObj(ho_Cross1, hv_WindowHandle);

                    //显示垂线
                    ho_RegionLines1.Dispose();
                    HOperatorSet.GenRegionLine(out ho_RegionLines1, hv_ResultRow, hv_ResultColumn,
                        hv_RowProj, hv_ColProj);
                    HOperatorSet.AngleLx(hv_ResultRow, hv_ResultColumn, hv_RowProj, hv_ColProj,
                        out hv_Angle);
                    HOperatorSet.SetColor(hv_WindowHandle, "green");
                    HOperatorSet.DispObj(ho_RegionLines1, hv_WindowHandle);
                    HOperatorSet.OrientationRegion(ho_RegionLines1, out hv_Phi1);
                    //圆心到线段的距离显示
                    HOperatorSet.DistancePl(hv_ResultRow, hv_ResultColumn, hv_InitialRows.TupleSelect(
                        hv_Index1), hv_InitialColumns.TupleSelect(hv_Index1), hv_EndRows.TupleSelect(
                        hv_Index1), hv_EndColumns.TupleSelect(hv_Index1), out hv_Distance);
                    if (hv_RowProjs == null)
                        hv_RowProjs = new HTuple();
                    hv_RowProjs[hv_Index1] = hv_RowProj;
                    if (hv_ColProjs == null)
                        hv_ColProjs = new HTuple();
                    hv_ColProjs[hv_Index1] = hv_ColProj;
                    if (hv_Phis == null)
                        hv_Phis = new HTuple();
                    hv_Phis[hv_Index1] = hv_Phi1;
                    if (hv_Angles == null)
                        hv_Angles = new HTuple();
                    hv_Angles[hv_Index1] = hv_Angle;
                }
                hv_realRowProj = 0;
                hv_realColProj = 0;
                hv_A1 = new HTuple();
                hv_A2 = new HTuple();
                for (hv_Index2 = 0; (int)hv_Index2 <= 4; hv_Index2 = (int)hv_Index2 + 1)
                {
                    HTuple end_val136 = 4;
                    HTuple step_val136 = 1;
                    for (hv_Index3 = hv_Index2 + 1; hv_Index3.Continue(end_val136, step_val136); hv_Index3 = hv_Index3.TupleAdd(step_val136))
                    {
                        hv_Angle2 = (((hv_Angles.TupleSelect(hv_Index2)) - (hv_Angles.TupleSelect(
                            hv_Index3)))).TupleAbs();
                        HOperatorSet.TupleDeg(hv_Angle2, out hv_Deg);
                        if ((int)((new HTuple((new HTuple(170)).TupleLess(hv_Deg))).TupleAnd(new HTuple(hv_Deg.TupleLess(
                            190)))) != 0)
                        {
                            if ((int)(new HTuple((new HTuple(hv_A1.TupleLength())).TupleEqual(0))) != 0)
                            {
                                hv_A1 = new HTuple();
                                hv_A1 = hv_A1.TupleConcat(hv_Index2);
                                hv_A1 = hv_A1.TupleConcat(hv_Index3);
                            }
                            else
                            {
                                hv_A2 = new HTuple();
                                hv_A2 = hv_A2.TupleConcat(hv_Index2);
                                hv_A2 = hv_A2.TupleConcat(hv_Index3);
                            }
                            break;
                        }

                    }
                }

                //HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_RowProjs.TupleSelect(
                //    hv_A1.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A1.TupleSelect(0)), out hv_Distances1);
                //HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_RowProjs.TupleSelect(
                //    hv_A1.TupleSelect(1)), hv_ColProjs.TupleSelect(hv_A1.TupleSelect(1)), out hv_Distances2);

                HOperatorSet.DistancePp(hv_RowProjs.TupleSelect(hv_A1.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A1.TupleSelect(0)), hv_RowProjs.TupleSelect(
                   hv_A1.TupleSelect(1)), hv_ColProjs.TupleSelect(hv_A1.TupleSelect(1)), out hv_Distance1);
                //hv_Distance1 = hv_Distances1 + hv_Distances2;
                set_display_font(hv_WindowHandle, 10, "mono", "true", "false");
                double distan1 = hv_Distance1 * ypm + dGapoffset;
                disp_message(hv_WindowHandle, Math.Round(distan1, 4) + "mm", "image", hv_RowProjs.TupleSelect(
                    hv_A1.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A1.TupleSelect(0)), "red",
                    "false");
                //HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_RowProjs.TupleSelect(
                //    hv_A2.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A2.TupleSelect(0)), out hv_Distances1);
                //HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_RowProjs.TupleSelect(
                //    hv_A2.TupleSelect(1)), hv_ColProjs.TupleSelect(hv_A2.TupleSelect(1)), out hv_Distances2);
                //hv_Distance2 = hv_Distances1 + hv_Distances2;
                HOperatorSet.DistancePp(hv_RowProjs.TupleSelect(hv_A2.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A2.TupleSelect(0)), hv_RowProjs.TupleSelect(
                   hv_A2.TupleSelect(1)), hv_ColProjs.TupleSelect(hv_A2.TupleSelect(1)), out hv_Distance2);
                set_display_font(hv_WindowHandle, 10, "mono", "true", "false");
                double distan2 = hv_Distance2 * ypm + dGapoffset;
                disp_message(hv_WindowHandle, Math.Round(distan2, 4) + "mm", "image", hv_RowProjs.TupleSelect(
                    hv_A2.TupleSelect(0)), hv_ColProjs.TupleSelect(hv_A2.TupleSelect(0)), "red",
                    "false");
                hv_A3 = new HTuple();
                hv_A3 = hv_A3.TupleConcat(hv_A1.TupleSelect(0));
                hv_A3 = hv_A3.TupleConcat(hv_A1.TupleSelect(
                    1));
                hv_A3 = hv_A3.TupleConcat(hv_A2.TupleSelect(0));
                hv_A3 = hv_A3.TupleConcat(hv_A2.TupleSelect(
                    1));
                for (hv_Index4 = 0; (int)hv_Index4 <= 4; hv_Index4 = (int)hv_Index4 + 1)
                {
                    for (hv_Index5 = 0; (int)hv_Index5 <= 3; hv_Index5 = (int)hv_Index5 + 1)
                    {
                        if ((int)(new HTuple(((hv_A3.TupleSelect(hv_Index5))).TupleEqual(hv_Index4))) != 0)
                        {
                            break;
                        }
                        if ((int)(new HTuple(hv_Index5.TupleEqual(3))) != 0)
                        {
                            hv_realRowProj = hv_RowProjs.TupleSelect(hv_Index4);
                            hv_realColProj = hv_ColProjs.TupleSelect(hv_Index4);
                        }
                    }
                }
                HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_realRowProj, hv_realColProj,
                    out hv_Distance3);
                set_display_font(hv_WindowHandle, 10, "mono", "true", "false");
                double distance3 = hv_Distance3 * ypm + offset;
                disp_message(hv_WindowHandle, Math.Round(distance3, 4) + "mm", "image", hv_realRowProj,
                    hv_realColProj, "red", "false");
                HOperatorSet.DistancePp(hv_ResultRow, hv_ResultColumn, hv_realRowProj, hv_realColProj,
                    out hv_resultDistance);
                HOperatorSet.AngleLl(hv_ResultRow, hv_ResultColumn, hv_realRowProj, hv_realColProj,
        hv_RowProjs.TupleSelect(hv_A1.TupleSelect(0)), hv_ColProjs.TupleSelect(
        hv_A1.TupleSelect(0)), hv_RowProjs.TupleSelect(hv_A1.TupleSelect(1)), hv_ColProjs.TupleSelect(
        hv_A1.TupleSelect(1)), out hv_Angle1);
                HOperatorSet.TupleDeg(hv_Angle1, out hv_Deg1);
                if ((int)((new HTuple((new HTuple((new HTuple(40)).TupleLess(hv_Deg1))).TupleAnd(
                    new HTuple(hv_Deg1.TupleLess(50))))).TupleOr((new HTuple((new HTuple(-140)).TupleLess(
                    hv_Deg1))).TupleAnd(new HTuple(hv_Deg1.TupleLess(-130))))) != 0)
                {
                    Distance = hv_Distance3 * ypm + offset;
                    Distance1 = hv_Distance2 * ypm + dGapoffset;
                    Distance2 = hv_Distance1 * ypm + dGapoffset;


                }
                else
                {

                    Distance = hv_Distance3 * ypm + offset;
                    Distance1 = hv_Distance1 * ypm + dGapoffset;
                    Distance2 = hv_Distance2 * ypm + dGapoffset;

                }
                ho_ImageMedian.Dispose();
                ho_Circle.Dispose();
                ho_ImageReduced.Dispose();
                ho_Regions.Dispose();
                ho_RegionClosing1.Dispose();
                ho_RegionFillUp.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_UsedEdges.Dispose();
                ho_Contour.Dispose();
                ho_ResultContours.Dispose();
                ho_CrossCenter.Dispose();
                ho_Cross.Dispose();
                ho_Circle1.Dispose();
                ho_Circle2.Dispose();
                ho_RegionDifference.Dispose();
                ho_ImageReduced2.Dispose();
                ho_Regions1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions2.Dispose();
                ho_Rectangle.Dispose();
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();
                ho_RegionLines.Dispose();
                ho_Cross1.Dispose();
                ho_RegionLines1.Dispose();
                return true;

            }
            catch
            {

                ho_ImageMedian.Dispose();
                ho_Circle.Dispose();
                ho_ImageReduced.Dispose();
                ho_Regions.Dispose();
                ho_RegionClosing1.Dispose();
                ho_RegionFillUp.Dispose();
                ho_ConnectedRegions.Dispose();
                ho_SelectedRegions.Dispose();
                ho_UsedEdges.Dispose();
                ho_Contour.Dispose();
                ho_ResultContours.Dispose();
                ho_CrossCenter.Dispose();
                ho_Cross.Dispose();
                ho_Circle1.Dispose();
                ho_Circle2.Dispose();
                ho_RegionDifference.Dispose();
                ho_ImageReduced2.Dispose();
                ho_Regions1.Dispose();
                ho_RegionClosing.Dispose();
                ho_RegionOpening.Dispose();
                ho_ConnectedRegions1.Dispose();
                ho_SelectedRegions2.Dispose();
                ho_Rectangle.Dispose();
                ho_ModelContour.Dispose();
                ho_Contours.Dispose();
                ho_RegionLines.Dispose();
                ho_Cross1.Dispose();
                ho_RegionLines1.Dispose();
                Distance = 0;
                Distance1 = 0;
                Distance2 = 0;
                return false;


            }

         


        }
        public bool ResultImProve(double dlimitUp, double dlimitDown, double dlimitUpGap, double dlimitDownGap, HTuple distance, HTuple distance1, HTuple distance2, HWindow window)
        {
            bool result = false;
            double dDistance = distance;
            double dDistance1 = distance1;
            double dDistance2 = distance2;
            if ((dDistance < dlimitUp && dDistance > dlimitDown) && (dDistance1 < dlimitUpGap && dDistance1 > dlimitDownGap) && (dDistance2 < dlimitUpGap && dDistance2 > dlimitDownGap))
            {
                result = true;
            }
            else
            {
                result = false;
            }
            if (result)
            {
                set_display_font(window, 20, "mono", "true", "false");
                disp_message(window, "Pass", "image", 20, 50, "green", "false");
                disp_message(window, "BR:" + Math.Round(dDistance, 4) + "mm", "image", 140, 50, "green", "false");
                disp_message(window, "D1:" + Math.Round(dDistance1, 4) + "mm", "image", 260, 50, "green", "false");
                disp_message(window, "D2:" + Math.Round(dDistance2, 4) + "mm", "image", 380, 50, "green", "false");

            }
            else
            {
                set_display_font(window, 20, "mono", "true", "false");
                disp_message(window, "NG", "image", 20, 50, "red", "false");
                disp_message(window, "BR:" + Math.Round(dDistance, 4) + "mm", "image", 140, 50, "red", "false");
                disp_message(window, "D1:" + Math.Round(dDistance1, 4) + "mm", "image", 260, 50, "red", "false");
                disp_message(window, "D2:" + Math.Round(dDistance2, 4) + "mm", "image", 380, 50, "red", "false");

            }

            return result;
        }
        #endregion

        /// <summary>
        /// 針頭檢測
        /// </summary>
        /// <param name="Window"></param>
        /// <param name="ho_Image"></param>
        /// <param name="ho_ResultImage"></param>
        public int ImageProcess_NeedleTipTest(HWindow Window, HObject ho_Image, out HObject ho_ResultImage)
        {
            int iImageProcessResult = 0;
            HOperatorSet.GenEmptyObj(out ho_ResultImage);
            set_display_font(Window, 30, "mono", "true", "false");
            HObject ho_TestRegion = new HObject();
            HObject ho_Rectangle = new HObject(), ho_ImageReduced = new HObject(), ho_Region = new HObject();
            HObject ho_ConnectedRegions = new HObject(), ho_SelectedRegions = new HObject(), ho_Cross = new HObject(), ho_ImageMedian = new HObject();
            HTuple hv_Area = new HTuple(), hv_Row = new HTuple(), hv_Column = new HTuple(), hv_Phi = new HTuple(), hv_Length1 = new HTuple(), hv_Length2 = new HTuple();
            HTuple hv_RegionRow = GCCD1.NeedleTipTest.RegionRow;
            HTuple hv_RegionColumn = GCCD1.NeedleTipTest.RegionColumn;
            HTuple hv_RegionPhi = GCCD1.NeedleTipTest.RegionPhi;
            HTuple hv_RegionLength1 = GCCD1.NeedleTipTest.RegionLength1;
            HTuple hv_RegionLength2 = GCCD1.NeedleTipTest.RegionLength2;

            HTuple hv_Gray = GCCD1.NeedleTipTest.Gray;
            try
            {
                ho_Rectangle.Dispose();
                HOperatorSet.GenRectangle2(out ho_Rectangle, hv_RegionRow, hv_RegionColumn, hv_RegionPhi, hv_RegionLength1, hv_RegionLength2);

                ho_ImageReduced.Dispose();
                HOperatorSet.ReduceDomain(ho_Image, ho_Rectangle, out ho_ImageReduced);
                ho_ImageMedian.Dispose();
                HOperatorSet.MedianRect(ho_ImageReduced, out ho_ImageMedian, 15, 15);
                ho_Region.Dispose();
                if (GCCD1.NeedleTipTest.ContrastSet == 0)
                    HOperatorSet.Threshold(ho_ImageMedian, out ho_Region, hv_Gray, 255);
                else
                    HOperatorSet.Threshold(ho_ImageMedian, out ho_Region, 0, hv_Gray);
                ho_ConnectedRegions.Dispose();
                HOperatorSet.Connection(ho_Region, out ho_ConnectedRegions);
                HOperatorSet.AreaCenter(ho_ConnectedRegions, out hv_Area, out hv_Row, out hv_Column);
                ho_SelectedRegions.Dispose();
                HOperatorSet.SelectShape(ho_ConnectedRegions, out ho_SelectedRegions, "area", "and", hv_Area.TupleMax(), hv_Area.TupleMax() + 1);
                HOperatorSet.AreaCenter(ho_SelectedRegions, out hv_Area, out hv_Row, out hv_Column);
                //沒找到區域
                if (hv_Row.Length == 0)
                {
                    ho_Image.DispObj(Window);
                    HOperatorSet.SetDraw(Window, "margin");
                    HOperatorSet.SetColor(Window, "blue");
                    ho_Rectangle.DispObj(Window);
                    disp_message(Window, "針尖搜尋NG", "", 0, 0, "red", "false");
                    HOperatorSet.DumpWindowImage(out ho_ResultImage, Window);
                    iImageProcessResult = -1;
                    return iImageProcessResult;
                }

                HTuple hv_ResultRow = new HTuple(), hv_ResultColumn = new HTuple();
                switch (GCCD1.NeedleTipTest.NeedleChoice)
                {
                    // 直針
                    case 0:
                        {
                            ucFitCircleTool_NeedleTipTest.ucFitCircle = ucFitCircle_NeedleTipTest;
                            ucFitCircle_NeedleTipTest.SetValue(GCCD1.NeedleTipTest.Radius,
                    GCCD1.NeedleTipTest.Measure_Transition,
                    GCCD1.NeedleTipTest.Measure_Select,
                    GCCD1.NeedleTipTest.Num_Measures,
                    GCCD1.NeedleTipTest.Measure_Length1,
                    GCCD1.NeedleTipTest.Measure_Length2,
                    GCCD1.NeedleTipTest.Measure_Threshold);
                            //ucFitCircleTool_NeedleTipTest.radius = GCCD1.NeedleTipTest.Radius;
                            //ucFitCircleTool_NeedleTipTest.measure_transition = GCCD1.NeedleTipTest.Measure_Transition;
                            //ucFitCircleTool_NeedleTipTest.measure_select = GCCD1.NeedleTipTest.Measure_Select;
                            //ucFitCircleTool_NeedleTipTest.num_measures = GCCD1.NeedleTipTest.Num_Measures;
                            //ucFitCircleTool_NeedleTipTest.measure_length1 = GCCD1.NeedleTipTest.Measure_Length1;
                            //ucFitCircleTool_NeedleTipTest.measure_length2 = GCCD1.NeedleTipTest.Measure_Length2;
                            //ucFitCircleTool_NeedleTipTest.measure_threshold = GCCD1.NeedleTipTest.Measure_Threshold;
                          
                            ucFitCircleTool_NeedleTipTest.ho_Image = ho_Image;
                            ucFitCircleTool_NeedleTipTest.hv_InitialRow = hv_Row;
                            ucFitCircleTool_NeedleTipTest.hv_InitialColumn = hv_Column;
                            iImageProcessResult = ucFitCircleTool_NeedleTipTest.ImageProcess_FitCircle(ho_Image, out ho_ResultContours, out ho_CrossCenter, out hv_ResultRow, out hv_ResultColumn);
                        } break;
                    // 彎針
                    case 1:
                        {
                            HOperatorSet.SmallestRectangle2(ho_SelectedRegions, out hv_Row, out hv_Column, out hv_Phi, out hv_Length1, out hv_Length2);

                            HTuple hv_ResultRow_1 = new HTuple(), hv_ResultColumn_1 = new HTuple(), hv_ResultRow_2 = new HTuple(), hv_ResultColumn_2 = new HTuple();
                            hv_ResultRow_1 = hv_Row - hv_Length1 * hv_Phi.TupleSin();
                            hv_ResultColumn_1 = hv_Column - hv_Length1 * hv_Phi.TupleCos();
                            hv_ResultRow_2 = hv_Row - hv_Length1 * (hv_Phi + ((HTuple)180).TupleRad()).TupleSin();
                            hv_ResultColumn_2 = hv_Column - hv_Length1 * (hv_Phi + ((HTuple)180).TupleRad()).TupleCos();
                            if (hv_ResultRow_1.D > hv_ResultRow_2.D)
                            {
                                hv_ResultRow = hv_ResultRow_1.TupleRound();
                                hv_ResultColumn = hv_ResultColumn_1.TupleRound();
                            }
                            else
                            {
                                hv_ResultRow = hv_ResultRow_2.TupleRound();
                                hv_ResultColumn = hv_ResultColumn_2.TupleRound();
                            }
                            iImageProcessResult = 1;
                        } break;
                }
                //找針尖NG
                if (iImageProcessResult != 1)
                {
                    ho_Image.DispObj(Window);
                    HOperatorSet.SetDraw(Window, "fill");
                    HOperatorSet.SetColor(Window, "green");
                    ho_Region.DispObj(Window);
                    HOperatorSet.SetDraw(Window, "margin");
                    HOperatorSet.SetColor(Window, "blue");
                    ho_SelectedRegions.DispObj(Window);
                    ho_Rectangle.DispObj(Window);
                    disp_message(Window, "針尖精準圓心搜尋NG", "", 0, 0, "red", "false");
                    HOperatorSet.DumpWindowImage(out ho_ResultImage, Window);
                    iImageProcessResult = -1;
                    return iImageProcessResult;
                }

                HOperatorSet.GenRectangle1(out ho_TestRegion, GCCD1.NeedleTipTest.Y_LowerValue, GCCD1.NeedleTipTest.X_LowerValue, GCCD1.NeedleTipTest.Y_UpperValue, GCCD1.NeedleTipTest.X_UpperValue);
                ho_Cross.Dispose();
                HOperatorSet.GenCrossContourXld(out ho_Cross, hv_ResultRow, hv_ResultColumn, 50, 0);
                //顯示
                ho_Image.DispObj(Window);
                HOperatorSet.SetDraw(Window, "margin");
                HOperatorSet.SetColor(Window, "blue");
                ho_Rectangle.DispObj(Window);
                HOperatorSet.SetColor(Window, "green");
                ho_TestRegion.DispObj(Window);
                //判斷針尖是否在標準內
                //OK
                if (hv_ResultRow.D <= GCCD1.NeedleTipTest.Y_UpperValue &&
                    hv_ResultRow.D >= GCCD1.NeedleTipTest.Y_LowerValue &&
                    hv_ResultColumn.D <= GCCD1.NeedleTipTest.X_UpperValue &&
                    hv_ResultColumn.D >= GCCD1.NeedleTipTest.X_LowerValue)
                {
                    HOperatorSet.SetColor(Window, "green");
                    ho_Cross.DispObj(Window);
                    disp_message(Window, "針尖檢測OK", "", 0, 0, "green", "false");
                    HOperatorSet.DumpWindowImage(out ho_ResultImage, Window);
                    iImageProcessResult = 1;
                    return iImageProcessResult;
                }
                //NG
                else
                {
                    HOperatorSet.SetColor(Window, "red");
                    ho_Cross.DispObj(Window);
                    disp_message(Window, "針尖檢測NG", "", 0, 0, "red", "false");
                    HOperatorSet.DumpWindowImage(out ho_ResultImage, Window);
                    iImageProcessResult = -1;
                    return iImageProcessResult;
                }
            }
            catch
            {
                ho_Image.DispObj(Window);
                HOperatorSet.SetDraw(Window, "margin");
                HOperatorSet.SetColor(Window, "blue");
                ho_Rectangle.DispObj(Window);
                disp_message(Window, "未知原因NG", "", 0, 0, "red", "false");
                HOperatorSet.DumpWindowImage(out ho_ResultImage, Window);
                iImageProcessResult = -1;
                return iImageProcessResult;
            }
            ho_Image.Dispose();
            ho_Rectangle.Dispose();
            ho_ConnectedRegions.Dispose();
            ho_ImageReduced.Dispose();
            ho_Region.Dispose();
            ho_SelectedRegions.Dispose();
            ho_Cross.Dispose();
            ho_TestRegion.Dispose();
            ho_ImageMedian.Dispose();
        }
    }
    
}